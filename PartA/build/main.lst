
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006e0c  08000000  0c000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00030000  2**0
                  ALLOC
  2 .ram_code     00000000  10000800  10000800  000204b8  2**0
                  CONTENTS
  3 PSRAM_DATA    00000000  10000800  10000800  000204b8  2**0
                  CONTENTS
  4 PSRAM_BSS     00000000  10000800  10000800  000204b8  2**0
                  CONTENTS
  5 .data         000004b8  20000000  0c006e0c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ab0  200004b8  0c0072c4  000204b8  2**2
                  ALLOC
  7 .no_init      00000014  2000ffc0  2000ffc0  0002ffc0  2**2
                  ALLOC
  8 DSRAM2_DATA   00000000  30000000  30000000  000204b8  2**0
                  CONTENTS
  9 DSRAM2_BSS    00000e00  30000000  0c0072c4  00030000  2**2
                  ALLOC
 10 .debug_aranges 00000918  00000000  00000000  000204b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0001efc9  00000000  00000000  00020dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002f4b  00000000  00000000  0003fd99  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000a067  00000000  00000000  00042ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000268c  00000000  00000000  0004cd4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00083c15  00000000  00000000  0004f3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0000495a  00000000  00000000  000d2fed  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000007e0  00000000  00000000  000d7947  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .build_attributes 0000050a  00000000  00000000  000d8127  2**0
                  CONTENTS, READONLY
 19 .debug_macro  0001cd0a  00000000  00000000  000d8631  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	59 07 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     Y...............
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	09 0a 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c006e0c 	.word	0x0c006e0c
 800024c:	20000000 	.word	0x20000000
 8000250:	000004b8 	.word	0x000004b8
 8000254:	0c0072c4 	.word	0x0c0072c4
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c006e0c 	.word	0x0c006e0c
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c006e0c 	.word	0x0c006e0c
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	200004b8 	.word	0x200004b8
 800027c:	00000aac 	.word	0x00000aac
 8000280:	30000000 	.word	0x30000000
 8000284:	00000e00 	.word	0x00000e00
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800
    ldr  r0, =SystemInit
 8000294:	08006191 	.word	0x08006191
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
    ldr  r0, =__libc_init_array
 80002a8:	08006a21 	.word	0x08006a21
    ldr  r0, =main
 80002ac:	08000399 	.word	0x08000399

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	6039      	str	r1, [r7, #0]
 80002be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	db0a      	blt.n	80002de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	490c      	ldr	r1, [pc, #48]	; (8000300 <__NVIC_SetPriority+0x4c>)
 80002ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d2:	0092      	lsls	r2, r2, #2
 80002d4:	b2d2      	uxtb	r2, r2
 80002d6:	440b      	add	r3, r1
 80002d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002dc:	e00a      	b.n	80002f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	4908      	ldr	r1, [pc, #32]	; (8000304 <__NVIC_SetPriority+0x50>)
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	f003 030f 	and.w	r3, r3, #15
 80002ea:	3b04      	subs	r3, #4
 80002ec:	0092      	lsls	r2, r2, #2
 80002ee:	b2d2      	uxtb	r2, r2
 80002f0:	440b      	add	r3, r1
 80002f2:	761a      	strb	r2, [r3, #24]
}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr
 8000300:	e000e100 	.word	0xe000e100
 8000304:	e000ed00 	.word	0xe000ed00

08000308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	3b01      	subs	r3, #1
 8000314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000318:	d301      	bcc.n	800031e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800031a:	2301      	movs	r3, #1
 800031c:	e00f      	b.n	800033e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800031e:	4a0a      	ldr	r2, [pc, #40]	; (8000348 <SysTick_Config+0x40>)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	3b01      	subs	r3, #1
 8000324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000326:	213f      	movs	r1, #63	; 0x3f
 8000328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800032c:	f7ff ffc2 	bl	80002b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000330:	4b05      	ldr	r3, [pc, #20]	; (8000348 <SysTick_Config+0x40>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000336:	4b04      	ldr	r3, [pc, #16]	; (8000348 <SysTick_Config+0x40>)
 8000338:	2207      	movs	r2, #7
 800033a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800033c:	2300      	movs	r3, #0
}
 800033e:	4618      	mov	r0, r3
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	e000e010 	.word	0xe000e010

0800034c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	460b      	mov	r3, r1
 8000356:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8000358:	78fb      	ldrb	r3, [r7, #3]
 800035a:	2201      	movs	r2, #1
 800035c:	409a      	lsls	r2, r3
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	605a      	str	r2, [r3, #4]
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr

0800036e <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800036e:	b480      	push	{r7}
 8000370:	b083      	sub	sp, #12
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
 8000376:	460b      	mov	r3, r1
 8000378:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800037a:	78fb      	ldrb	r3, [r7, #3]
 800037c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000380:	409a      	lsls	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	605a      	str	r2, [r3, #4]
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	0000      	movs	r0, r0
 8000394:	0000      	movs	r0, r0
	...

08000398 <main>:

/**
 * Main program entry point. This routine configures the hardware required by
 * the application, then enters a loop to run the application tasks in sequence.
 */
int main(void) {
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
	/* System timer configuration */
	SysTick_Config(SystemCoreClock / TICKS_PER_SECOND);
 800039e:	4b18      	ldr	r3, [pc, #96]	; (8000400 <main+0x68>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4a18      	ldr	r2, [pc, #96]	; (8000404 <main+0x6c>)
 80003a4:	fba2 2303 	umull	r2, r3, r2, r3
 80003a8:	099b      	lsrs	r3, r3, #6
 80003aa:	4618      	mov	r0, r3
 80003ac:	f7ff ffac 	bl	8000308 <SysTick_Config>

	// Init LED pins for debugging and NUM/CAPS visual report
	XMC_GPIO_SetMode(LED1,XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 80003b0:	2280      	movs	r2, #128	; 0x80
 80003b2:	2101      	movs	r1, #1
 80003b4:	4814      	ldr	r0, [pc, #80]	; (8000408 <main+0x70>)
 80003b6:	f002 f8b5 	bl	8002524 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(LED2,XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 80003ba:	2280      	movs	r2, #128	; 0x80
 80003bc:	2100      	movs	r1, #0
 80003be:	4812      	ldr	r0, [pc, #72]	; (8000408 <main+0x70>)
 80003c0:	f002 f8b0 	bl	8002524 <XMC_GPIO_SetMode>
	USB_Init();
 80003c4:	f000 fb2a 	bl	8000a1c <USB_Init>

	// Wait until host has enumerated HID device
	for(int i = 0; i < 10e6; ++i)
 80003c8:	2300      	movs	r3, #0
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	e002      	b.n	80003d4 <main+0x3c>
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	3301      	adds	r3, #1
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f006 fa2b 	bl	8006830 <__aeabi_i2d>
 80003da:	a307      	add	r3, pc, #28	; (adr r3, 80003f8 <main+0x60>)
 80003dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003e0:	f006 faf0 	bl	80069c4 <__aeabi_dcmplt>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d1f1      	bne.n	80003ce <main+0x36>
		;


	while (1) {
		HID_Device_USBTask(&Keyboard_HID_Interface);
 80003ea:	4808      	ldr	r0, [pc, #32]	; (800040c <main+0x74>)
 80003ec:	f002 fb06 	bl	80029fc <HID_Device_USBTask>
 80003f0:	e7fb      	b.n	80003ea <main+0x52>
 80003f2:	bf00      	nop
 80003f4:	f3af 8000 	nop.w
 80003f8:	00000000 	.word	0x00000000
 80003fc:	416312d0 	.word	0x416312d0
 8000400:	2000ffc0 	.word	0x2000ffc0
 8000404:	10624dd3 	.word	0x10624dd3
 8000408:	48028100 	.word	0x48028100
 800040c:	20000060 	.word	0x20000060

08000410 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(
							USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
							uint8_t* const ReportID,
							const uint8_t ReportType,
							void* ReportData,
							uint16_t* const ReportSize ) {
 8000410:	b590      	push	{r4, r7, lr}
 8000412:	b087      	sub	sp, #28
 8000414:	af00      	add	r7, sp, #0
 8000416:	60f8      	str	r0, [r7, #12]
 8000418:	60b9      	str	r1, [r7, #8]
 800041a:	603b      	str	r3, [r7, #0]
 800041c:	4613      	mov	r3, r2
 800041e:	71fb      	strb	r3, [r7, #7]
	USB_KeyboardReport_Data_t* report = (USB_KeyboardReport_Data_t *)ReportData;
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	617b      	str	r3, [r7, #20]
	*ReportSize = sizeof(USB_KeyboardReport_Data_t);
 8000424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000426:	2208      	movs	r2, #8
 8000428:	801a      	strh	r2, [r3, #0]
	// 	GERMAN_KEYBOARD_SC_D,
	// 	GERMAN_KEYBOARD_SC_Y,
	// 	GERMAN_KEYBOARD_SC_F,
	// 	GERMAN_KEYBOARD_SC_ENTER,
	// };
	stringToSend[0][indexFinalPassword] =	stringAllChar[IndexAlphabet];
 800042a:	4b74      	ldr	r3, [pc, #464]	; (80005fc <CALLBACK_HID_Device_CreateHIDReport+0x1ec>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	4619      	mov	r1, r3
 8000430:	4b73      	ldr	r3, [pc, #460]	; (8000600 <CALLBACK_HID_Device_CreateHIDReport+0x1f0>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	461a      	mov	r2, r3
 8000436:	4b73      	ldr	r3, [pc, #460]	; (8000604 <CALLBACK_HID_Device_CreateHIDReport+0x1f4>)
 8000438:	5c59      	ldrb	r1, [r3, r1]
 800043a:	4b73      	ldr	r3, [pc, #460]	; (8000608 <CALLBACK_HID_Device_CreateHIDReport+0x1f8>)
 800043c:	5499      	strb	r1, [r3, r2]
	stringToSend[1][indexFinalPassword] =	ChooseModi(IndexAlphabet);
 800043e:	4b6f      	ldr	r3, [pc, #444]	; (80005fc <CALLBACK_HID_Device_CreateHIDReport+0x1ec>)
 8000440:	781a      	ldrb	r2, [r3, #0]
 8000442:	4b6f      	ldr	r3, [pc, #444]	; (8000600 <CALLBACK_HID_Device_CreateHIDReport+0x1f0>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	461c      	mov	r4, r3
 8000448:	4610      	mov	r0, r2
 800044a:	f000 fa03 	bl	8000854 <ChooseModi>
 800044e:	4603      	mov	r3, r0
 8000450:	461a      	mov	r2, r3
 8000452:	4b6d      	ldr	r3, [pc, #436]	; (8000608 <CALLBACK_HID_Device_CreateHIDReport+0x1f8>)
 8000454:	4423      	add	r3, r4
 8000456:	755a      	strb	r2, [r3, #21]
	stringToSend[0][indexFinalPassword+1] =	GERMAN_KEYBOARD_SC_ENTER;
 8000458:	4b69      	ldr	r3, [pc, #420]	; (8000600 <CALLBACK_HID_Device_CreateHIDReport+0x1f0>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	3301      	adds	r3, #1
 800045e:	4a6a      	ldr	r2, [pc, #424]	; (8000608 <CALLBACK_HID_Device_CreateHIDReport+0x1f8>)
 8000460:	2128      	movs	r1, #40	; 0x28
 8000462:	54d1      	strb	r1, [r2, r3]
	stringToSend[1][indexFinalPassword+1] = 0;
 8000464:	4b66      	ldr	r3, [pc, #408]	; (8000600 <CALLBACK_HID_Device_CreateHIDReport+0x1f0>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	3301      	adds	r3, #1
 800046a:	4a67      	ldr	r2, [pc, #412]	; (8000608 <CALLBACK_HID_Device_CreateHIDReport+0x1f8>)
 800046c:	4413      	add	r3, r2
 800046e:	2200      	movs	r2, #0
 8000470:	755a      	strb	r2, [r3, #21]
	stringToSend[0][indexFinalPassword+2] =	0;
 8000472:	4b63      	ldr	r3, [pc, #396]	; (8000600 <CALLBACK_HID_Device_CreateHIDReport+0x1f0>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	3302      	adds	r3, #2
 8000478:	4a63      	ldr	r2, [pc, #396]	; (8000608 <CALLBACK_HID_Device_CreateHIDReport+0x1f8>)
 800047a:	2100      	movs	r1, #0
 800047c:	54d1      	strb	r1, [r2, r3]
	stringToSend[1][indexFinalPassword+2] =	0;
 800047e:	4b60      	ldr	r3, [pc, #384]	; (8000600 <CALLBACK_HID_Device_CreateHIDReport+0x1f0>)
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	3302      	adds	r3, #2
 8000484:	4a60      	ldr	r2, [pc, #384]	; (8000608 <CALLBACK_HID_Device_CreateHIDReport+0x1f8>)
 8000486:	4413      	add	r3, r2
 8000488:	2200      	movs	r2, #0
 800048a:	755a      	strb	r2, [r3, #21]

	if(indexToSend <= (indexFinalPassword+1)) {
 800048c:	4b5f      	ldr	r3, [pc, #380]	; (800060c <CALLBACK_HID_Device_CreateHIDReport+0x1fc>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	461a      	mov	r2, r3
 8000492:	4b5b      	ldr	r3, [pc, #364]	; (8000600 <CALLBACK_HID_Device_CreateHIDReport+0x1f0>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	3301      	adds	r3, #1
 8000498:	429a      	cmp	r2, r3
 800049a:	dc2f      	bgt.n	80004fc <CALLBACK_HID_Device_CreateHIDReport+0xec>
		// if (indexToSend <= (indexFinalPassword)) {
		// 			indexMod = ChooseModi(finalPassword[indexToSend]);
		//
		// } else {indexMod = ChooseModi(IndexAlphabet);}

		if(characterSent) {
 800049c:	4b5c      	ldr	r3, [pc, #368]	; (8000610 <CALLBACK_HID_Device_CreateHIDReport+0x200>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d012      	beq.n	80004ca <CALLBACK_HID_Device_CreateHIDReport+0xba>
			report->Modifier = 0;
 80004a4:	697b      	ldr	r3, [r7, #20]
 80004a6:	2200      	movs	r2, #0
 80004a8:	701a      	strb	r2, [r3, #0]
			report->Reserved = 0;
 80004aa:	697b      	ldr	r3, [r7, #20]
 80004ac:	2200      	movs	r2, #0
 80004ae:	705a      	strb	r2, [r3, #1]
			report->KeyCode[0] = 0;
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	2200      	movs	r2, #0
 80004b4:	709a      	strb	r2, [r3, #2]
			characterSent = 0;
 80004b6:	4b56      	ldr	r3, [pc, #344]	; (8000610 <CALLBACK_HID_Device_CreateHIDReport+0x200>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	701a      	strb	r2, [r3, #0]
	//		timeMeasured[indexToSend]=ticks;
			++indexToSend;
 80004bc:	4b53      	ldr	r3, [pc, #332]	; (800060c <CALLBACK_HID_Device_CreateHIDReport+0x1fc>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	3301      	adds	r3, #1
 80004c2:	b2da      	uxtb	r2, r3
 80004c4:	4b51      	ldr	r3, [pc, #324]	; (800060c <CALLBACK_HID_Device_CreateHIDReport+0x1fc>)
 80004c6:	701a      	strb	r2, [r3, #0]
 80004c8:	e092      	b.n	80005f0 <CALLBACK_HID_Device_CreateHIDReport+0x1e0>
		} else {
			//if (indexToSend == 1 || indexToSend == 5){report->Modifier =HID_KEYBOARD_MODIFIER_RIGHTSHIFT;}
			//else {report->Modifier = 0;}//HID_KEYBOARD_MODIFIER_RIGHTALT;// altgr = 6 = 0x40
			//indexMod = ChooseModi(IndexAlphabet);
			report->Modifier = modArray[stringToSend[1][indexToSend]];
 80004ca:	4b50      	ldr	r3, [pc, #320]	; (800060c <CALLBACK_HID_Device_CreateHIDReport+0x1fc>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	461a      	mov	r2, r3
 80004d0:	4b4d      	ldr	r3, [pc, #308]	; (8000608 <CALLBACK_HID_Device_CreateHIDReport+0x1f8>)
 80004d2:	4413      	add	r3, r2
 80004d4:	7d5b      	ldrb	r3, [r3, #21]
 80004d6:	461a      	mov	r2, r3
 80004d8:	4b4e      	ldr	r3, [pc, #312]	; (8000614 <CALLBACK_HID_Device_CreateHIDReport+0x204>)
 80004da:	5c9a      	ldrb	r2, [r3, r2]
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	701a      	strb	r2, [r3, #0]
			report->Reserved = 0;
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	2200      	movs	r2, #0
 80004e4:	705a      	strb	r2, [r3, #1]
			report->KeyCode[0] = stringToSend[0][indexToSend];
 80004e6:	4b49      	ldr	r3, [pc, #292]	; (800060c <CALLBACK_HID_Device_CreateHIDReport+0x1fc>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	461a      	mov	r2, r3
 80004ec:	4b46      	ldr	r3, [pc, #280]	; (8000608 <CALLBACK_HID_Device_CreateHIDReport+0x1f8>)
 80004ee:	5c9a      	ldrb	r2, [r3, r2]
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	709a      	strb	r2, [r3, #2]
			characterSent = 1;
 80004f4:	4b46      	ldr	r3, [pc, #280]	; (8000610 <CALLBACK_HID_Device_CreateHIDReport+0x200>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	701a      	strb	r2, [r3, #0]
 80004fa:	e079      	b.n	80005f0 <CALLBACK_HID_Device_CreateHIDReport+0x1e0>
		//	ticks = 0
		}
	} else if(IndexAlphabet <=84){
 80004fc:	4b3f      	ldr	r3, [pc, #252]	; (80005fc <CALLBACK_HID_Device_CreateHIDReport+0x1ec>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b54      	cmp	r3, #84	; 0x54
 8000502:	d818      	bhi.n	8000536 <CALLBACK_HID_Device_CreateHIDReport+0x126>
		// indexNumOn  = 0;
		// indexNumOff = 0;indexToSend =21;

		indexCapsOn = 0;
 8000504:	4b44      	ldr	r3, [pc, #272]	; (8000618 <CALLBACK_HID_Device_CreateHIDReport+0x208>)
 8000506:	2200      	movs	r2, #0
 8000508:	701a      	strb	r2, [r3, #0]
		indexCapsOff= 0;
 800050a:	4b44      	ldr	r3, [pc, #272]	; (800061c <CALLBACK_HID_Device_CreateHIDReport+0x20c>)
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]
		indexToSend = 0;
 8000510:	4b3e      	ldr	r3, [pc, #248]	; (800060c <CALLBACK_HID_Device_CreateHIDReport+0x1fc>)
 8000512:	2200      	movs	r2, #0
 8000514:	701a      	strb	r2, [r3, #0]
		IndexAlphabet++;
 8000516:	4b39      	ldr	r3, [pc, #228]	; (80005fc <CALLBACK_HID_Device_CreateHIDReport+0x1ec>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	3301      	adds	r3, #1
 800051c:	b2da      	uxtb	r2, r3
 800051e:	4b37      	ldr	r3, [pc, #220]	; (80005fc <CALLBACK_HID_Device_CreateHIDReport+0x1ec>)
 8000520:	701a      	strb	r2, [r3, #0]
		indexMod = ChooseModi(IndexAlphabet);
 8000522:	4b36      	ldr	r3, [pc, #216]	; (80005fc <CALLBACK_HID_Device_CreateHIDReport+0x1ec>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	4618      	mov	r0, r3
 8000528:	f000 f994 	bl	8000854 <ChooseModi>
 800052c:	4603      	mov	r3, r0
 800052e:	461a      	mov	r2, r3
 8000530:	4b3b      	ldr	r3, [pc, #236]	; (8000620 <CALLBACK_HID_Device_CreateHIDReport+0x210>)
 8000532:	701a      	strb	r2, [r3, #0]
 8000534:	e05c      	b.n	80005f0 <CALLBACK_HID_Device_CreateHIDReport+0x1e0>

	} else // end of transMission (one char of the password)
	{		//IndexAlphabet =0;
		//indexMod=0;
		indexToSend =indexFinalPassword+2;
 8000536:	4b32      	ldr	r3, [pc, #200]	; (8000600 <CALLBACK_HID_Device_CreateHIDReport+0x1f0>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	3302      	adds	r3, #2
 800053c:	b2da      	uxtb	r2, r3
 800053e:	4b33      	ldr	r3, [pc, #204]	; (800060c <CALLBACK_HID_Device_CreateHIDReport+0x1fc>)
 8000540:	701a      	strb	r2, [r3, #0]
		if (indexNumOn >= IndexAlphabet) {
 8000542:	4b38      	ldr	r3, [pc, #224]	; (8000624 <CALLBACK_HID_Device_CreateHIDReport+0x214>)
 8000544:	781a      	ldrb	r2, [r3, #0]
 8000546:	4b2d      	ldr	r3, [pc, #180]	; (80005fc <CALLBACK_HID_Device_CreateHIDReport+0x1ec>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	429a      	cmp	r2, r3
 800054c:	d350      	bcc.n	80005f0 <CALLBACK_HID_Device_CreateHIDReport+0x1e0>
			finalPassword[indexFinalPassword]=FindMax(indexNumOn);
 800054e:	4b35      	ldr	r3, [pc, #212]	; (8000624 <CALLBACK_HID_Device_CreateHIDReport+0x214>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f90e 	bl	8000774 <FindMax>
 8000558:	4603      	mov	r3, r0
 800055a:	4619      	mov	r1, r3
 800055c:	4b28      	ldr	r3, [pc, #160]	; (8000600 <CALLBACK_HID_Device_CreateHIDReport+0x1f0>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	461a      	mov	r2, r3
 8000562:	4b31      	ldr	r3, [pc, #196]	; (8000628 <CALLBACK_HID_Device_CreateHIDReport+0x218>)
 8000564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			stringToSend[0][indexFinalPassword]=stringAllChar[finalPassword[indexFinalPassword]];
 8000568:	4b25      	ldr	r3, [pc, #148]	; (8000600 <CALLBACK_HID_Device_CreateHIDReport+0x1f0>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	461a      	mov	r2, r3
 800056e:	4b2e      	ldr	r3, [pc, #184]	; (8000628 <CALLBACK_HID_Device_CreateHIDReport+0x218>)
 8000570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000574:	4a22      	ldr	r2, [pc, #136]	; (8000600 <CALLBACK_HID_Device_CreateHIDReport+0x1f0>)
 8000576:	7812      	ldrb	r2, [r2, #0]
 8000578:	4611      	mov	r1, r2
 800057a:	4a22      	ldr	r2, [pc, #136]	; (8000604 <CALLBACK_HID_Device_CreateHIDReport+0x1f4>)
 800057c:	5cd2      	ldrb	r2, [r2, r3]
 800057e:	4b22      	ldr	r3, [pc, #136]	; (8000608 <CALLBACK_HID_Device_CreateHIDReport+0x1f8>)
 8000580:	545a      	strb	r2, [r3, r1]
			stringToSend[1][indexFinalPassword]=ChooseModi(finalPassword[indexFinalPassword]);
 8000582:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <CALLBACK_HID_Device_CreateHIDReport+0x1f0>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	461a      	mov	r2, r3
 8000588:	4b27      	ldr	r3, [pc, #156]	; (8000628 <CALLBACK_HID_Device_CreateHIDReport+0x218>)
 800058a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800058e:	b2da      	uxtb	r2, r3
 8000590:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <CALLBACK_HID_Device_CreateHIDReport+0x1f0>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	461c      	mov	r4, r3
 8000596:	4610      	mov	r0, r2
 8000598:	f000 f95c 	bl	8000854 <ChooseModi>
 800059c:	4603      	mov	r3, r0
 800059e:	461a      	mov	r2, r3
 80005a0:	4b19      	ldr	r3, [pc, #100]	; (8000608 <CALLBACK_HID_Device_CreateHIDReport+0x1f8>)
 80005a2:	4423      	add	r3, r4
 80005a4:	755a      	strb	r2, [r3, #21]
			indexFinalPassword++;
 80005a6:	4b16      	ldr	r3, [pc, #88]	; (8000600 <CALLBACK_HID_Device_CreateHIDReport+0x1f0>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	3301      	adds	r3, #1
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	4b14      	ldr	r3, [pc, #80]	; (8000600 <CALLBACK_HID_Device_CreateHIDReport+0x1f0>)
 80005b0:	701a      	strb	r2, [r3, #0]
			indexNumOn =0;
 80005b2:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <CALLBACK_HID_Device_CreateHIDReport+0x214>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
			indexNumOff =0;
 80005b8:	4b1c      	ldr	r3, [pc, #112]	; (800062c <CALLBACK_HID_Device_CreateHIDReport+0x21c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]
			indexToSend =0;
 80005be:	4b13      	ldr	r3, [pc, #76]	; (800060c <CALLBACK_HID_Device_CreateHIDReport+0x1fc>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
			IndexAlphabet=0;
 80005c4:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <CALLBACK_HID_Device_CreateHIDReport+0x1ec>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
			indexMod = ChooseModi(IndexAlphabet);
 80005ca:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <CALLBACK_HID_Device_CreateHIDReport+0x1ec>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 f940 	bl	8000854 <ChooseModi>
 80005d4:	4603      	mov	r3, r0
 80005d6:	461a      	mov	r2, r3
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <CALLBACK_HID_Device_CreateHIDReport+0x210>)
 80005da:	701a      	strb	r2, [r3, #0]
			if (indexFinalPassword>=2) { // stop the seach for password
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <CALLBACK_HID_Device_CreateHIDReport+0x1f0>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d905      	bls.n	80005f0 <CALLBACK_HID_Device_CreateHIDReport+0x1e0>
				indexToSend =indexFinalPassword+2;
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <CALLBACK_HID_Device_CreateHIDReport+0x1f0>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	3302      	adds	r3, #2
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <CALLBACK_HID_Device_CreateHIDReport+0x1fc>)
 80005ee:	701a      	strb	r2, [r3, #0]
			}
		}
	}


	return true;
 80005f0:	2301      	movs	r3, #1
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	371c      	adds	r7, #28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd90      	pop	{r4, r7, pc}
 80005fa:	bf00      	nop
 80005fc:	200004c4 	.word	0x200004c4
 8000600:	200004bc 	.word	0x200004bc
 8000604:	20000000 	.word	0x20000000
 8000608:	200004c8 	.word	0x200004c8
 800060c:	200004f2 	.word	0x200004f2
 8000610:	200004f3 	.word	0x200004f3
 8000614:	2000005c 	.word	0x2000005c
 8000618:	200004ba 	.word	0x200004ba
 800061c:	200004bb 	.word	0x200004bb
 8000620:	200004f4 	.word	0x200004f4
 8000624:	200004b8 	.word	0x200004b8
 8000628:	200006f4 	.word	0x200006f4
 800062c:	200004b9 	.word	0x200004b9

08000630 <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(
						USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
						const uint8_t ReportID,
						const uint8_t ReportType,
						const void* ReportData,
						const uint16_t ReportSize ) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	460b      	mov	r3, r1
 800063c:	72fb      	strb	r3, [r7, #11]
 800063e:	4613      	mov	r3, r2
 8000640:	72bb      	strb	r3, [r7, #10]
	uint8_t *report = (uint8_t*)ReportData;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	617b      	str	r3, [r7, #20]

	if(*report & HID_KEYBOARD_LED_NUMLOCK)
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	2b00      	cmp	r3, #0
 8000650:	d012      	beq.n	8000678 <CALLBACK_HID_Device_ProcessHIDReport+0x48>
		{XMC_GPIO_SetOutputHigh(LED1);
 8000652:	2101      	movs	r1, #1
 8000654:	4829      	ldr	r0, [pc, #164]	; (80006fc <CALLBACK_HID_Device_ProcessHIDReport+0xcc>)
 8000656:	f7ff fe79 	bl	800034c <XMC_GPIO_SetOutputHigh>
		timeNumOn[indexNumOn]=ticks; //end time of string
 800065a:	4b29      	ldr	r3, [pc, #164]	; (8000700 <CALLBACK_HID_Device_ProcessHIDReport+0xd0>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	4619      	mov	r1, r3
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <CALLBACK_HID_Device_ProcessHIDReport+0xd4>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a28      	ldr	r2, [pc, #160]	; (8000708 <CALLBACK_HID_Device_ProcessHIDReport+0xd8>)
 8000666:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		indexNumOn++;}
 800066a:	4b25      	ldr	r3, [pc, #148]	; (8000700 <CALLBACK_HID_Device_ProcessHIDReport+0xd0>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	3301      	adds	r3, #1
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4b23      	ldr	r3, [pc, #140]	; (8000700 <CALLBACK_HID_Device_ProcessHIDReport+0xd0>)
 8000674:	701a      	strb	r2, [r3, #0]
 8000676:	e011      	b.n	800069c <CALLBACK_HID_Device_ProcessHIDReport+0x6c>
	else
		{XMC_GPIO_SetOutputLow(LED1);
 8000678:	2101      	movs	r1, #1
 800067a:	4820      	ldr	r0, [pc, #128]	; (80006fc <CALLBACK_HID_Device_ProcessHIDReport+0xcc>)
 800067c:	f7ff fe77 	bl	800036e <XMC_GPIO_SetOutputLow>
		timeNumOff[indexNumOff]=ticks;// starte time of string
 8000680:	4b22      	ldr	r3, [pc, #136]	; (800070c <CALLBACK_HID_Device_ProcessHIDReport+0xdc>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	4619      	mov	r1, r3
 8000686:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <CALLBACK_HID_Device_ProcessHIDReport+0xd4>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a21      	ldr	r2, [pc, #132]	; (8000710 <CALLBACK_HID_Device_ProcessHIDReport+0xe0>)
 800068c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		indexNumOff++;
 8000690:	4b1e      	ldr	r3, [pc, #120]	; (800070c <CALLBACK_HID_Device_ProcessHIDReport+0xdc>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	3301      	adds	r3, #1
 8000696:	b2da      	uxtb	r2, r3
 8000698:	4b1c      	ldr	r3, [pc, #112]	; (800070c <CALLBACK_HID_Device_ProcessHIDReport+0xdc>)
 800069a:	701a      	strb	r2, [r3, #0]
	  //     {
		// 			//printf("%d ", timeNumOff[loop]);//printf("%d\n%d\n%d\n", timeNumOff[0], timeNumOff[1], timeNumOff[2]);}
		// 		}
 		// 	}
		}
	if(*report & HID_KEYBOARD_LED_CAPSLOCK)
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	f003 0302 	and.w	r3, r3, #2
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d012      	beq.n	80006ce <CALLBACK_HID_Device_ProcessHIDReport+0x9e>
		{XMC_GPIO_SetOutputHigh(LED2);
 80006a8:	2100      	movs	r1, #0
 80006aa:	4814      	ldr	r0, [pc, #80]	; (80006fc <CALLBACK_HID_Device_ProcessHIDReport+0xcc>)
 80006ac:	f7ff fe4e 	bl	800034c <XMC_GPIO_SetOutputHigh>
		timeCapsOn[indexCapsOn]=ticks;
 80006b0:	4b18      	ldr	r3, [pc, #96]	; (8000714 <CALLBACK_HID_Device_ProcessHIDReport+0xe4>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	4619      	mov	r1, r3
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <CALLBACK_HID_Device_ProcessHIDReport+0xd4>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a17      	ldr	r2, [pc, #92]	; (8000718 <CALLBACK_HID_Device_ProcessHIDReport+0xe8>)
 80006bc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		indexCapsOn++;
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <CALLBACK_HID_Device_ProcessHIDReport+0xe4>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	3301      	adds	r3, #1
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <CALLBACK_HID_Device_ProcessHIDReport+0xe4>)
 80006ca:	701a      	strb	r2, [r3, #0]
	else
		{XMC_GPIO_SetOutputLow(LED2);
		timeCapsOff[indexCapsOff]=ticks;
		indexCapsOff++;
		}
}
 80006cc:	e011      	b.n	80006f2 <CALLBACK_HID_Device_ProcessHIDReport+0xc2>
		{XMC_GPIO_SetOutputLow(LED2);
 80006ce:	2100      	movs	r1, #0
 80006d0:	480a      	ldr	r0, [pc, #40]	; (80006fc <CALLBACK_HID_Device_ProcessHIDReport+0xcc>)
 80006d2:	f7ff fe4c 	bl	800036e <XMC_GPIO_SetOutputLow>
		timeCapsOff[indexCapsOff]=ticks;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <CALLBACK_HID_Device_ProcessHIDReport+0xec>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	4619      	mov	r1, r3
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <CALLBACK_HID_Device_ProcessHIDReport+0xd4>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a0f      	ldr	r2, [pc, #60]	; (8000720 <CALLBACK_HID_Device_ProcessHIDReport+0xf0>)
 80006e2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		indexCapsOff++;
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <CALLBACK_HID_Device_ProcessHIDReport+0xec>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	3301      	adds	r3, #1
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <CALLBACK_HID_Device_ProcessHIDReport+0xec>)
 80006f0:	701a      	strb	r2, [r3, #0]
}
 80006f2:	bf00      	nop
 80006f4:	3718      	adds	r7, #24
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	48028100 	.word	0x48028100
 8000700:	200004b8 	.word	0x200004b8
 8000704:	200004c0 	.word	0x200004c0
 8000708:	200007a4 	.word	0x200007a4
 800070c:	200004b9 	.word	0x200004b9
 8000710:	20000544 	.word	0x20000544
 8000714:	200004ba 	.word	0x200004ba
 8000718:	20000744 	.word	0x20000744
 800071c:	200004bb 	.word	0x200004bb
 8000720:	20000924 	.word	0x20000924

08000724 <SystemCoreClockSetup>:

void SystemCoreClockSetup(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	/* Setup settings for USB clock */
	XMC_SCU_CLOCK_Init(&clock_config);
 8000728:	480a      	ldr	r0, [pc, #40]	; (8000754 <SystemCoreClockSetup+0x30>)
 800072a:	f000 fcf1 	bl	8001110 <XMC_SCU_CLOCK_Init>

	XMC_SCU_CLOCK_EnableUsbPll();
 800072e:	f001 f9b5 	bl	8001a9c <XMC_SCU_CLOCK_EnableUsbPll>
	XMC_SCU_CLOCK_StartUsbPll(2, 64);
 8000732:	2140      	movs	r1, #64	; 0x40
 8000734:	2002      	movs	r0, #2
 8000736:	f001 f9d5 	bl	8001ae4 <XMC_SCU_CLOCK_StartUsbPll>
	XMC_SCU_CLOCK_SetUsbClockDivider(4);
 800073a:	2004      	movs	r0, #4
 800073c:	f001 f8ec 	bl	8001918 <XMC_SCU_CLOCK_SetUsbClockDivider>
	XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8000740:	2000      	movs	r0, #0
 8000742:	f000 fff1 	bl	8001728 <XMC_SCU_CLOCK_SetUsbClockSource>
	XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_USB);
 8000746:	2001      	movs	r0, #1
 8000748:	f001 f940 	bl	80019cc <XMC_SCU_CLOCK_EnableClock>

	SystemCoreClockUpdate();
 800074c:	f005 fe6e 	bl	800642c <SystemCoreClockUpdate>
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	08006c94 	.word	0x08006c94

08000758 <SysTick_Handler>:

void SysTick_Handler(void)
{  //static uint32_t ticks = 0;
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0

  ticks++;
 800075c:	4b04      	ldr	r3, [pc, #16]	; (8000770 <SysTick_Handler+0x18>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	3301      	adds	r3, #1
 8000762:	4a03      	ldr	r2, [pc, #12]	; (8000770 <SysTick_Handler+0x18>)
 8000764:	6013      	str	r3, [r2, #0]
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	200004c0 	.word	0x200004c0

08000774 <FindMax>:

uint8_t FindMax(int count){ // count is the number of elements in timeNumOn or timeCapsOff
 8000774:	b4b0      	push	{r4, r5, r7}
 8000776:	b087      	sub	sp, #28
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	466b      	mov	r3, sp
 800077e:	461d      	mov	r5, r3
	uint32_t transTime[count];
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	1e43      	subs	r3, r0, #1
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	4603      	mov	r3, r0
 8000788:	4619      	mov	r1, r3
 800078a:	f04f 0200 	mov.w	r2, #0
 800078e:	f04f 0300 	mov.w	r3, #0
 8000792:	f04f 0400 	mov.w	r4, #0
 8000796:	0154      	lsls	r4, r2, #5
 8000798:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800079c:	014b      	lsls	r3, r1, #5
 800079e:	4603      	mov	r3, r0
 80007a0:	4619      	mov	r1, r3
 80007a2:	f04f 0200 	mov.w	r2, #0
 80007a6:	f04f 0300 	mov.w	r3, #0
 80007aa:	f04f 0400 	mov.w	r4, #0
 80007ae:	0154      	lsls	r4, r2, #5
 80007b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80007b4:	014b      	lsls	r3, r1, #5
 80007b6:	4603      	mov	r3, r0
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	3303      	adds	r3, #3
 80007bc:	3307      	adds	r3, #7
 80007be:	08db      	lsrs	r3, r3, #3
 80007c0:	00db      	lsls	r3, r3, #3
 80007c2:	ebad 0d03 	sub.w	sp, sp, r3
 80007c6:	466b      	mov	r3, sp
 80007c8:	3303      	adds	r3, #3
 80007ca:	089b      	lsrs	r3, r3, #2
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	60bb      	str	r3, [r7, #8]
	uint8_t LongestTrans=0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	74bb      	strb	r3, [r7, #18]
	uint8_t offset = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	74fb      	strb	r3, [r7, #19]
	if (indexFinalPassword == 0) {
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <FindMax+0xd4>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d102      	bne.n	80007e6 <FindMax+0x72>
		offset =1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	74fb      	strb	r3, [r7, #19]
 80007e4:	e001      	b.n	80007ea <FindMax+0x76>
	} else {offset=0;}
 80007e6:	2300      	movs	r3, #0
 80007e8:	74fb      	strb	r3, [r7, #19]
	for (size_t i = 0; i < count; i++) {
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	e01f      	b.n	8000830 <FindMax+0xbc>
		transTime[i] = timeNumOn[i+offset]- timeNumOff[i+offset]; // not shure if transTime is offset by 1, if not don't subtract 1
 80007f0:	7cfa      	ldrb	r2, [r7, #19]
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	4413      	add	r3, r2
 80007f6:	4a15      	ldr	r2, [pc, #84]	; (800084c <FindMax+0xd8>)
 80007f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007fc:	7cf9      	ldrb	r1, [r7, #19]
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	440b      	add	r3, r1
 8000802:	4913      	ldr	r1, [pc, #76]	; (8000850 <FindMax+0xdc>)
 8000804:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000808:	1ad1      	subs	r1, r2, r3
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	697a      	ldr	r2, [r7, #20]
 800080e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		if (transTime[i] > transTime[LongestTrans]) {
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	697a      	ldr	r2, [r7, #20]
 8000816:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800081a:	7cb9      	ldrb	r1, [r7, #18]
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000822:	429a      	cmp	r2, r3
 8000824:	d901      	bls.n	800082a <FindMax+0xb6>
			LongestTrans = i;
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	74bb      	strb	r3, [r7, #18]
	for (size_t i = 0; i < count; i++) {
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	3301      	adds	r3, #1
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	697a      	ldr	r2, [r7, #20]
 8000834:	429a      	cmp	r2, r3
 8000836:	d3db      	bcc.n	80007f0 <FindMax+0x7c>
		}//Ye-s:xpqTP

	}
return (LongestTrans);
 8000838:	7cbb      	ldrb	r3, [r7, #18]
 800083a:	46ad      	mov	sp, r5

}
 800083c:	4618      	mov	r0, r3
 800083e:	371c      	adds	r7, #28
 8000840:	46bd      	mov	sp, r7
 8000842:	bcb0      	pop	{r4, r5, r7}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	200004bc 	.word	0x200004bc
 800084c:	200007a4 	.word	0x200007a4
 8000850:	20000544 	.word	0x20000544

08000854 <ChooseModi>:

uint8_t ChooseModi(uint8_t indexAlphabet){
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
	uint8_t indexModi;

	if ( (indexAlphabet <=25)||
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	2b19      	cmp	r3, #25
 8000862:	d911      	bls.n	8000888 <ChooseModi+0x34>
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	2b33      	cmp	r3, #51	; 0x33
 8000868:	d902      	bls.n	8000870 <ChooseModi+0x1c>
			 (indexAlphabet >=52 && indexAlphabet <=61)||
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	2b3d      	cmp	r3, #61	; 0x3d
 800086e:	d90b      	bls.n	8000888 <ChooseModi+0x34>
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	2b41      	cmp	r3, #65	; 0x41
 8000874:	d008      	beq.n	8000888 <ChooseModi+0x34>
			 (indexAlphabet ==65)||
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	2b43      	cmp	r3, #67	; 0x43
 800087a:	d005      	beq.n	8000888 <ChooseModi+0x34>
			 (indexAlphabet ==67)||
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	2b47      	cmp	r3, #71	; 0x47
 8000880:	d905      	bls.n	800088e <ChooseModi+0x3a>
			 (indexAlphabet >=72 && indexAlphabet <=74)			) // no
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	2b4a      	cmp	r3, #74	; 0x4a
 8000886:	d802      	bhi.n	800088e <ChooseModi+0x3a>
			{
				indexModi = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	73fb      	strb	r3, [r7, #15]
 800088c:	e00d      	b.n	80008aa <ChooseModi+0x56>
			} else if (indexAlphabet==69 ||
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2b45      	cmp	r3, #69	; 0x45
 8000892:	d005      	beq.n	80008a0 <ChooseModi+0x4c>
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	2b4b      	cmp	r3, #75	; 0x4b
 8000898:	d905      	bls.n	80008a6 <ChooseModi+0x52>
				(indexAlphabet >=76 && indexAlphabet <=79)) // alt gr
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2b4f      	cmp	r3, #79	; 0x4f
 800089e:	d802      	bhi.n	80008a6 <ChooseModi+0x52>
			{
				indexModi = 2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	73fb      	strb	r3, [r7, #15]
 80008a4:	e001      	b.n	80008aa <ChooseModi+0x56>
			} else // shift
			{
				indexModi = 1;
 80008a6:	2301      	movs	r3, #1
 80008a8:	73fb      	strb	r3, [r7, #15]
			}

	return indexModi;
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <__NVIC_GetPriorityGrouping>:
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <__NVIC_GetPriorityGrouping+0x18>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	0a1b      	lsrs	r3, r3, #8
 80008c2:	f003 0307 	and.w	r3, r3, #7
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <__NVIC_EnableIRQ>:
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	db0b      	blt.n	80008fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	f003 021f 	and.w	r2, r3, #31
 80008ec:	4907      	ldr	r1, [pc, #28]	; (800090c <__NVIC_EnableIRQ+0x38>)
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	095b      	lsrs	r3, r3, #5
 80008f4:	2001      	movs	r0, #1
 80008f6:	fa00 f202 	lsl.w	r2, r0, r2
 80008fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000e100 	.word	0xe000e100

08000910 <__NVIC_ClearPendingIRQ>:
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800091a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091e:	2b00      	cmp	r3, #0
 8000920:	db0c      	blt.n	800093c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	f003 021f 	and.w	r2, r3, #31
 8000928:	4907      	ldr	r1, [pc, #28]	; (8000948 <__NVIC_ClearPendingIRQ+0x38>)
 800092a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092e:	095b      	lsrs	r3, r3, #5
 8000930:	2001      	movs	r0, #1
 8000932:	fa00 f202 	lsl.w	r2, r0, r2
 8000936:	3360      	adds	r3, #96	; 0x60
 8000938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	e000e100 	.word	0xe000e100

0800094c <__NVIC_SetPriority>:
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	6039      	str	r1, [r7, #0]
 8000956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095c:	2b00      	cmp	r3, #0
 800095e:	db0a      	blt.n	8000976 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	b2da      	uxtb	r2, r3
 8000964:	490c      	ldr	r1, [pc, #48]	; (8000998 <__NVIC_SetPriority+0x4c>)
 8000966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096a:	0092      	lsls	r2, r2, #2
 800096c:	b2d2      	uxtb	r2, r2
 800096e:	440b      	add	r3, r1
 8000970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000974:	e00a      	b.n	800098c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	b2da      	uxtb	r2, r3
 800097a:	4908      	ldr	r1, [pc, #32]	; (800099c <__NVIC_SetPriority+0x50>)
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	f003 030f 	and.w	r3, r3, #15
 8000982:	3b04      	subs	r3, #4
 8000984:	0092      	lsls	r2, r2, #2
 8000986:	b2d2      	uxtb	r2, r2
 8000988:	440b      	add	r3, r1
 800098a:	761a      	strb	r2, [r3, #24]
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	e000e100 	.word	0xe000e100
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <NVIC_EncodePriority>:
{
 80009a0:	b480      	push	{r7}
 80009a2:	b089      	sub	sp, #36	; 0x24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f003 0307 	and.w	r3, r3, #7
 80009b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	f1c3 0307 	rsb	r3, r3, #7
 80009ba:	2b06      	cmp	r3, #6
 80009bc:	bf28      	it	cs
 80009be:	2306      	movcs	r3, #6
 80009c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	3306      	adds	r3, #6
 80009c6:	2b06      	cmp	r3, #6
 80009c8:	d902      	bls.n	80009d0 <NVIC_EncodePriority+0x30>
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	3b01      	subs	r3, #1
 80009ce:	e000      	b.n	80009d2 <NVIC_EncodePriority+0x32>
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	43da      	mvns	r2, r3
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	401a      	ands	r2, r3
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	fa01 f303 	lsl.w	r3, r1, r3
 80009f2:	43d9      	mvns	r1, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f8:	4313      	orrs	r3, r2
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3724      	adds	r7, #36	; 0x24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
	...

08000a08 <USB0_0_IRQHandler>:
	.usbd_transfer_mode = XMC_USBD_USE_FIFO,
	.cb_xmc_device_event = USBD_SignalDeviceEventHandler,
	.cb_endpoint_event = USBD_SignalEndpointEvent_Handler
};

void USB0_0_IRQHandler(void) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	XMC_USBD_IRQHandler(&USB_runtime);
 8000a0c:	4802      	ldr	r0, [pc, #8]	; (8000a18 <USB0_0_IRQHandler+0x10>)
 8000a0e:	f004 faf1 	bl	8004ff4 <XMC_USBD_IRQHandler>
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000078 	.word	0x20000078

08000a1c <USB_Init>:

/*The function initializes the USB core layer and register call backs. */
void USB_Init(void) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	USBD_Initialize(&USB_runtime);
 8000a20:	480d      	ldr	r0, [pc, #52]	; (8000a58 <USB_Init+0x3c>)
 8000a22:	f003 fbe5 	bl	80041f0 <USBD_Initialize>

	/* Interrupts configuration*/
	NVIC_SetPriority( USB0_0_IRQn,
 8000a26:	f7ff ff47 	bl	80008b8 <__NVIC_GetPriorityGrouping>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	213f      	movs	r1, #63	; 0x3f
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ffb5 	bl	80009a0 <NVIC_EncodePriority>
 8000a36:	4603      	mov	r3, r0
 8000a38:	4619      	mov	r1, r3
 8000a3a:	206b      	movs	r0, #107	; 0x6b
 8000a3c:	f7ff ff86 	bl	800094c <__NVIC_SetPriority>
					  NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 63, 0) );
	NVIC_ClearPendingIRQ(USB0_0_IRQn);
 8000a40:	206b      	movs	r0, #107	; 0x6b
 8000a42:	f7ff ff65 	bl	8000910 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(USB0_0_IRQn);
 8000a46:	206b      	movs	r0, #107	; 0x6b
 8000a48:	f7ff ff44 	bl	80008d4 <__NVIC_EnableIRQ>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				device.Driver->DeviceConnect();
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <USB_Init+0x40>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	68db      	ldr	r3, [r3, #12]
 8000a52:	4798      	blx	r3

	/* USB Connection*/
	USB_Attach();
}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000078 	.word	0x20000078
 8000a5c:	20000c0c 	.word	0x20000c0c

08000a60 <EVENT_USB_Device_>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_(void) {
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <EVENT_USB_Device_Connect>:
/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void) {
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
	//Device is ready!
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <EVENT_USB_Device_Reset>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Reset(void) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	if(device.IsConfigured) {
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <EVENT_USB_Device_Reset+0x2c>)
 8000a82:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d008      	beq.n	8000aa2 <EVENT_USB_Device_Reset+0x26>
		USB_Init();
 8000a90:	f7ff ffc4 	bl	8000a1c <USB_Init>
		device.IsConfigured=0;
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <EVENT_USB_Device_Reset+0x2c>)
 8000a96:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8000a9a:	f36f 0300 	bfc	r3, #0, #1
 8000a9e:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
	}
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000c0c 	.word	0x20000c0c

08000aac <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
	bool ConfigSuccess = true;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	71fb      	strb	r3, [r7, #7]

	USBD_SetEndpointBuffer(KEYBOARD_IN_EPADDR, buffer, KEYBOARD_REPORT_SIZE);
 8000ab6:	2208      	movs	r2, #8
 8000ab8:	490d      	ldr	r1, [pc, #52]	; (8000af0 <EVENT_USB_Device_ConfigurationChanged+0x44>)
 8000aba:	2081      	movs	r0, #129	; 0x81
 8000abc:	f003 fc0e 	bl	80042dc <USBD_SetEndpointBuffer>

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
 8000ac0:	480c      	ldr	r0, [pc, #48]	; (8000af4 <EVENT_USB_Device_ConfigurationChanged+0x48>)
 8000ac2:	f001 ff73 	bl	80029ac <HID_Device_ConfigureEndpoints>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	461a      	mov	r2, r3
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	4013      	ands	r3, r2
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	bf14      	ite	ne
 8000ad2:	2301      	movne	r3, #1
 8000ad4:	2300      	moveq	r3, #0
 8000ad6:	71fb      	strb	r3, [r7, #7]

	device.IsConfigured = ConfigSuccess;
 8000ad8:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <EVENT_USB_Device_ConfigurationChanged+0x4c>)
 8000ada:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8000ade:	79f9      	ldrb	r1, [r7, #7]
 8000ae0:	f361 0300 	bfi	r3, r1, #0, #1
 8000ae4:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000984 	.word	0x20000984
 8000af4:	20000060 	.word	0x20000060
 8000af8:	20000c0c 	.word	0x20000c0c

08000afc <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
 8000b00:	4802      	ldr	r0, [pc, #8]	; (8000b0c <EVENT_USB_Device_ControlRequest+0x10>)
 8000b02:	f001 fd73 	bl	80025ec <HID_Device_ProcessControlRequest>
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000060 	.word	0x20000060

08000b10 <CALLBACK_HIDParser_FilterHIDReportItem>:

bool CALLBACK_HIDParser_FilterHIDReportItem(
									HID_ReportItem_t* const CurrentItem ) {
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	return true;
 8000b18:	2301      	movs	r3, #1
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
	...

08000b28 <CALLBACK_USB_GetDescriptor>:
  *  the control endpoint, this function is called so that the descriptor details
  *  can be passed back and the appropriate descriptor sent back to the USB host.
  **/
uint16_t CALLBACK_USB_GetDescriptor( const uint16_t wValue,
									 const uint8_t wIndex,
									 const void** const DescriptorAddress ) {
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	603a      	str	r2, [r7, #0]
 8000b32:	80fb      	strh	r3, [r7, #6]
 8000b34:	460b      	mov	r3, r1
 8000b36:	717b      	strb	r3, [r7, #5]
	const uint8_t  DescriptorType   = (wValue >> 8);
 8000b38:	88fb      	ldrh	r3, [r7, #6]
 8000b3a:	0a1b      	lsrs	r3, r3, #8
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	727b      	strb	r3, [r7, #9]
	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 8000b40:	88fb      	ldrh	r3, [r7, #6]
 8000b42:	723b      	strb	r3, [r7, #8]

	const void* Address = NULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
	uint16_t    Size    = NO_DESCRIPTOR;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	817b      	strh	r3, [r7, #10]

	switch (DescriptorType) {
 8000b4c:	7a7b      	ldrb	r3, [r7, #9]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	2b21      	cmp	r3, #33	; 0x21
 8000b52:	d873      	bhi.n	8000c3c <CALLBACK_USB_GetDescriptor+0x114>
 8000b54:	a201      	add	r2, pc, #4	; (adr r2, 8000b5c <CALLBACK_USB_GetDescriptor+0x34>)
 8000b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5a:	bf00      	nop
 8000b5c:	08000be5 	.word	0x08000be5
 8000b60:	08000bef 	.word	0x08000bef
 8000b64:	08000bf9 	.word	0x08000bf9
 8000b68:	08000c3d 	.word	0x08000c3d
 8000b6c:	08000c3d 	.word	0x08000c3d
 8000b70:	08000c3d 	.word	0x08000c3d
 8000b74:	08000c3d 	.word	0x08000c3d
 8000b78:	08000c3d 	.word	0x08000c3d
 8000b7c:	08000c3d 	.word	0x08000c3d
 8000b80:	08000c3d 	.word	0x08000c3d
 8000b84:	08000c3d 	.word	0x08000c3d
 8000b88:	08000c3d 	.word	0x08000c3d
 8000b8c:	08000c3d 	.word	0x08000c3d
 8000b90:	08000c3d 	.word	0x08000c3d
 8000b94:	08000c3d 	.word	0x08000c3d
 8000b98:	08000c3d 	.word	0x08000c3d
 8000b9c:	08000c3d 	.word	0x08000c3d
 8000ba0:	08000c3d 	.word	0x08000c3d
 8000ba4:	08000c3d 	.word	0x08000c3d
 8000ba8:	08000c3d 	.word	0x08000c3d
 8000bac:	08000c3d 	.word	0x08000c3d
 8000bb0:	08000c3d 	.word	0x08000c3d
 8000bb4:	08000c3d 	.word	0x08000c3d
 8000bb8:	08000c3d 	.word	0x08000c3d
 8000bbc:	08000c3d 	.word	0x08000c3d
 8000bc0:	08000c3d 	.word	0x08000c3d
 8000bc4:	08000c3d 	.word	0x08000c3d
 8000bc8:	08000c3d 	.word	0x08000c3d
 8000bcc:	08000c3d 	.word	0x08000c3d
 8000bd0:	08000c3d 	.word	0x08000c3d
 8000bd4:	08000c3d 	.word	0x08000c3d
 8000bd8:	08000c3d 	.word	0x08000c3d
 8000bdc:	08000c29 	.word	0x08000c29
 8000be0:	08000c33 	.word	0x08000c33
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <CALLBACK_USB_GetDescriptor+0x128>)
 8000be6:	60fb      	str	r3, [r7, #12]
			Size    = sizeof(USB_Descriptor_Device_t);
 8000be8:	2312      	movs	r3, #18
 8000bea:	817b      	strh	r3, [r7, #10]
			break;
 8000bec:	e026      	b.n	8000c3c <CALLBACK_USB_GetDescriptor+0x114>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 8000bee:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <CALLBACK_USB_GetDescriptor+0x12c>)
 8000bf0:	60fb      	str	r3, [r7, #12]
			Size    = sizeof(USB_Descriptor_Configuration_t);
 8000bf2:	2322      	movs	r3, #34	; 0x22
 8000bf4:	817b      	strh	r3, [r7, #10]
			break;
 8000bf6:	e021      	b.n	8000c3c <CALLBACK_USB_GetDescriptor+0x114>
		case DTYPE_String:
			switch (DescriptorNumber) {
 8000bf8:	7a3b      	ldrb	r3, [r7, #8]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d009      	beq.n	8000c12 <CALLBACK_USB_GetDescriptor+0xea>
 8000bfe:	2b02      	cmp	r3, #2
 8000c00:	d00c      	beq.n	8000c1c <CALLBACK_USB_GetDescriptor+0xf4>
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d000      	beq.n	8000c08 <CALLBACK_USB_GetDescriptor+0xe0>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = ProductString.Header.Size;
					break;
			}
			break;
 8000c06:	e019      	b.n	8000c3c <CALLBACK_USB_GetDescriptor+0x114>
					Address = &LanguageString;
 8000c08:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <CALLBACK_USB_GetDescriptor+0x130>)
 8000c0a:	60fb      	str	r3, [r7, #12]
					Size    = LanguageString.Header.Size;
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	817b      	strh	r3, [r7, #10]
					break;
 8000c10:	e009      	b.n	8000c26 <CALLBACK_USB_GetDescriptor+0xfe>
					Address = &ManufacturerString;
 8000c12:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <CALLBACK_USB_GetDescriptor+0x134>)
 8000c14:	60fb      	str	r3, [r7, #12]
					Size    = ManufacturerString.Header.Size;
 8000c16:	2350      	movs	r3, #80	; 0x50
 8000c18:	817b      	strh	r3, [r7, #10]
					break;
 8000c1a:	e004      	b.n	8000c26 <CALLBACK_USB_GetDescriptor+0xfe>
					Address = &ProductString;
 8000c1c:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <CALLBACK_USB_GetDescriptor+0x138>)
 8000c1e:	60fb      	str	r3, [r7, #12]
					Size    = ProductString.Header.Size;
 8000c20:	2348      	movs	r3, #72	; 0x48
 8000c22:	817b      	strh	r3, [r7, #10]
					break;
 8000c24:	bf00      	nop
			break;
 8000c26:	e009      	b.n	8000c3c <CALLBACK_USB_GetDescriptor+0x114>
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <CALLBACK_USB_GetDescriptor+0x13c>)
 8000c2a:	60fb      	str	r3, [r7, #12]
			Size    = sizeof(USB_HID_Descriptor_HID_t);
 8000c2c:	2309      	movs	r3, #9
 8000c2e:	817b      	strh	r3, [r7, #10]
			break;
 8000c30:	e004      	b.n	8000c3c <CALLBACK_USB_GetDescriptor+0x114>
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
 8000c32:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <CALLBACK_USB_GetDescriptor+0x140>)
 8000c34:	60fb      	str	r3, [r7, #12]
			Size    = sizeof(KeyboardReport);
 8000c36:	233f      	movs	r3, #63	; 0x3f
 8000c38:	817b      	strh	r3, [r7, #10]
			break;
 8000c3a:	bf00      	nop
	}

	*DescriptorAddress = Address;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	601a      	str	r2, [r3, #0]
	return Size;
 8000c42:	897b      	ldrh	r3, [r7, #10]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	08006ce8 	.word	0x08006ce8
 8000c54:	08006cfc 	.word	0x08006cfc
 8000c58:	08006d20 	.word	0x08006d20
 8000c5c:	08006d28 	.word	0x08006d28
 8000c60:	08006d7c 	.word	0x08006d7c
 8000c64:	08006d0e 	.word	0x08006d0e
 8000c68:	08006ca8 	.word	0x08006ca8

08000c6c <XMC_SCU_CLOCK_GetUsbClockSource>:
 * The clock source is read from from the \a USBSEL bits of \a USBCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_USBCLKSRC_t XMC_SCU_CLOCK_GetUsbClockSource(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_USBCLKSRC_t)(SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBSEL_Msk);
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <XMC_SCU_CLOCK_GetUsbClockSource+0x18>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	50004600 	.word	0x50004600

08000c88 <XMC_SCU_CLOCK_GetWdtClockSource>:
 * the clock source selected.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetWdtClockDivider(), XMC_SCU_CLOCK_SetWdtClockSource() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_WDTCLKSRC_t XMC_SCU_CLOCK_GetWdtClockSource(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_WDTCLKSRC_t)(SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTSEL_Msk);
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <XMC_SCU_CLOCK_GetWdtClockSource+0x18>)
 8000c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	50004600 	.word	0x50004600

08000ca4 <XMC_SCU_CLOCK_GetExternalOutputClockSource>:
 * The value is obtained by reading \a ECKSEL bits of \a EXTCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_EXTOUTCLKSRC_t XMC_SCU_CLOCK_GetExternalOutputClockSource(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_EXTOUTCLKSRC_t)(SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKSEL_Msk);
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <XMC_SCU_CLOCK_GetExternalOutputClockSource+0x1c>)
 8000caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	f003 0303 	and.w	r3, r3, #3
 8000cb2:	b2db      	uxtb	r3, r3
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	50004600 	.word	0x50004600

08000cc4 <XMC_SCU_CLOCK_GetSystemClockFrequency>:
 * fSYS = fCPU << CPUDIV.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x20>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x24>)
 8000cce:	691b      	ldr	r3, [r3, #16]
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	2000ffc0 	.word	0x2000ffc0
 8000ce8:	50004600 	.word	0x50004600

08000cec <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	2000ffc0 	.word	0x2000ffc0

08000d04 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <XMC_SCU_GetMirrorStatus+0x14>)
 8000d0a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	50004000 	.word	0x50004000

08000d1c <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000d24:	f005 fb82 	bl	800642c <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <XMC_SCU_lDelay+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0c      	ldr	r2, [pc, #48]	; (8000d60 <XMC_SCU_lDelay+0x44>)
 8000d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d32:	0c9a      	lsrs	r2, r3, #18
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	fb02 f303 	mul.w	r3, r2, r3
 8000d3a:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	e003      	b.n	8000d4a <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8000d42:	bf00      	nop
  for (i = 0U; i < delay; ++i)
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	3301      	adds	r3, #1
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d3f7      	bcc.n	8000d42 <XMC_SCU_lDelay+0x26>
  }
}
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2000ffc0 	.word	0x2000ffc0
 8000d60:	431bde83 	.word	0x431bde83

08000d64 <XMC_SCU_INTERRUPT_EnableEvent>:

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 8000d6e:	689a      	ldr	r2, [r3, #8]
 8000d70:	4904      	ldr	r1, [pc, #16]	; (8000d84 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	608b      	str	r3, [r1, #8]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	50004074 	.word	0x50004074

08000d88 <XMC_SCU_INTERRUPT_DisableEvent>:

/* API to disable the SCU event */
void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK &= (uint32_t)~event;
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <XMC_SCU_INTERRUPT_DisableEvent+0x24>)
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	43db      	mvns	r3, r3
 8000d98:	4904      	ldr	r1, [pc, #16]	; (8000dac <XMC_SCU_INTERRUPT_DisableEvent+0x24>)
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	608b      	str	r3, [r1, #8]
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	50004074 	.word	0x50004074

08000db0 <XMC_SCU_INTERRUPT_TriggerEvent>:

/* API to trigger the SCU event */
void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <XMC_SCU_INTERRUPT_TriggerEvent+0x20>)
 8000dba:	691a      	ldr	r2, [r3, #16]
 8000dbc:	4904      	ldr	r1, [pc, #16]	; (8000dd0 <XMC_SCU_INTERRUPT_TriggerEvent+0x20>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	610b      	str	r3, [r1, #16]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	50004074 	.word	0x50004074

08000dd4 <XMC_SCU_INTERUPT_GetEventStatus>:

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 8000dda:	685b      	ldr	r3, [r3, #4]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	50004074 	.word	0x50004074

08000dec <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000df4:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <XMC_SCU_INTERRUPT_ClearEventStatus+0x1c>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	60d3      	str	r3, [r2, #12]
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	50004074 	.word	0x50004074

08000e0c <XMC_SCU_GetBootMode>:


/* API to retrieve the currently deployed device bootmode */
uint32_t XMC_SCU_GetBootMode(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return (uint32_t)(SCU_GENERAL->STCON & SCU_GENERAL_STCON_SWCON_Msk);
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <XMC_SCU_GetBootMode+0x18>)
 8000e12:	691b      	ldr	r3, [r3, #16]
 8000e14:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	50004000 	.word	0x50004000

08000e28 <XMC_SCU_SetBootMode>:

/* API to program a new device bootmode */
void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t bootmode)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	80fb      	strh	r3, [r7, #6]
  SCU_GENERAL->STCON = (uint32_t)bootmode;
 8000e32:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <XMC_SCU_SetBootMode+0x1c>)
 8000e34:	88fb      	ldrh	r3, [r7, #6]
 8000e36:	6113      	str	r3, [r2, #16]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	50004000 	.word	0x50004000

08000e48 <XMC_SCU_ReadGPR>:

/* API to read from General purpose register */
uint32_t XMC_SCU_ReadGPR(const uint32_t index)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  return (SCU_GENERAL->GPR[index]);
 8000e50:	4a05      	ldr	r2, [pc, #20]	; (8000e68 <XMC_SCU_ReadGPR+0x20>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	330a      	adds	r3, #10
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	4413      	add	r3, r2
 8000e5a:	685b      	ldr	r3, [r3, #4]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	50004000 	.word	0x50004000

08000e6c <XMC_SCU_WriteGPR>:

/* API to write to GPR */
void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  SCU_GENERAL->GPR[index] = data;
 8000e76:	4a06      	ldr	r2, [pc, #24]	; (8000e90 <XMC_SCU_WriteGPR+0x24>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	330a      	adds	r3, #10
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	683a      	ldr	r2, [r7, #0]
 8000e82:	605a      	str	r2, [r3, #4]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	50004000 	.word	0x50004000

08000e94 <XMC_SCU_EnableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] |= (uint32_t)(1UL << channel);
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <XMC_SCU_EnableOutOfRangeComparator+0x34>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3328      	adds	r3, #40	; 0x28
 8000ea4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb0:	4905      	ldr	r1, [pc, #20]	; (8000ec8 <XMC_SCU_EnableOutOfRangeComparator+0x34>)
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3328      	adds	r3, #40	; 0x28
 8000eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	50004000 	.word	0x50004000

08000ecc <XMC_SCU_DisableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] &= (uint32_t)~(1UL << channel);
 8000ed6:	4a0b      	ldr	r2, [pc, #44]	; (8000f04 <XMC_SCU_DisableOutOfRangeComparator+0x38>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3328      	adds	r3, #40	; 0x28
 8000edc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	4906      	ldr	r1, [pc, #24]	; (8000f04 <XMC_SCU_DisableOutOfRangeComparator+0x38>)
 8000eec:	401a      	ands	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3328      	adds	r3, #40	; 0x28
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	50004000 	.word	0x50004000

08000f08 <XMC_SCU_CalibrateTemperatureSensor>:

/* API to calibrate temperature sensor */
void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	011a      	lsls	r2, r3, #4
                        (uint32_t)(gain << SCU_GENERAL_DTSCON_GAIN_Pos) |
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	02db      	lsls	r3, r3, #11
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <XMC_SCU_CalibrateTemperatureSensor+0x2c>)
                        (uint32_t)(0x4UL << SCU_GENERAL_DTSCON_REFTRIM_Pos) |
 8000f1e:	f443 0308 	orr.w	r3, r3, #8912896	; 0x880000
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8000f22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                        (uint32_t)(0x8UL << SCU_GENERAL_DTSCON_BGTRIM_Pos));
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	50004000 	.word	0x50004000

08000f38 <XMC_SCU_EnableTemperatureSensor>:
/* API to enable die temperature measurement by powering the DTS module. */
void XMC_SCU_EnableTemperatureSensor(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  SCU_GENERAL->DTSCON &= (uint32_t)~(SCU_GENERAL_DTSCON_PWD_Msk);
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <XMC_SCU_EnableTemperatureSensor+0x20>)
 8000f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <XMC_SCU_EnableTemperatureSensor+0x20>)
 8000f44:	f023 0301 	bic.w	r3, r3, #1
 8000f48:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	50004000 	.word	0x50004000

08000f5c <XMC_SCU_DisableTemperatureSensor>:

/* API to disable die temperature measurement by powering the DTS module off. */
void XMC_SCU_DisableTemperatureSensor(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_PWD_Msk;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <XMC_SCU_DisableTemperatureSensor+0x20>)
 8000f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f66:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <XMC_SCU_DisableTemperatureSensor+0x20>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	50004000 	.word	0x50004000

08000f80 <XMC_SCU_IsTemperatureSensorEnabled>:

/* API to provide the die temperature sensor power status. */
bool XMC_SCU_IsTemperatureSensorEnabled(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSCON & SCU_GENERAL_DTSCON_PWD_Msk) == 0U);
 8000f84:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <XMC_SCU_IsTemperatureSensorEnabled+0x24>)
 8000f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	bf0c      	ite	eq
 8000f92:	2301      	moveq	r3, #1
 8000f94:	2300      	movne	r3, #0
 8000f96:	b2db      	uxtb	r3, r3
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	50004000 	.word	0x50004000

08000fa8 <XMC_SCU_IsTemperatureSensorReady>:

/* API to check if the die temperature sensor is ready to start a measurement. */
bool XMC_SCU_IsTemperatureSensorReady(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RDY_Msk) != 0U);
 8000fac:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <XMC_SCU_IsTemperatureSensorReady+0x24>)
 8000fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	bf14      	ite	ne
 8000fba:	2301      	movne	r3, #1
 8000fbc:	2300      	moveq	r3, #0
 8000fbe:	b2db      	uxtb	r3, r3
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	50004000 	.word	0x50004000

08000fd0 <XMC_SCU_StartTemperatureMeasurement>:
/* API to start device temperature measurements */
XMC_SCU_STATUS_t XMC_SCU_StartTemperatureMeasurement(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
  XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	71fb      	strb	r3, [r7, #7]

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 8000fda:	f7ff ffd1 	bl	8000f80 <XMC_SCU_IsTemperatureSensorEnabled>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	f083 0301 	eor.w	r3, r3, #1
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <XMC_SCU_StartTemperatureMeasurement+0x1e>
  {
    status = XMC_SCU_STATUS_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	71fb      	strb	r3, [r7, #7]
  }
   
  if (XMC_SCU_IsTemperatureSensorBusy() == true)
 8000fee:	f000 f831 	bl	8001054 <XMC_SCU_IsTemperatureSensorBusy>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <XMC_SCU_StartTemperatureMeasurement+0x2c>
  {
    status = XMC_SCU_STATUS_BUSY;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	71fb      	strb	r3, [r7, #7]
  }

  /* And start the measurement */
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_START_Msk;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <XMC_SCU_StartTemperatureMeasurement+0x48>)
 8000ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001002:	4a05      	ldr	r2, [pc, #20]	; (8001018 <XMC_SCU_StartTemperatureMeasurement+0x48>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  
  return (status);
 800100c:	79fb      	ldrb	r3, [r7, #7]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	50004000 	.word	0x50004000

0800101c <XMC_SCU_GetTemperatureMeasurement>:

/* API to retrieve the temperature measured */
uint32_t XMC_SCU_GetTemperatureMeasurement(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
  uint32_t temperature;

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 8001022:	f7ff ffad 	bl	8000f80 <XMC_SCU_IsTemperatureSensorEnabled>
 8001026:	4603      	mov	r3, r0
 8001028:	f083 0301 	eor.w	r3, r3, #1
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <XMC_SCU_GetTemperatureMeasurement+0x1e>
  {
    temperature = 0x7FFFFFFFUL;
 8001032:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	e005      	b.n	8001046 <XMC_SCU_GetTemperatureMeasurement+0x2a>
  }
  else
  {
    temperature = (uint32_t)((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RESULT_Msk) >> SCU_GENERAL_DTSSTAT_RESULT_Pos);
 800103a:	4b05      	ldr	r3, [pc, #20]	; (8001050 <XMC_SCU_GetTemperatureMeasurement+0x34>)
 800103c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001040:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001044:	607b      	str	r3, [r7, #4]
  }
  
  return ((uint32_t)temperature);
 8001046:	687b      	ldr	r3, [r7, #4]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	50004000 	.word	0x50004000

08001054 <XMC_SCU_IsTemperatureSensorBusy>:

/* API to know whether Die temperature sensor is busy */
bool XMC_SCU_IsTemperatureSensorBusy(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_BUSY_Msk) != 0U);
 8001058:	4b07      	ldr	r3, [pc, #28]	; (8001078 <XMC_SCU_IsTemperatureSensorBusy+0x24>)
 800105a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800105e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001062:	2b00      	cmp	r3, #0
 8001064:	bf14      	ite	ne
 8001066:	2301      	movne	r3, #1
 8001068:	2300      	moveq	r3, #0
 800106a:	b2db      	uxtb	r3, r3
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	50004000 	.word	0x50004000

0800107c <XMC_SCU_WriteToRetentionMemory>:
}
#endif  

/* API to write into Retention memory in hibernate domain */
void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t rmacr;
  
  /* Get the address right */  
  rmacr = (uint32_t)((address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	041b      	lsls	r3, r3, #16
 800108a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800108e:	60fb      	str	r3, [r7, #12]
  
  /* Transfer from RMDATA to Retention memory */
  rmacr |= (uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
  
  /* Write desired data into RMDATA register */  
  SCU_GENERAL->RMDATA = data;
 8001098:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <XMC_SCU_WriteToRetentionMemory+0x48>)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
  
  /* Write address & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 80010a0:	4a08      	ldr	r2, [pc, #32]	; (80010c4 <XMC_SCU_WriteToRetentionMemory+0x48>)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 80010a8:	bf00      	nop
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <XMC_SCU_WriteToRetentionMemory+0x48>)
 80010ac:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80010b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1f8      	bne.n	80010aa <XMC_SCU_WriteToRetentionMemory+0x2e>
  {
  }
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	50004000 	.word	0x50004000

080010c8 <XMC_SCU_ReadFromRetentionMemory>:

/* API to read from Retention memory in hibernate domain */
uint32_t XMC_SCU_ReadFromRetentionMemory(uint32_t address)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t rmacr;

  /* Get the address right */  
  rmacr = ((uint32_t)(address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	041b      	lsls	r3, r3, #16
 80010d4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80010d8:	60fb      	str	r3, [r7, #12]
  
  /* Transfer from RMDATA to Retention memory */
  rmacr &= ~((uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk));
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f023 0301 	bic.w	r3, r3, #1
 80010e0:	60fb      	str	r3, [r7, #12]
  
  /* Writing an adress & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 80010e2:	4a0a      	ldr	r2, [pc, #40]	; (800110c <XMC_SCU_ReadFromRetentionMemory+0x44>)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 80010ea:	bf00      	nop
 80010ec:	4b07      	ldr	r3, [pc, #28]	; (800110c <XMC_SCU_ReadFromRetentionMemory+0x44>)
 80010ee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80010f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1f8      	bne.n	80010ec <XMC_SCU_ReadFromRetentionMemory+0x24>
  {
  }

  return (SCU_GENERAL->RMDATA);
 80010fa:	4b04      	ldr	r3, [pc, #16]	; (800110c <XMC_SCU_ReadFromRetentionMemory+0x44>)
 80010fc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
}
 8001100:	4618      	mov	r0, r3
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	50004000 	.word	0x50004000

08001110 <XMC_SCU_CLOCK_Init>:

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b085      	sub	sp, #20
 8001114:	af02      	add	r7, sp, #8
 8001116:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8001118:	2000      	movs	r0, #0
 800111a:	f000 faf1 	bl	8001700 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 800111e:	f000 fd7f 	bl	8001c20 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	79db      	ldrb	r3, [r3, #7]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00a      	beq.n	8001140 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800112a:	f000 ff77 	bl	800201c <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 800112e:	bf00      	nop
 8001130:	f000 ff62 	bl	8001ff8 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8001134:	4603      	mov	r3, r0
 8001136:	f083 0301 	eor.w	r3, r3, #1
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1f7      	bne.n	8001130 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	7a5b      	ldrb	r3, [r3, #9]
 8001144:	4618      	mov	r0, r3
 8001146:	f000 fb6f 	bl	8001828 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 800114a:	bf00      	nop
 800114c:	f7ff fdda 	bl	8000d04 <XMC_SCU_GetMirrorStatus>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1fa      	bne.n	800114c <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7a1b      	ldrb	r3, [r3, #8]
 800115a:	4618      	mov	r0, r3
 800115c:	f000 fd0c 	bl	8001b78 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	7c1b      	ldrb	r3, [r3, #16]
 8001164:	4618      	mov	r0, r3
 8001166:	f000 fb7f 	bl	8001868 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	7c5b      	ldrb	r3, [r3, #17]
 800116e:	4618      	mov	r0, r3
 8001170:	f000 fba6 	bl	80018c0 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	7c9b      	ldrb	r3, [r3, #18]
 8001178:	4618      	mov	r0, r3
 800117a:	f000 fb8b 	bl	8001894 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7cdb      	ldrb	r3, [r3, #19]
 8001182:	4618      	mov	r0, r3
 8001184:	f000 fbb2 	bl	80018ec <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	799b      	ldrb	r3, [r3, #6]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d00a      	beq.n	80011a6 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8001190:	f000 ffd8 	bl	8002144 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8001194:	bf00      	nop
 8001196:	f000 fffd 	bl	8002194 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 800119a:	4603      	mov	r3, r0
 800119c:	f083 0301 	eor.w	r3, r3, #1
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f7      	bne.n	8001196 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	78db      	ldrb	r3, [r3, #3]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d102      	bne.n	80011b4 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 80011ae:	f001 f855 	bl	800225c <XMC_SCU_CLOCK_DisableSystemPll>
 80011b2:	e011      	b.n	80011d8 <XMC_SCU_CLOCK_Init+0xc8>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 80011b4:	f001 f840 	bl	8002238 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	8898      	ldrh	r0, [r3, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	78d9      	ldrb	r1, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	785b      	ldrb	r3, [r3, #1]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80011c4:	461a      	mov	r2, r3
                                 (uint32_t)config->syspll_config.n_div,
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	781b      	ldrb	r3, [r3, #0]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80011ca:	461c      	mov	r4, r3
                                 (uint32_t)config->syspll_config.k_div);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	789b      	ldrb	r3, [r3, #2]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	4623      	mov	r3, r4
 80011d4:	f001 f854 	bl	8002280 <XMC_SCU_CLOCK_StartSystemPll>
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e0:	d103      	bne.n	80011ea <XMC_SCU_CLOCK_Init+0xda>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 80011e2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80011e6:	f000 fa8b 	bl	8001700 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 80011ea:	f005 f91f 	bl	800642c <SystemCoreClockUpdate>
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd90      	pop	{r4, r7, pc}
	...

080011f8 <XMC_SCU_TRAP_Enable>:

/* API to enable a trap source */
void XMC_SCU_TRAP_Enable(const uint32_t trap)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPDIS &= (uint32_t)~trap;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <XMC_SCU_TRAP_Enable+0x24>)
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	43db      	mvns	r3, r3
 8001208:	4904      	ldr	r1, [pc, #16]	; (800121c <XMC_SCU_TRAP_Enable+0x24>)
 800120a:	4013      	ands	r3, r2
 800120c:	608b      	str	r3, [r1, #8]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	50004160 	.word	0x50004160

08001220 <XMC_SCU_TRAP_Disable>:

/* API to disable a trap source */
void XMC_SCU_TRAP_Disable(const uint32_t trap)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPDIS |= (uint32_t)trap;
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <XMC_SCU_TRAP_Disable+0x20>)
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	4904      	ldr	r1, [pc, #16]	; (8001240 <XMC_SCU_TRAP_Disable+0x20>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4313      	orrs	r3, r2
 8001232:	608b      	str	r3, [r1, #8]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	50004160 	.word	0x50004160

08001244 <XMC_SCU_TRAP_GetStatus>:

/* API to determine if a trap source has generated event */
uint32_t XMC_SCU_TRAP_GetStatus(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return (SCU_TRAP->TRAPRAW);
 8001248:	4b03      	ldr	r3, [pc, #12]	; (8001258 <XMC_SCU_TRAP_GetStatus+0x14>)
 800124a:	685b      	ldr	r3, [r3, #4]
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	50004160 	.word	0x50004160

0800125c <XMC_SCU_TRAP_Trigger>:

/* API to manually trigger a trap event */
void XMC_SCU_TRAP_Trigger(const uint32_t trap)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPSET = (uint32_t)trap;
 8001264:	4a04      	ldr	r2, [pc, #16]	; (8001278 <XMC_SCU_TRAP_Trigger+0x1c>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6113      	str	r3, [r2, #16]
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	50004160 	.word	0x50004160

0800127c <XMC_SCU_TRAP_ClearStatus>:

/* API to clear a trap event */
void XMC_SCU_TRAP_ClearStatus(const uint32_t trap)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPCLR = (uint32_t)trap;
 8001284:	4a04      	ldr	r2, [pc, #16]	; (8001298 <XMC_SCU_TRAP_ClearStatus+0x1c>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	60d3      	str	r3, [r2, #12]
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	50004160 	.word	0x50004160

0800129c <XMC_SCU_PARITY_ClearStatus>:

/* API to clear parity error event */
void XMC_SCU_PARITY_ClearStatus(const uint32_t memory)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEFLAG |= (uint32_t)memory; 
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <XMC_SCU_PARITY_ClearStatus+0x20>)
 80012a6:	695a      	ldr	r2, [r3, #20]
 80012a8:	4904      	ldr	r1, [pc, #16]	; (80012bc <XMC_SCU_PARITY_ClearStatus+0x20>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	614b      	str	r3, [r1, #20]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	5000413c 	.word	0x5000413c

080012c0 <XMC_SCU_PARITY_GetStatus>:

/* API to determine if the specified parity error has occured or not */
uint32_t XMC_SCU_PARITY_GetStatus(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return (SCU_PARITY->PEFLAG);
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <XMC_SCU_PARITY_GetStatus+0x14>)
 80012c6:	695b      	ldr	r3, [r3, #20]
} 
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	5000413c 	.word	0x5000413c

080012d8 <XMC_SCU_PARITY_Enable>:

/* API to enable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Enable(const uint32_t memory)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEEN |= (uint32_t)memory; 
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <XMC_SCU_PARITY_Enable+0x20>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4904      	ldr	r1, [pc, #16]	; (80012f8 <XMC_SCU_PARITY_Enable+0x20>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	600b      	str	r3, [r1, #0]
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	5000413c 	.word	0x5000413c

080012fc <XMC_SCU_PARITY_Disable>:

/* API to disable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Disable(const uint32_t memory)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEEN &= (uint32_t)~memory; 
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <XMC_SCU_PARITY_Disable+0x24>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	43db      	mvns	r3, r3
 800130c:	4904      	ldr	r1, [pc, #16]	; (8001320 <XMC_SCU_PARITY_Disable+0x24>)
 800130e:	4013      	ands	r3, r2
 8001310:	600b      	str	r3, [r1, #0]
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	5000413c 	.word	0x5000413c

08001324 <XMC_SCU_PARITY_EnableTrapGeneration>:

/* API to enable trap assertion for the parity error source */
void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PETE |= (uint32_t)memory; 
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <XMC_SCU_PARITY_EnableTrapGeneration+0x20>)
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	4904      	ldr	r1, [pc, #16]	; (8001344 <XMC_SCU_PARITY_EnableTrapGeneration+0x20>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4313      	orrs	r3, r2
 8001336:	608b      	str	r3, [r1, #8]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	5000413c 	.word	0x5000413c

08001348 <XMC_SCU_PARITY_DisableTrapGeneration>:

/* API to disable the assertion of trap for the parity error source */
void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PETE &= (uint32_t)~memory; 
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <XMC_SCU_PARITY_DisableTrapGeneration+0x24>)
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	43db      	mvns	r3, r3
 8001358:	4904      	ldr	r1, [pc, #16]	; (800136c <XMC_SCU_PARITY_DisableTrapGeneration+0x24>)
 800135a:	4013      	ands	r3, r2
 800135c:	608b      	str	r3, [r1, #8]
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	5000413c 	.word	0x5000413c

08001370 <XMC_SCU_INTERRUPT_EnableNmiRequest>:

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 800137a:	695a      	ldr	r2, [r3, #20]
 800137c:	4904      	ldr	r1, [pc, #16]	; (8001390 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4313      	orrs	r3, r2
 8001382:	614b      	str	r3, [r1, #20]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	50004074 	.word	0x50004074

08001394 <XMC_SCU_INTERRUPT_DisableNmiRequest>:

/* Disables a NMI source */
void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN &= (uint32_t)~request;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <XMC_SCU_INTERRUPT_DisableNmiRequest+0x24>)
 800139e:	695a      	ldr	r2, [r3, #20]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	4904      	ldr	r1, [pc, #16]	; (80013b8 <XMC_SCU_INTERRUPT_DisableNmiRequest+0x24>)
 80013a6:	4013      	ands	r3, r2
 80013a8:	614b      	str	r3, [r1, #20]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	50004074 	.word	0x50004074

080013bc <XMC_SCU_RESET_AssertPeripheralReset>:

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	0f1b      	lsrs	r3, r3, #28
 80013c8:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80013d0:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	4613      	mov	r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4413      	add	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	461a      	mov	r2, r3
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <XMC_SCU_RESET_AssertPeripheralReset+0x38>)
 80013e0:	4413      	add	r3, r2
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	601a      	str	r2, [r3, #0]
}
 80013e6:	bf00      	nop
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	50004410 	.word	0x50004410

080013f8 <XMC_SCU_RESET_DeassertPeripheralReset>:

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	0f1b      	lsrs	r3, r3, #28
 8001404:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800140c:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	4613      	mov	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4413      	add	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	461a      	mov	r2, r3
 800141a:	4b05      	ldr	r3, [pc, #20]	; (8001430 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 800141c:	4413      	add	r3, r2
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	601a      	str	r2, [r3, #0]
}
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	50004414 	.word	0x50004414

08001434 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	0f1b      	lsrs	r3, r3, #28
 8001440:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001448:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	4613      	mov	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	461a      	mov	r2, r3
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 8001458:	4413      	add	r3, r2
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	4013      	ands	r3, r2
 8001460:	2b00      	cmp	r3, #0
 8001462:	bf14      	ite	ne
 8001464:	2301      	movne	r3, #1
 8001466:	2300      	moveq	r3, #0
 8001468:	b2db      	uxtb	r3, r3
}
 800146a:	4618      	mov	r0, r3
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	5000440c 	.word	0x5000440c

0800147c <XMC_SCU_CLOCK_GetSystemPllClockFrequency>:

/*
 * API to retrieve frequency of System PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockFrequency(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;
  uint32_t p_div;
  uint32_t n_div;
  uint32_t k2_div;

  clock_frequency = XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency();
 8001482:	f000 f839 	bl	80014f8 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>
 8001486:	60f8      	str	r0, [r7, #12]
  if(SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk)
 8001488:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b00      	cmp	r3, #0
 8001492:	d009      	beq.n	80014a8 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x2c>
  {
    /* Prescalar mode - fOSC is the parent*/
    clock_frequency = (uint32_t)(clock_frequency / 
                      ((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1UL));
 8001494:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800149c:	3301      	adds	r3, #1
    clock_frequency = (uint32_t)(clock_frequency / 
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	e01f      	b.n	80014e8 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x6c>
  }
  else
  {
    p_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1UL);
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	0e1b      	lsrs	r3, r3, #24
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	3301      	adds	r3, #1
 80014b4:	60bb      	str	r3, [r7, #8]
    n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1UL);
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	0a1b      	lsrs	r3, r3, #8
 80014bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014c0:	3301      	adds	r3, #1
 80014c2:	607b      	str	r3, [r7, #4]
    k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1UL);
 80014c4:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	0c1b      	lsrs	r3, r3, #16
 80014ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014ce:	3301      	adds	r3, #1
 80014d0:	603b      	str	r3, [r7, #0]
       
    clock_frequency = (clock_frequency * n_div) / (p_div * k2_div);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	fb02 f203 	mul.w	r2, r2, r3
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	6839      	ldr	r1, [r7, #0]
 80014de:	fb01 f303 	mul.w	r3, r1, r3
 80014e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e6:	60fb      	str	r3, [r7, #12]
  }

  return (clock_frequency);
 80014e8:	68fb      	ldr	r3, [r7, #12]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	50004710 	.word	0x50004710

080014f8 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>:

/**
 * API to retrieve frequency of System PLL VCO input clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;

  /* Prescalar mode - fOSC is the parent*/
  if((SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk) == (uint32_t)XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 80014fe:	4b08      	ldr	r3, [pc, #32]	; (8001520 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x28>)
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	d103      	bne.n	8001512 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1a>
  {
    clock_frequency = OSCHP_GetFrequency();
 800150a:	f004 fff9 	bl	8006500 <OSCHP_GetFrequency>
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	e001      	b.n	8001516 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1e>
  }
  else
  {
    clock_frequency = OFI_FREQUENCY;
 8001512:	4b04      	ldr	r3, [pc, #16]	; (8001524 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x2c>)
 8001514:	607b      	str	r3, [r7, #4]
  }
  
  return (clock_frequency);
 8001516:	687b      	ldr	r3, [r7, #4]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	50004710 	.word	0x50004710
 8001524:	016e3600 	.word	0x016e3600

08001528 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>:

/*
 * API to retrieve frequency of USB PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;
  uint32_t n_div;
  uint32_t p_div;
  
  clock_frequency = OSCHP_GetFrequency();
 800152e:	f004 ffe7 	bl	8006500 <OSCHP_GetFrequency>
 8001532:	60f8      	str	r0, [r7, #12]
  if((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 8001534:	4b10      	ldr	r3, [pc, #64]	; (8001578 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b00      	cmp	r3, #0
 800153e:	d116      	bne.n	800156e <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x46>
  {
    /* Normal mode - fVCO is the parent*/
    n_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_NDIV_Msk) >> SCU_PLL_USBPLLCON_NDIV_Pos) + 1UL);
 8001540:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800154a:	3301      	adds	r3, #1
 800154c:	60bb      	str	r3, [r7, #8]
    p_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_PDIV_Msk) >> SCU_PLL_USBPLLCON_PDIV_Pos) + 1UL);
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	0e1b      	lsrs	r3, r3, #24
 8001554:	f003 030f 	and.w	r3, r3, #15
 8001558:	3301      	adds	r3, #1
 800155a:	607b      	str	r3, [r7, #4]
    clock_frequency = (uint32_t)((clock_frequency * n_div)/ (uint32_t)(p_div * 2UL));
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	fb02 f203 	mul.w	r2, r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	fbb2 f3f3 	udiv	r3, r2, r3
 800156c:	60fb      	str	r3, [r7, #12]
  }
  return (clock_frequency);
 800156e:	68fb      	ldr	r3, [r7, #12]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	50004710 	.word	0x50004710

0800157c <XMC_SCU_CLOCK_GetCcuClockFrequency>:

/*
 * API to retrieve frequency of CCU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetCcuClockFrequency(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
  frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 8001586:	f7ff fb9d 	bl	8000cc4 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 800158a:	6078      	str	r0, [r7, #4]
  
  return (uint32_t)(frequency >> ((uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >>
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <XMC_SCU_CLOCK_GetCcuClockFrequency+0x28>)
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	fa22 f303 	lsr.w	r3, r2, r3
                                              SCU_CLK_CCUCLKCR_CCUDIV_Pos)));
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	50004600 	.word	0x50004600

080015a8 <XMC_SCU_CLOCK_GetUsbClockFrequency>:

/*
 * API to retrieve USB and SDMMC clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetUsbClockFrequency(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_USBCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetUsbClockSource();
 80015b2:	f7ff fb5b 	bl	8000c6c <XMC_SCU_CLOCK_GetUsbClockSource>
 80015b6:	6038      	str	r0, [r7, #0]

  if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_SYSPLL)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015be:	d103      	bne.n	80015c8 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x20>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 80015c0:	f7ff ff5c 	bl	800147c <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	e005      	b.n	80015d4 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x2c>
  }
  else if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_USBPLL)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d102      	bne.n	80015d4 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x2c>
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 80015ce:	f7ff ffab 	bl	8001528 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 80015d2:	6078      	str	r0, [r7, #4]
  }
  else
  {
  }

  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <XMC_SCU_CLOCK_GetUsbClockFrequency+0x44>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f003 0307 	and.w	r3, r3, #7
                                   SCU_CLK_USBCLKCR_USBDIV_Pos) + 1UL));
 80015dc:	3301      	adds	r3, #1
  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	50004600 	.word	0x50004600

080015f0 <XMC_SCU_CLOCK_GetEbuClockFrequency>:
#if defined(EBU)
/*
 * API to retrieve EBU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetEbuClockFrequency(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
  uint32_t frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 80015f6:	f7ff ff41 	bl	800147c <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 80015fa:	6078      	str	r0, [r7, #4]
  
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <XMC_SCU_CLOCK_GetEbuClockFrequency+0x24>)
 80015fe:	69db      	ldr	r3, [r3, #28]
 8001600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                                   SCU_CLK_EBUCLKCR_EBUDIV_Pos) + 1UL)));
 8001604:	3301      	adds	r3, #1
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	50004600 	.word	0x50004600

08001618 <XMC_SCU_CLOCK_GetWdtClockFrequency>:

/*
 * API to retrieve WDT clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetWdtClockFrequency(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_WDTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetWdtClockSource();
 8001622:	f7ff fb31 	bl	8000c88 <XMC_SCU_CLOCK_GetWdtClockSource>
 8001626:	6038      	str	r0, [r7, #0]

  if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_PLL)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800162e:	d103      	bne.n	8001638 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x20>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8001630:	f7ff ff24 	bl	800147c <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	e00c      	b.n	8001652 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_OFI)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d102      	bne.n	8001644 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x2c>
  {
    frequency = OFI_FREQUENCY;
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x50>)
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	e006      	b.n	8001652 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_STDBY)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800164a:	d102      	bne.n	8001652 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  {
    frequency = OSI_FREQUENCY;
 800164c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001650:	607b      	str	r3, [r7, #4]
  else
  {

  }

  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <XMC_SCU_CLOCK_GetWdtClockFrequency+0x54>)
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	b2db      	uxtb	r3, r3
                                    SCU_CLK_WDTCLKCR_WDTDIV_Pos) + 1UL)));
 8001658:	3301      	adds	r3, #1
  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	016e3600 	.word	0x016e3600
 800166c:	50004600 	.word	0x50004600

08001670 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency>:
/**
 * @brief API to retrieve EXTERNAL-OUT clock frequency
 * @retval Clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetExternalOutputClockFrequency(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8001676:	2300      	movs	r3, #0
 8001678:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_EXTOUTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetExternalOutputClockSource();
 800167a:	f7ff fb13 	bl	8000ca4 <XMC_SCU_CLOCK_GetExternalOutputClockSource>
 800167e:	4603      	mov	r3, r0
 8001680:	70fb      	strb	r3, [r7, #3]

  if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL)
 8001682:	78fb      	ldrb	r3, [r7, #3]
 8001684:	2b03      	cmp	r3, #3
 8001686:	d10d      	bne.n	80016a4 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x34>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8001688:	f7ff fef8 	bl	800147c <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 800168c:	6078      	str	r0, [r7, #4]
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 800168e:	4b13      	ldr	r3, [pc, #76]	; (80016dc <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x6c>)
 8001690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001692:	0c1b      	lsrs	r3, r3, #16
 8001694:	f3c3 0308 	ubfx	r3, r3, #0, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 8001698:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	e016      	b.n	80016d2 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS)
 80016a4:	78fb      	ldrb	r3, [r7, #3]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d103      	bne.n	80016b2 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x42>
  {
    frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 80016aa:	f7ff fb0b 	bl	8000cc4 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	e00f      	b.n	80016d2 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_USB)
 80016b2:	78fb      	ldrb	r3, [r7, #3]
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d10c      	bne.n	80016d2 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 80016b8:	f7ff ff36 	bl	8001528 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 80016bc:	6078      	str	r0, [r7, #4]
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 80016be:	4b07      	ldr	r3, [pc, #28]	; (80016dc <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x6c>)
 80016c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c2:	0c1b      	lsrs	r3, r3, #16
 80016c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 80016c8:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d0:	607b      	str	r3, [r7, #4]
  else
  {

  }

  return (frequency);
 80016d2:	687b      	ldr	r3, [r7, #4]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	50004600 	.word	0x50004600

080016e0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80016e4:	f7ff fb02 	bl	8000cec <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80016e8:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80016ea:	4b04      	ldr	r3, [pc, #16]	; (80016fc <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	f003 0301 	and.w	r3, r3, #1
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80016f2:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	50004600 	.word	0x50004600

08001700 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001710:	4904      	ldr	r1, [pc, #16]	; (8001724 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4313      	orrs	r3, r2
 8001716:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	50004600 	.word	0x50004600

08001728 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001738:	4904      	ldr	r1, [pc, #16]	; (800174c <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4313      	orrs	r3, r2
 800173e:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	50004600 	.word	0x50004600

08001750 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001760:	4904      	ldr	r1, [pc, #16]	; (8001774 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4313      	orrs	r3, r2
 8001766:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	50004600 	.word	0x50004600

08001778 <XMC_SCU_CLOCK_SetExternalOutputClockSource>:

/* API to select fEXT */
void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t source)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 8001782:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x28>)
 8001784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001786:	f023 0203 	bic.w	r2, r3, #3
                      ((uint32_t)source);
 800178a:	79fb      	ldrb	r3, [r7, #7]
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 800178c:	4904      	ldr	r1, [pc, #16]	; (80017a0 <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x28>)
 800178e:	4313      	orrs	r3, r2
 8001790:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	50004600 	.word	0x50004600

080017a4 <XMC_SCU_CLOCK_SetSystemPllClockSource>:

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d108      	bne.n	80017c6 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 80017ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017be:	f023 0301 	bic.w	r3, r3, #1
 80017c2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
  }
}
 80017c4:	e007      	b.n	80017d6 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	4a06      	ldr	r2, [pc, #24]	; (80017e4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 80017cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	60d3      	str	r3, [r2, #12]
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	50004710 	.word	0x50004710

080017e8 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80017f2:	bf00      	nop
 80017f4:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80017f6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f8      	bne.n	80017f4 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <XMC_SCU_HIB_SetRtcClockSource+0x3c>)
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 800180a:	79fb      	ldrb	r3, [r7, #7]
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800180c:	4905      	ldr	r1, [pc, #20]	; (8001824 <XMC_SCU_HIB_SetRtcClockSource+0x3c>)
 800180e:	4313      	orrs	r3, r2
 8001810:	60cb      	str	r3, [r1, #12]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	50004000 	.word	0x50004000
 8001824:	50004300 	.word	0x50004300

08001828 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001832:	bf00      	nop
 8001834:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8001836:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f8      	bne.n	8001834 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8001842:	4b08      	ldr	r3, [pc, #32]	; (8001864 <XMC_SCU_HIB_SetStandbyClockSource+0x3c>)
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 800184a:	79fb      	ldrb	r3, [r7, #7]
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 800184c:	4905      	ldr	r1, [pc, #20]	; (8001864 <XMC_SCU_HIB_SetStandbyClockSource+0x3c>)
 800184e:	4313      	orrs	r3, r2
 8001850:	60cb      	str	r3, [r1, #12]
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	50004000 	.word	0x50004000
 8001864:	50004300 	.word	0x50004300

08001868 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8001870:	4b07      	ldr	r3, [pc, #28]	; (8001890 <XMC_SCU_CLOCK_SetSystemClockDivider+0x28>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3b01      	subs	r3, #1
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800187c:	4904      	ldr	r1, [pc, #16]	; (8001890 <XMC_SCU_CLOCK_SetSystemClockDivider+0x28>)
 800187e:	4313      	orrs	r3, r2
 8001880:	60cb      	str	r3, [r1, #12]
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	50004600 	.word	0x50004600

08001894 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800189c:	4b07      	ldr	r3, [pc, #28]	; (80018bc <XMC_SCU_CLOCK_SetCcuClockDivider+0x28>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3b01      	subs	r3, #1
  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80018a8:	4904      	ldr	r1, [pc, #16]	; (80018bc <XMC_SCU_CLOCK_SetCcuClockDivider+0x28>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	620b      	str	r3, [r1, #32]
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	50004600 	.word	0x50004600

080018c0 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80018c8:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <XMC_SCU_CLOCK_SetCpuClockDivider+0x28>)
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80018d4:	4904      	ldr	r1, [pc, #16]	; (80018e8 <XMC_SCU_CLOCK_SetCpuClockDivider+0x28>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	610b      	str	r3, [r1, #16]
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	50004600 	.word	0x50004600

080018ec <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80018f4:	4b07      	ldr	r3, [pc, #28]	; (8001914 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x28>)
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3b01      	subs	r3, #1
  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8001900:	4904      	ldr	r1, [pc, #16]	; (8001914 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x28>)
 8001902:	4313      	orrs	r3, r2
 8001904:	614b      	str	r3, [r1, #20]
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	50004600 	.word	0x50004600

08001918 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8001920:	4b07      	ldr	r3, [pc, #28]	; (8001940 <XMC_SCU_CLOCK_SetUsbClockDivider+0x28>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 800192c:	4904      	ldr	r1, [pc, #16]	; (8001940 <XMC_SCU_CLOCK_SetUsbClockDivider+0x28>)
 800192e:	4313      	orrs	r3, r2
 8001930:	618b      	str	r3, [r1, #24]
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	50004600 	.word	0x50004600

08001944 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800194c:	4b07      	ldr	r3, [pc, #28]	; (800196c <XMC_SCU_CLOCK_SetEbuClockDivider+0x28>)
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3b01      	subs	r3, #1
  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8001958:	4904      	ldr	r1, [pc, #16]	; (800196c <XMC_SCU_CLOCK_SetEbuClockDivider+0x28>)
 800195a:	4313      	orrs	r3, r2
 800195c:	61cb      	str	r3, [r1, #28]
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	50004600 	.word	0x50004600

08001970 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8001978:	4b07      	ldr	r3, [pc, #28]	; (8001998 <XMC_SCU_CLOCK_SetWdtClockDivider+0x28>)
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8001984:	4904      	ldr	r1, [pc, #16]	; (8001998 <XMC_SCU_CLOCK_SetWdtClockDivider+0x28>)
 8001986:	4313      	orrs	r3, r2
 8001988:	624b      	str	r3, [r1, #36]	; 0x24
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	50004600 	.word	0x50004600

0800199c <XMC_SCU_CLOCK_SetExternalOutputClockDivider>:

/* API to program the divider placed between fext and its parent */
void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t divider)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetExternalOutputClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EXTCLKCR_ECKDIV_Msk + 1UL) ) );

  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x2c>)
 80019a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a8:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80019ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	3a01      	subs	r2, #1
 80019b4:	0412      	lsls	r2, r2, #16
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 80019b6:	4904      	ldr	r1, [pc, #16]	; (80019c8 <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x2c>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	628b      	str	r3, [r1, #40]	; 0x28
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	50004600 	.word	0x50004600

080019cc <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 80019d6:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	6053      	str	r3, [r2, #4]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	50004600 	.word	0x50004600

080019ec <XMC_SCU_CLOCK_DisableClock>:

/* API to disable a given module clock */
void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKCLR = ((uint32_t)clock);
 80019f6:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <XMC_SCU_CLOCK_DisableClock+0x1c>)
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	6093      	str	r3, [r2, #8]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	50004600 	.word	0x50004600

08001a0c <XMC_SCU_CLOCK_IsClockEnabled>:

/* API to determine if module clock of the given peripheral is enabled */
bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	71fb      	strb	r3, [r7, #7]
  return (bool)(SCU_CLK->CLKSTAT & ((uint32_t)clock));
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <XMC_SCU_CLOCK_IsClockEnabled+0x28>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	bf14      	ite	ne
 8001a22:	2301      	movne	r3, #1
 8001a24:	2300      	moveq	r3, #0
 8001a26:	b2db      	uxtb	r3, r3
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	50004600 	.word	0x50004600

08001a38 <XMC_SCU_POWER_GetEVR13Voltage>:
  return ((*(uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
}
#endif

float XMC_SCU_POWER_GetEVR13Voltage(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return (SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC13V_Msk) * XMC_SCU_POWER_LSB13V;
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <XMC_SCU_POWER_GetEVR13Voltage+0x28>)
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	ee07 3a90 	vmov	s15, r3
 8001a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a4a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001a64 <XMC_SCU_POWER_GetEVR13Voltage+0x2c>
 8001a4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a52:	ee17 3a90 	vmov	r3, s15
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	50004200 	.word	0x50004200
 8001a64:	3bbe0ded 	.word	0x3bbe0ded

08001a68 <XMC_SCU_POWER_GetEVR33Voltage>:

float XMC_SCU_POWER_GetEVR33Voltage(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <XMC_SCU_POWER_GetEVR33Voltage+0x2c>)
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	0a1b      	lsrs	r3, r3, #8
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	ee07 3a90 	vmov	s15, r3
 8001a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a7c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001a98 <XMC_SCU_POWER_GetEVR33Voltage+0x30>
 8001a80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a84:	ee17 3a90 	vmov	r3, s15
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	50004200 	.word	0x50004200
 8001a98:	3cb851ec 	.word	0x3cb851ec

08001a9c <XMC_SCU_CLOCK_EnableUsbPll>:

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <XMC_SCU_CLOCK_EnableUsbPll+0x20>)
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	4a05      	ldr	r2, [pc, #20]	; (8001abc <XMC_SCU_CLOCK_EnableUsbPll+0x20>)
 8001aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aaa:	f023 0302 	bic.w	r3, r3, #2
 8001aae:	6153      	str	r3, [r2, #20]
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	50004710 	.word	0x50004710

08001ac0 <XMC_SCU_CLOCK_DisableUsbPll>:

/* API to disable USB PLL for USB clock */
void XMC_SCU_CLOCK_DisableUsbPll(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <XMC_SCU_CLOCK_DisableUsbPll+0x20>)
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	4a05      	ldr	r2, [pc, #20]	; (8001ae0 <XMC_SCU_CLOCK_DisableUsbPll+0x20>)
 8001aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ace:	f043 0302 	orr.w	r3, r3, #2
 8001ad2:	6153      	str	r3, [r2, #20]
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	50004710 	.word	0x50004710

08001ae4 <XMC_SCU_CLOCK_StartUsbPll>:

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8001aee:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	4a19      	ldr	r2, [pc, #100]	; (8001b58 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	4a16      	ldr	r2, [pc, #88]	; (8001b58 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001b00:	f043 0310 	orr.w	r3, r3, #16
 8001b04:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	061b      	lsls	r3, r3, #24
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8001b12:	4911      	ldr	r1, [pc, #68]	; (8001b58 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	614b      	str	r3, [r1, #20]

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	4a0e      	ldr	r2, [pc, #56]	; (8001b58 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b22:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	4a0b      	ldr	r2, [pc, #44]	; (8001b58 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001b2a:	f023 0310 	bic.w	r3, r3, #16
 8001b2e:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8001b30:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	4a08      	ldr	r2, [pc, #32]	; (8001b58 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001b36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b3a:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8001b3c:	bf00      	nop
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f9      	beq.n	8001b3e <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	50004710 	.word	0x50004710

08001b5c <XMC_SCU_CLOCK_StopUsbPll>:

/* API to disable USB PLL operation */
void XMC_SCU_CLOCK_StopUsbPll(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON = (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk |
 8001b60:	4b03      	ldr	r3, [pc, #12]	; (8001b70 <XMC_SCU_CLOCK_StopUsbPll+0x14>)
 8001b62:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <XMC_SCU_CLOCK_StopUsbPll+0x18>)
 8001b64:	615a      	str	r2, [r3, #20]
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	50004710 	.word	0x50004710
 8001b74:	00010003 	.word	0x00010003

08001b78 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8001b82:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	4a0e      	ldr	r2, [pc, #56]	; (8001bc0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001b88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b8c:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d10e      	bne.n	8001bb2 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8001b94:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	4a09      	ldr	r2, [pc, #36]	; (8001bc0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001b9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001b9e:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8001ba0:	2064      	movs	r0, #100	; 0x64
 8001ba2:	f7ff f8bb 	bl	8000d1c <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	4a05      	ldr	r2, [pc, #20]	; (8001bc0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001bac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bb0:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8001bb2:	2064      	movs	r0, #100	; 0x64
 8001bb4:	f7ff f8b2 	bl	8000d1c <XMC_SCU_lDelay>
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	50004710 	.word	0x50004710

08001bc4 <XMC_SCU_POWER_EnableUsb>:



/* API to enable USB Phy and comparator */
void XMC_SCU_POWER_EnableUsb(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <XMC_SCU_POWER_EnableUsb+0x18>)
 8001bca:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001bce:	605a      	str	r2, [r3, #4]
#else
  SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_USBPHYPDQ_Msk;
#endif
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	50004200 	.word	0x50004200

08001be0 <XMC_SCU_POWER_DisableUsb>:

/* API to power down USB Phy and comparator */
void XMC_SCU_POWER_DisableUsb(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8001be4:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <XMC_SCU_POWER_DisableUsb+0x18>)
 8001be6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001bea:	609a      	str	r2, [r3, #8]
#else
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_USBPHYPDQ_Msk;
#endif    
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	50004200 	.word	0x50004200

08001bfc <XMC_SCU_CLOCK_IsUsbPllLocked>:

/* API to check USB PLL is locked or not */
bool XMC_SCU_CLOCK_IsUsbPllLocked(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <XMC_SCU_CLOCK_IsUsbPllLocked+0x20>)
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bf14      	ite	ne
 8001c0c:	2301      	movne	r3, #1
 8001c0e:	2300      	moveq	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	50004710 	.word	0x50004710

08001c20 <XMC_SCU_HIB_EnableHibernateDomain>:

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d109      	bne.n	8001c44 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8001c30:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8001c36:	bf00      	nop
 8001c38:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f9      	beq.n	8001c38 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00a      	beq.n	8001c66 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8001c50:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8001c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c56:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8001c58:	bf00      	nop
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f9      	bne.n	8001c5a <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	50004200 	.word	0x50004200
 8001c74:	50004400 	.word	0x50004400

08001c78 <XMC_SCU_HIB_DisableHibernateDomain>:

/* API to power down the hibernation domain */
void XMC_SCU_HIB_DisableHibernateDomain(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* Disable hibernate domain */   
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_HIB_Msk;
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <XMC_SCU_HIB_DisableHibernateDomain+0x1c>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	609a      	str	r2, [r3, #8]
  /* Reset of hibernate domain reset */  
  SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
 8001c82:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <XMC_SCU_HIB_DisableHibernateDomain+0x20>)
 8001c84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c88:	605a      	str	r2, [r3, #4]
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	50004200 	.word	0x50004200
 8001c98:	50004400 	.word	0x50004400

08001c9c <XMC_SCU_HIB_IsHibernateDomainEnabled>:

/* API to check the hibernation domain is enabled or not */
bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x34>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d007      	beq.n	8001cbc <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
 8001cac:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x38>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <XMC_SCU_HIB_IsHibernateDomainEnabled+0x22>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	b2db      	uxtb	r3, r3
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	50004200 	.word	0x50004200
 8001cd4:	50004400 	.word	0x50004400

08001cd8 <XMC_SCU_HIB_EnableInternalSlowClock>:

/* API to enable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_EnableInternalSlowClock(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 8001cdc:	bf00      	nop
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <XMC_SCU_HIB_EnableInternalSlowClock+0x2c>)
 8001ce0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001ce4:	f003 0320 	and.w	r3, r3, #32
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1f8      	bne.n	8001cde <XMC_SCU_HIB_EnableInternalSlowClock+0x6>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL &= (uint32_t)~(SCU_HIBERNATE_OSCSICTRL_PWD_Msk);
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <XMC_SCU_HIB_EnableInternalSlowClock+0x30>)
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	4a05      	ldr	r2, [pc, #20]	; (8001d08 <XMC_SCU_HIB_EnableInternalSlowClock+0x30>)
 8001cf2:	f023 0301 	bic.w	r3, r3, #1
 8001cf6:	6153      	str	r3, [r2, #20]
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	50004000 	.word	0x50004000
 8001d08:	50004300 	.word	0x50004300

08001d0c <XMC_SCU_HIB_DisableInternalSlowClock>:

/* API to disable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_DisableInternalSlowClock(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 8001d10:	bf00      	nop
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <XMC_SCU_HIB_DisableInternalSlowClock+0x2c>)
 8001d14:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001d18:	f003 0320 	and.w	r3, r3, #32
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1f8      	bne.n	8001d12 <XMC_SCU_HIB_DisableInternalSlowClock+0x6>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL |= (uint32_t)SCU_HIBERNATE_OSCSICTRL_PWD_Msk;
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <XMC_SCU_HIB_DisableInternalSlowClock+0x30>)
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	4a05      	ldr	r2, [pc, #20]	; (8001d3c <XMC_SCU_HIB_DisableInternalSlowClock+0x30>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6153      	str	r3, [r2, #20]
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	50004000 	.word	0x50004000
 8001d3c:	50004300 	.word	0x50004300

08001d40 <XMC_SCU_HIB_ClearEventStatus>:

void XMC_SCU_HIB_ClearEventStatus(int32_t event)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 8001d48:	bf00      	nop
 8001d4a:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <XMC_SCU_HIB_ClearEventStatus+0x2c>)
 8001d4c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1f8      	bne.n	8001d4a <XMC_SCU_HIB_ClearEventStatus+0xa>
  {
    /* Wait until HDCLR register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->HDCLR = event;
 8001d58:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <XMC_SCU_HIB_ClearEventStatus+0x30>)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6053      	str	r3, [r2, #4]
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	50004000 	.word	0x50004000
 8001d70:	50004300 	.word	0x50004300

08001d74 <XMC_SCU_HIB_TriggerEvent>:

void XMC_SCU_HIB_TriggerEvent(int32_t event)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8001d7c:	bf00      	nop
 8001d7e:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <XMC_SCU_HIB_TriggerEvent+0x2c>)
 8001d80:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1f8      	bne.n	8001d7e <XMC_SCU_HIB_TriggerEvent+0xa>
  {
    /* Wait until HDSET register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDSET = event;
 8001d8c:	4a05      	ldr	r2, [pc, #20]	; (8001da4 <XMC_SCU_HIB_TriggerEvent+0x30>)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6093      	str	r3, [r2, #8]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	50004000 	.word	0x50004000
 8001da4:	50004300 	.word	0x50004300

08001da8 <XMC_SCU_HIB_EnableEvent>:

void XMC_SCU_HIB_EnableEvent(int32_t event)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001db0:	bf00      	nop
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <XMC_SCU_HIB_EnableEvent+0x30>)
 8001db4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1f8      	bne.n	8001db2 <XMC_SCU_HIB_EnableEvent+0xa>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= event;
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <XMC_SCU_HIB_EnableEvent+0x34>)
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4905      	ldr	r1, [pc, #20]	; (8001ddc <XMC_SCU_HIB_EnableEvent+0x34>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	60cb      	str	r3, [r1, #12]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	50004000 	.word	0x50004000
 8001ddc:	50004300 	.word	0x50004300

08001de0 <XMC_SCU_HIB_DisableEvent>:

void XMC_SCU_HIB_DisableEvent(int32_t event)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001de8:	bf00      	nop
 8001dea:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <XMC_SCU_HIB_DisableEvent+0x34>)
 8001dec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1f8      	bne.n	8001dea <XMC_SCU_HIB_DisableEvent+0xa>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR &= ~event;
 8001df8:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <XMC_SCU_HIB_DisableEvent+0x38>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	43d2      	mvns	r2, r2
 8001e00:	4611      	mov	r1, r2
 8001e02:	4a05      	ldr	r2, [pc, #20]	; (8001e18 <XMC_SCU_HIB_DisableEvent+0x38>)
 8001e04:	400b      	ands	r3, r1
 8001e06:	60d3      	str	r3, [r2, #12]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	50004000 	.word	0x50004000
 8001e18:	50004300 	.word	0x50004300

08001e1c <XMC_SCU_HIB_EnterHibernateState>:

void XMC_SCU_HIB_EnterHibernateState(void) 
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001e20:	bf00      	nop
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <XMC_SCU_HIB_EnterHibernateState+0x2c>)
 8001e24:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001e28:	f003 0308 	and.w	r3, r3, #8
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f8      	bne.n	8001e22 <XMC_SCU_HIB_EnterHibernateState+0x6>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_HIB_Msk;
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <XMC_SCU_HIB_EnterHibernateState+0x30>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	4a05      	ldr	r2, [pc, #20]	; (8001e4c <XMC_SCU_HIB_EnterHibernateState+0x30>)
 8001e36:	f043 0310 	orr.w	r3, r3, #16
 8001e3a:	60d3      	str	r3, [r2, #12]
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	50004000 	.word	0x50004000
 8001e4c:	50004300 	.word	0x50004300

08001e50 <XMC_SCU_HIB_EnterHibernateStateEx>:

void XMC_SCU_HIB_EnterHibernateStateEx(XMC_SCU_HIB_HIBERNATE_MODE_t mode)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	71fb      	strb	r3, [r7, #7]
  if (mode == XMC_SCU_HIB_HIBERNATE_MODE_EXTERNAL)
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <XMC_SCU_HIB_EnterHibernateStateEx+0x14>
  {
    XMC_SCU_HIB_EnterHibernateState();
 8001e60:	f7ff ffdc 	bl	8001e1c <XMC_SCU_HIB_EnterHibernateState>
      /* Wait until HDCR register in hibernate domain is ready to accept a write */
    }
    SCU_HIBERNATE->HINTSET = SCU_HIBERNATE_HINTSET_HIBNINT_Msk;
  }
#endif
}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <XMC_SCU_HIB_SetWakeupTriggerInput>:

void XMC_SCU_HIB_SetWakeupTriggerInput(XMC_SCU_HIB_IO_t pin)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001e76:	bf00      	nop
 8001e78:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <XMC_SCU_HIB_SetWakeupTriggerInput+0x48>)
 8001e7a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f8      	bne.n	8001e78 <XMC_SCU_HIB_SetWakeupTriggerInput+0xc>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d106      	bne.n	8001e9a <XMC_SCU_HIB_SetWakeupTriggerInput+0x2e>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_WKUPSEL_Msk;
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	4a09      	ldr	r2, [pc, #36]	; (8001eb8 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8001e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e96:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
  }
}
 8001e98:	e005      	b.n	8001ea6 <XMC_SCU_HIB_SetWakeupTriggerInput+0x3a>
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
 8001e9a:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	4a06      	ldr	r2, [pc, #24]	; (8001eb8 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8001ea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ea4:	60d3      	str	r3, [r2, #12]
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	50004000 	.word	0x50004000
 8001eb8:	50004300 	.word	0x50004300

08001ebc <XMC_SCU_HIB_SetPinMode>:

void XMC_SCU_HIB_SetPinMode(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_PIN_MODE_t mode)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	6039      	str	r1, [r7, #0]
 8001ec6:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001ec8:	bf00      	nop
 8001eca:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <XMC_SCU_HIB_SetPinMode+0x4c>)
 8001ecc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1f8      	bne.n	8001eca <XMC_SCU_HIB_SetPinMode+0xe>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <XMC_SCU_HIB_SetPinMode+0x50>)
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8001ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	401a      	ands	r2, r3
                        (mode << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin));
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	6839      	ldr	r1, [r7, #0]
 8001ef2:	fa01 f303 	lsl.w	r3, r1, r3
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 8001ef6:	4905      	ldr	r1, [pc, #20]	; (8001f0c <XMC_SCU_HIB_SetPinMode+0x50>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	60cb      	str	r3, [r1, #12]
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	50004000 	.word	0x50004000
 8001f0c:	50004300 	.word	0x50004300

08001f10 <XMC_SCU_HIB_SetPinOutputLevel>:

void XMC_SCU_HIB_SetPinOutputLevel(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_IO_OUTPUT_LEVEL_t level)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	460a      	mov	r2, r1
 8001f1a:	71fb      	strb	r3, [r7, #7]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	80bb      	strh	r3, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001f20:	bf00      	nop
 8001f22:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <XMC_SCU_HIB_SetPinOutputLevel+0x50>)
 8001f24:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001f28:	f003 0308 	and.w	r3, r3, #8
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1f8      	bne.n	8001f22 <XMC_SCU_HIB_SetPinOutputLevel+0x12>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <XMC_SCU_HIB_SetPinOutputLevel+0x54>)
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	4013      	ands	r3, r2
                        (level << pin);
 8001f42:	88b9      	ldrh	r1, [r7, #4]
 8001f44:	79fa      	ldrb	r2, [r7, #7]
 8001f46:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4a:	4611      	mov	r1, r2
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 8001f4c:	4a05      	ldr	r2, [pc, #20]	; (8001f64 <XMC_SCU_HIB_SetPinOutputLevel+0x54>)
 8001f4e:	430b      	orrs	r3, r1
 8001f50:	60d3      	str	r3, [r2, #12]
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	50004000 	.word	0x50004000
 8001f64:	50004300 	.word	0x50004300

08001f68 <XMC_SCU_HIB_SetInput0>:

void XMC_SCU_HIB_SetInput0(XMC_SCU_HIB_IO_t pin)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001f72:	bf00      	nop
 8001f74:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <XMC_SCU_HIB_SetInput0+0x48>)
 8001f76:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f8      	bne.n	8001f74 <XMC_SCU_HIB_SetInput0+0xc>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d106      	bne.n	8001f96 <XMC_SCU_HIB_SetInput0+0x2e>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_GPI0SEL_Msk;
 8001f88:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <XMC_SCU_HIB_SetInput0+0x4c>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	4a09      	ldr	r2, [pc, #36]	; (8001fb4 <XMC_SCU_HIB_SetInput0+0x4c>)
 8001f8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f92:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
  }
}
 8001f94:	e005      	b.n	8001fa2 <XMC_SCU_HIB_SetInput0+0x3a>
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
 8001f96:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <XMC_SCU_HIB_SetInput0+0x4c>)
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	4a06      	ldr	r2, [pc, #24]	; (8001fb4 <XMC_SCU_HIB_SetInput0+0x4c>)
 8001f9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fa0:	60d3      	str	r3, [r2, #12]
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	50004000 	.word	0x50004000
 8001fb4:	50004300 	.word	0x50004300

08001fb8 <XMC_SCU_HIB_SetSR0Input>:

void XMC_SCU_HIB_SetSR0Input(XMC_SCU_HIB_SR0_INPUT_t input)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	80fb      	strh	r3, [r7, #6]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001fc2:	bf00      	nop
 8001fc4:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <XMC_SCU_HIB_SetSR0Input+0x38>)
 8001fc6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f8      	bne.n	8001fc4 <XMC_SCU_HIB_SetSR0Input+0xc>
    /* Wait until HDCR register in hibernate domain is ready to accept a write */
  }
#if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk | SCU_HIBERNATE_HDCR_ADIG0SEL_Msk)) | 
#else
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk)) | 
 8001fd2:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <XMC_SCU_HIB_SetSR0Input+0x3c>)
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001fda:	88fb      	ldrh	r3, [r7, #6]
 8001fdc:	4905      	ldr	r1, [pc, #20]	; (8001ff4 <XMC_SCU_HIB_SetSR0Input+0x3c>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	60cb      	str	r3, [r1, #12]
#endif  
                        input;
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	50004000 	.word	0x50004000
 8001ff4:	50004300 	.word	0x50004300

08001ff8 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	2b00      	cmp	r3, #0
 8002006:	bf0c      	ite	eq
 8002008:	2301      	moveq	r3, #1
 800200a:	2300      	movne	r3, #0
 800200c:	b2db      	uxtb	r3, r3
}
 800200e:	4618      	mov	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	50004300 	.word	0x50004300

0800201c <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8002020:	bf00      	nop
 8002022:	4b17      	ldr	r3, [pc, #92]	; (8002080 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8002024:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1f8      	bne.n	8002022 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8002030:	4b14      	ldr	r3, [pc, #80]	; (8002084 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	4a13      	ldr	r2, [pc, #76]	; (8002084 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8002036:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800203a:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800203c:	bf00      	nop
 800203e:	4b10      	ldr	r3, [pc, #64]	; (8002080 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8002040:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1f8      	bne.n	800203e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 800204c:	4b0d      	ldr	r3, [pc, #52]	; (8002084 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	4a0c      	ldr	r2, [pc, #48]	; (8002084 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8002052:	f043 0308 	orr.w	r3, r3, #8
 8002056:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8002058:	bf00      	nop
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 800205c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1f8      	bne.n	800205a <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 800206a:	2208      	movs	r2, #8
 800206c:	609a      	str	r2, [r3, #8]

  while (XMC_SCU_GetMirrorStatus() != 0)
 800206e:	bf00      	nop
 8002070:	f7fe fe48 	bl	8000d04 <XMC_SCU_GetMirrorStatus>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1fa      	bne.n	8002070 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	50004000 	.word	0x50004000
 8002084:	50004300 	.word	0x50004300

08002088 <XMC_SCU_CLOCK_DisableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_DisableLowPowerOscillator(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 800208c:	bf00      	nop
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x2c>)
 8002090:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f8      	bne.n	800208e <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= (uint32_t)SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x30>)
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	4a05      	ldr	r2, [pc, #20]	; (80020b8 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x30>)
 80020a2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80020a6:	61d3      	str	r3, [r2, #28]
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	50004000 	.word	0x50004000
 80020b8:	50004300 	.word	0x50004300

080020bc <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 80020c0:	bf00      	nop
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x2c>)
 80020c4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80020c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1f8      	bne.n	80020c2 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x30>)
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	4a05      	ldr	r2, [pc, #20]	; (80020ec <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x30>)
 80020d6:	f043 0331 	orr.w	r3, r3, #49	; 0x31
 80020da:	61d3      	str	r3, [r2, #28]
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	50004000 	.word	0x50004000
 80020ec:	50004300 	.word	0x50004300

080020f0 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 80020f4:	bf00      	nop
 80020f6:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x30>)
 80020f8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80020fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1f8      	bne.n	80020f6 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL = (SCU_HIBERNATE->OSCULCTRL & ~(uint32_t)(SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk)) |
 8002104:	4b07      	ldr	r3, [pc, #28]	; (8002124 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x34>)
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	f023 0331 	bic.w	r3, r3, #49	; 0x31
 800210c:	4a05      	ldr	r2, [pc, #20]	; (8002124 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x34>)
 800210e:	f043 0320 	orr.w	r3, r3, #32
 8002112:	61d3      	str	r3, [r2, #28]
                             (SCU_HIBERNATE_OSCULCTRL_MODE_OSC_POWER_DOWN << SCU_HIBERNATE_OSCULCTRL_MODE_Pos);                       
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	50004000 	.word	0x50004000
 8002124:	50004300 	.word	0x50004300

08002128 <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
 800212c:	4b04      	ldr	r3, [pc, #16]	; (8002140 <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus+0x18>)
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	f003 0301 	and.w	r3, r3, #1
}
 8002134:	4618      	mov	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	50004300 	.word	0x50004300

08002144 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8002144:	b598      	push	{r3, r4, r7, lr}
 8002146:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8002148:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4a0e      	ldr	r2, [pc, #56]	; (8002188 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 800214e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002152:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8002154:	4b0d      	ldr	r3, [pc, #52]	; (800218c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 800215c:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8002160:	f004 f9ce 	bl	8006500 <OSCHP_GetFrequency>
 8002164:	4602      	mov	r2, r0
 8002166:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8002168:	fba3 2302 	umull	r2, r3, r3, r2
 800216c:	0d1b      	lsrs	r3, r3, #20
 800216e:	3b01      	subs	r3, #1
 8002170:	041b      	lsls	r3, r3, #16
  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8002172:	4a06      	ldr	r2, [pc, #24]	; (800218c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8002174:	4323      	orrs	r3, r4
 8002176:	6053      	str	r3, [r2, #4]

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8002178:	4b03      	ldr	r3, [pc, #12]	; (8002188 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	4a02      	ldr	r2, [pc, #8]	; (8002188 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 800217e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002182:	6053      	str	r3, [r2, #4]
}
 8002184:	bf00      	nop
 8002186:	bd98      	pop	{r3, r4, r7, pc}
 8002188:	50004710 	.word	0x50004710
 800218c:	50004700 	.word	0x50004700
 8002190:	6b5fca6b 	.word	0x6b5fca6b

08002194 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8002198:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 7360 	and.w	r3, r3, #896	; 0x380
 80021a0:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80021a4:	bf0c      	ite	eq
 80021a6:	2301      	moveq	r3, #1
 80021a8:	2300      	movne	r3, #0
 80021aa:	b2db      	uxtb	r3, r3
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	50004710 	.word	0x50004710

080021bc <XMC_SCU_CLOCK_DisableHighPerformanceOscillator>:

/* API to disable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
 80021c0:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0x1c>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0x1c>)
 80021c6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80021ca:	6053      	str	r3, [r2, #4]
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	50004700 	.word	0x50004700

080021dc <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL |= SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	6053      	str	r3, [r2, #4]
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	50004700 	.word	0x50004700

080021fc <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL &= ~SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 8002206:	f023 0301 	bic.w	r3, r3, #1
 800220a:	6053      	str	r3, [r2, #4]
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	50004700 	.word	0x50004700

0800221c <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
 8002220:	4b04      	ldr	r3, [pc, #16]	; (8002234 <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus+0x18>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0301 	and.w	r3, r3, #1
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	50004700 	.word	0x50004700

08002238 <XMC_SCU_CLOCK_EnableSystemPll>:

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <XMC_SCU_CLOCK_EnableSystemPll+0x20>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4a05      	ldr	r2, [pc, #20]	; (8002258 <XMC_SCU_CLOCK_EnableSystemPll+0x20>)
 8002242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002246:	f023 0302 	bic.w	r3, r3, #2
 800224a:	6053      	str	r3, [r2, #4]
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	50004710 	.word	0x50004710

0800225c <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <XMC_SCU_CLOCK_DisableSystemPll+0x20>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4a05      	ldr	r2, [pc, #20]	; (800227c <XMC_SCU_CLOCK_DisableSystemPll+0x20>)
 8002266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226a:	f043 0302 	orr.w	r3, r3, #2
 800226e:	6053      	str	r3, [r2, #4]
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	50004710 	.word	0x50004710

08002280 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	60ba      	str	r2, [r7, #8]
 8002288:	607b      	str	r3, [r7, #4]
 800228a:	4603      	mov	r3, r0
 800228c:	81fb      	strh	r3, [r7, #14]
 800228e:	460b      	mov	r3, r1
 8002290:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8002292:	89fb      	ldrh	r3, [r7, #14]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff fa85 	bl	80017a4 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 800229a:	7b7b      	ldrb	r3, [r7, #13]
 800229c:	2b01      	cmp	r3, #1
 800229e:	f040 8084 	bne.w	80023aa <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 80022a2:	89fb      	ldrh	r3, [r7, #14]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d109      	bne.n	80022bc <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 80022a8:	f004 f92a 	bl	8006500 <OSCHP_GetFrequency>
 80022ac:	4602      	mov	r2, r0
 80022ae:	4b4c      	ldr	r3, [pc, #304]	; (80023e0 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 80022b0:	fba3 2302 	umull	r2, r3, r3, r2
 80022b4:	0c9b      	lsrs	r3, r3, #18
 80022b6:	059b      	lsls	r3, r3, #22
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	e002      	b.n	80022c2 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 80022bc:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80022c0:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	fb02 f203 	mul.w	r2, r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d0:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	4a43      	ldr	r2, [pc, #268]	; (80023e4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 80022d6:	fba2 2303 	umull	r2, r3, r2, r3
 80022da:	091b      	lsrs	r3, r3, #4
 80022dc:	0d9b      	lsrs	r3, r3, #22
 80022de:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 80022e0:	4b41      	ldr	r3, [pc, #260]	; (80023e8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	4a40      	ldr	r2, [pc, #256]	; (80023e8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 80022ec:	4b3e      	ldr	r3, [pc, #248]	; (80023e8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	4a3d      	ldr	r2, [pc, #244]	; (80023e8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80022f2:	f043 0310 	orr.w	r3, r3, #16
 80022f6:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 80022f8:	4b3b      	ldr	r3, [pc, #236]	; (80023e8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	4b3b      	ldr	r3, [pc, #236]	; (80023ec <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 80022fe:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	3a01      	subs	r2, #1
 8002304:	0212      	lsls	r2, r2, #8
 8002306:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	3b01      	subs	r3, #1
 800230c:	041b      	lsls	r3, r3, #16
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 800230e:	431a      	orrs	r2, r3
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	3b01      	subs	r3, #1
 8002314:	061b      	lsls	r3, r3, #24
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8002316:	4934      	ldr	r1, [pc, #208]	; (80023e8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002318:	4313      	orrs	r3, r2
 800231a:	608b      	str	r3, [r1, #8]

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 800231c:	4b32      	ldr	r3, [pc, #200]	; (80023e8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	4a31      	ldr	r2, [pc, #196]	; (80023e8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002326:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8002328:	4b2f      	ldr	r3, [pc, #188]	; (80023e8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	4a2e      	ldr	r2, [pc, #184]	; (80023e8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800232e:	f023 0310 	bic.w	r3, r3, #16
 8002332:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8002334:	4b2c      	ldr	r3, [pc, #176]	; (80023e8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	4a2b      	ldr	r2, [pc, #172]	; (80023e8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800233a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800233e:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002340:	bf00      	nop
 8002342:	4b29      	ldr	r3, [pc, #164]	; (80023e8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f9      	beq.n	8002342 <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 800234e:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	4a25      	ldr	r2, [pc, #148]	; (80023e8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002354:	f023 0301 	bic.w	r3, r3, #1
 8002358:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 800235a:	bf00      	nop
 800235c:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f9      	bne.n	800235c <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	4a21      	ldr	r2, [pc, #132]	; (80023f0 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 800236c:	fba2 2303 	umull	r2, r3, r2, r3
 8002370:	095b      	lsrs	r3, r3, #5
 8002372:	0d9b      	lsrs	r3, r3, #22
 8002374:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8002376:	6a3a      	ldr	r2, [r7, #32]
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	429a      	cmp	r2, r3
 800237c:	d202      	bcs.n	8002384 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 800237e:	6938      	ldr	r0, [r7, #16]
 8002380:	f000 f84a 	bl	8002418 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	085b      	lsrs	r3, r3, #1
 8002388:	4a1a      	ldr	r2, [pc, #104]	; (80023f4 <XMC_SCU_CLOCK_StartSystemPll+0x174>)
 800238a:	fba2 2303 	umull	r2, r3, r2, r3
 800238e:	095b      	lsrs	r3, r3, #5
 8002390:	0d9b      	lsrs	r3, r3, #22
 8002392:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8002394:	6a3a      	ldr	r2, [r7, #32]
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	429a      	cmp	r2, r3
 800239a:	d202      	bcs.n	80023a2 <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 800239c:	6938      	ldr	r0, [r7, #16]
 800239e:	f000 f83b 	bl	8002418 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 80023a2:	6a38      	ldr	r0, [r7, #32]
 80023a4:	f000 f838 	bl	8002418 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
    {
      /* wait for prescaler mode */
    }
  }
}
 80023a8:	e015      	b.n	80023d6 <XMC_SCU_CLOCK_StartSystemPll+0x156>
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 80023aa:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	3b01      	subs	r3, #1
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 80023b6:	490c      	ldr	r1, [pc, #48]	; (80023e8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	608b      	str	r3, [r1, #8]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 80023bc:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	4a09      	ldr	r2, [pc, #36]	; (80023e8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 80023c8:	bf00      	nop
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f9      	beq.n	80023ca <XMC_SCU_CLOCK_StartSystemPll+0x14a>
}
 80023d6:	bf00      	nop
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	431bde83 	.word	0x431bde83
 80023e4:	aaaaaaab 	.word	0xaaaaaaab
 80023e8:	50004710 	.word	0x50004710
 80023ec:	f08080ff 	.word	0xf08080ff
 80023f0:	88888889 	.word	0x88888889
 80023f4:	b60b60b7 	.word	0xb60b60b7

080023f8 <XMC_SCU_CLOCK_StopSystemPll>:

/* API to stop main PLL operation */
void XMC_SCU_CLOCK_StopSystemPll(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <XMC_SCU_CLOCK_StopSystemPll+0x1c>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	4a04      	ldr	r2, [pc, #16]	; (8002414 <XMC_SCU_CLOCK_StopSystemPll+0x1c>)
 8002402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002406:	6053      	str	r3, [r2, #4]
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	50004710 	.word	0x50004710

08002418 <XMC_SCU_CLOCK_StepSystemPllFrequency>:

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8002420:	4b08      	ldr	r3, [pc, #32]	; (8002444 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3b01      	subs	r3, #1
 800242c:	041b      	lsls	r3, r3, #16
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 800242e:	4905      	ldr	r1, [pc, #20]	; (8002444 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>)
 8002430:	4313      	orrs	r3, r2
 8002432:	608b      	str	r3, [r1, #8]

  XMC_SCU_lDelay(50U);
 8002434:	2032      	movs	r0, #50	; 0x32
 8002436:	f7fe fc71 	bl	8000d1c <XMC_SCU_lDelay>
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	50004710 	.word	0x50004710

08002448 <XMC_SCU_CLOCK_IsSystemPllLocked>:

/* API to check main PLL is locked or not */
bool XMC_SCU_CLOCK_IsSystemPllLocked(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return (bool)((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) != 0UL);
 800244c:	4b06      	ldr	r3, [pc, #24]	; (8002468 <XMC_SCU_CLOCK_IsSystemPllLocked+0x20>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	bf14      	ite	ne
 8002458:	2301      	movne	r3, #1
 800245a:	2300      	moveq	r3, #0
 800245c:	b2db      	uxtb	r3, r3
}
 800245e:	4618      	mov	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	50004710 	.word	0x50004710

0800246c <XMC_SCU_INTERRUPT_SetEventHandler>:
/*
 * API to assign the event handler function to be executed on occurrence of the selected event.
 */
XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(const XMC_SCU_INTERRUPT_EVENT_t event,
                                                   const XMC_SCU_INTERRUPT_EVENT_HANDLER_t handler)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t index;
  XMC_SCU_STATUS_t status;
  
  index = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 800247a:	e002      	b.n	8002482 <XMC_SCU_INTERRUPT_SetEventHandler+0x16>
  {
    index++;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	3301      	adds	r3, #1
 8002480:	60fb      	str	r3, [r7, #12]
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	fa22 f303 	lsr.w	r3, r2, r3
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d102      	bne.n	8002498 <XMC_SCU_INTERRUPT_SetEventHandler+0x2c>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b1f      	cmp	r3, #31
 8002496:	d9f1      	bls.n	800247c <XMC_SCU_INTERRUPT_SetEventHandler+0x10>
  }
  
  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b20      	cmp	r3, #32
 800249c:	d102      	bne.n	80024a4 <XMC_SCU_INTERRUPT_SetEventHandler+0x38>
  {
    status = XMC_SCU_STATUS_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	72fb      	strb	r3, [r7, #11]
 80024a2:	e006      	b.n	80024b2 <XMC_SCU_INTERRUPT_SetEventHandler+0x46>
  }
  else
  {
    event_handler_list[index] = handler;
 80024a4:	4906      	ldr	r1, [pc, #24]	; (80024c0 <XMC_SCU_INTERRUPT_SetEventHandler+0x54>)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    status = XMC_SCU_STATUS_OK;      
 80024ae:	2300      	movs	r3, #0
 80024b0:	72fb      	strb	r3, [r7, #11]
  }
  
  return (status);
 80024b2:	7afb      	ldrb	r3, [r7, #11]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	2000098c 	.word	0x2000098c

080024c4 <XMC_SCU_IRQHandler>:

/*
 * API to execute callback functions for multiple events.
 */
void XMC_SCU_IRQHandler(uint32_t sr_num)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  XMC_SCU_INTERRUPT_EVENT_t event;
  XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;
  
  XMC_UNUSED_ARG(sr_num);
  
  index = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
  event = XMC_SCU_INTERUPT_GetEventStatus();
 80024d0:	f7fe fc80 	bl	8000dd4 <XMC_SCU_INTERUPT_GetEventStatus>
 80024d4:	6138      	str	r0, [r7, #16]
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 80024d6:	e01c      	b.n	8002512 <XMC_SCU_IRQHandler+0x4e>
  {    
    if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	fa22 f303 	lsr.w	r3, r2, r3
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d011      	beq.n	800250c <XMC_SCU_IRQHandler+0x48>
    {
      event_handler = event_handler_list[index];
 80024e8:	4a0d      	ldr	r2, [pc, #52]	; (8002520 <XMC_SCU_IRQHandler+0x5c>)
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f0:	60fb      	str	r3, [r7, #12]
      if (event_handler != NULL)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <XMC_SCU_IRQHandler+0x38>
      {
          (event_handler)();
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4798      	blx	r3
      }
      
      XMC_SCU_INTERRUPT_ClearEventStatus((uint32_t)(1UL << index));
 80024fc:	2201      	movs	r2, #1
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe fc71 	bl	8000dec <XMC_SCU_INTERRUPT_ClearEventStatus>
      
      break;
 800250a:	e005      	b.n	8002518 <XMC_SCU_IRQHandler+0x54>
    }   
    index++;    
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	3301      	adds	r3, #1
 8002510:	617b      	str	r3, [r7, #20]
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2b1f      	cmp	r3, #31
 8002516:	d9df      	bls.n	80024d8 <XMC_SCU_IRQHandler+0x14>
  }
}
 8002518:	bf00      	nop
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	2000098c 	.word	0x2000098c

08002524 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	70fb      	strb	r3, [r7, #3]
 8002530:	4613      	mov	r3, r2
 8002532:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8002534:	78fb      	ldrb	r3, [r7, #3]
 8002536:	089b      	lsrs	r3, r3, #2
 8002538:	b2db      	uxtb	r3, r3
 800253a:	461a      	mov	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3204      	adds	r2, #4
 8002540:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002544:	78fb      	ldrb	r3, [r7, #3]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	21f8      	movs	r1, #248	; 0xf8
 800254e:	fa01 f303 	lsl.w	r3, r1, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	78f9      	ldrb	r1, [r7, #3]
 8002556:	0889      	lsrs	r1, r1, #2
 8002558:	b2c9      	uxtb	r1, r1
 800255a:	4608      	mov	r0, r1
 800255c:	ea02 0103 	and.w	r1, r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	1d02      	adds	r2, r0, #4
 8002564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8002568:	78fb      	ldrb	r3, [r7, #3]
 800256a:	089b      	lsrs	r3, r3, #2
 800256c:	b2db      	uxtb	r3, r3
 800256e:	461a      	mov	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3204      	adds	r2, #4
 8002574:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002578:	78b9      	ldrb	r1, [r7, #2]
 800257a:	78fb      	ldrb	r3, [r7, #3]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	fa01 f303 	lsl.w	r3, r1, r3
 8002586:	78f9      	ldrb	r1, [r7, #3]
 8002588:	0889      	lsrs	r1, r1, #2
 800258a:	b2c9      	uxtb	r1, r1
 800258c:	4608      	mov	r0, r1
 800258e:	ea42 0103 	orr.w	r1, r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	1d02      	adds	r2, r0, #4
 8002596:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	460b      	mov	r3, r1
 80025b0:	70fb      	strb	r3, [r7, #3]
 80025b2:	4613      	mov	r3, r2
 80025b4:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	2103      	movs	r1, #3
 80025c0:	fa01 f303 	lsl.w	r3, r1, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	401a      	ands	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80025d0:	78b9      	ldrb	r1, [r7, #2]
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	fa01 f303 	lsl.w	r3, r1, r3
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	675a      	str	r2, [r3, #116]	; 0x74
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 80025ec:	b5b0      	push	{r4, r5, r7, lr}
 80025ee:	b08e      	sub	sp, #56	; 0x38
 80025f0:	af02      	add	r7, sp, #8
 80025f2:	6078      	str	r0, [r7, #4]
	 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsSETUPReceived(void)
	{
		return device.IsSetupRecieved;
 80025f4:	4bb7      	ldr	r3, [pc, #732]	; (80028d4 <HID_Device_ProcessControlRequest+0x2e8>)
 80025f6:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80025fa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	bf14      	ite	ne
 8002604:	2301      	movne	r3, #1
 8002606:	2300      	moveq	r3, #0
 8002608:	b2db      	uxtb	r3, r3
	if (!(Endpoint_IsSETUPReceived()))
 800260a:	f083 0301 	eor.w	r3, r3, #1
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	f040 81b5 	bne.w	8002980 <HID_Device_ProcessControlRequest+0x394>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
 8002616:	4bb0      	ldr	r3, [pc, #704]	; (80028d8 <HID_Device_ProcessControlRequest+0x2ec>)
 8002618:	889b      	ldrh	r3, [r3, #4]
 800261a:	b29a      	uxth	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	b29b      	uxth	r3, r3
 8002622:	429a      	cmp	r2, r3
 8002624:	f040 81ae 	bne.w	8002984 <HID_Device_ProcessControlRequest+0x398>
	  return;

	switch (USB_ControlRequest.bRequest)
 8002628:	4bab      	ldr	r3, [pc, #684]	; (80028d8 <HID_Device_ProcessControlRequest+0x2ec>)
 800262a:	785b      	ldrb	r3, [r3, #1]
 800262c:	3b01      	subs	r3, #1
 800262e:	2b0a      	cmp	r3, #10
 8002630:	f200 81b5 	bhi.w	800299e <HID_Device_ProcessControlRequest+0x3b2>
 8002634:	a201      	add	r2, pc, #4	; (adr r2, 800263c <HID_Device_ProcessControlRequest+0x50>)
 8002636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263a:	bf00      	nop
 800263c:	08002669 	.word	0x08002669
 8002640:	08002909 	.word	0x08002909
 8002644:	08002835 	.word	0x08002835
 8002648:	0800299f 	.word	0x0800299f
 800264c:	0800299f 	.word	0x0800299f
 8002650:	0800299f 	.word	0x0800299f
 8002654:	0800299f 	.word	0x0800299f
 8002658:	0800299f 	.word	0x0800299f
 800265c:	0800275b 	.word	0x0800275b
 8002660:	080028dd 	.word	0x080028dd
 8002664:	080028a7 	.word	0x080028a7
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 8002668:	4b9b      	ldr	r3, [pc, #620]	; (80028d8 <HID_Device_ProcessControlRequest+0x2ec>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2ba1      	cmp	r3, #161	; 0xa1
 800266e:	f040 818b 	bne.w	8002988 <HID_Device_ProcessControlRequest+0x39c>
			{
 8002672:	466b      	mov	r3, sp
 8002674:	461d      	mov	r5, r3
				uint16_t ReportSize = 0;
 8002676:	2300      	movs	r3, #0
 8002678:	81fb      	strh	r3, [r7, #14]
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 800267a:	4b97      	ldr	r3, [pc, #604]	; (80028d8 <HID_Device_ProcessControlRequest+0x2ec>)
 800267c:	885b      	ldrh	r3, [r3, #2]
 800267e:	b29b      	uxth	r3, r3
 8002680:	b2db      	uxtb	r3, r3
 8002682:	737b      	strb	r3, [r7, #13]
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
 8002684:	4b94      	ldr	r3, [pc, #592]	; (80028d8 <HID_Device_ProcessControlRequest+0x2ec>)
 8002686:	885b      	ldrh	r3, [r3, #2]
 8002688:	b29b      	uxth	r3, r3
 800268a:	0a1b      	lsrs	r3, r3, #8
 800268c:	b29b      	uxth	r3, r3
 800268e:	b2db      	uxtb	r3, r3
 8002690:	3b01      	subs	r3, #1
 8002692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	7b18      	ldrb	r0, [r3, #12]
 800269a:	4603      	mov	r3, r0
 800269c:	3b01      	subs	r3, #1
 800269e:	61fb      	str	r3, [r7, #28]
 80026a0:	b2c1      	uxtb	r1, r0
 80026a2:	f04f 0200 	mov.w	r2, #0
 80026a6:	f04f 0300 	mov.w	r3, #0
 80026aa:	f04f 0400 	mov.w	r4, #0
 80026ae:	00d4      	lsls	r4, r2, #3
 80026b0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80026b4:	00cb      	lsls	r3, r1, #3
 80026b6:	b2c1      	uxtb	r1, r0
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	f04f 0400 	mov.w	r4, #0
 80026c4:	00d4      	lsls	r4, r2, #3
 80026c6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80026ca:	00cb      	lsls	r3, r1, #3
 80026cc:	4603      	mov	r3, r0
 80026ce:	3307      	adds	r3, #7
 80026d0:	08db      	lsrs	r3, r3, #3
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	ebad 0d03 	sub.w	sp, sp, r3
 80026d8:	ab02      	add	r3, sp, #8
 80026da:	3300      	adds	r3, #0
 80026dc:	61bb      	str	r3, [r7, #24]

				memset(ReportData, 0, sizeof(ReportData));
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	4602      	mov	r2, r0
 80026e2:	2100      	movs	r1, #0
 80026e4:	4618      	mov	r0, r3
 80026e6:	f004 fa8b 	bl	8006c00 <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
 80026ea:	69b8      	ldr	r0, [r7, #24]
 80026ec:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80026f0:	f107 010d 	add.w	r1, r7, #13
 80026f4:	f107 030e 	add.w	r3, r7, #14
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	4603      	mov	r3, r0
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7fd fe87 	bl	8000410 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d007      	beq.n	800271a <HID_Device_ProcessControlRequest+0x12e>
				{
					MEMCPY(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6898      	ldr	r0, [r3, #8]
 800270e:	69b9      	ldr	r1, [r7, #24]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	7b1b      	ldrb	r3, [r3, #12]
 8002714:	461a      	mov	r2, r3
 8002716:	f000 fa49 	bl	8002bac <thumb2_memcpy>
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 800271a:	2200      	movs	r2, #0
 800271c:	4b6d      	ldr	r3, [pc, #436]	; (80028d4 <HID_Device_ProcessControlRequest+0x2e8>)
 800271e:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002722:	2200      	movs	r2, #0
 8002724:	4b6b      	ldr	r3, [pc, #428]	; (80028d4 <HID_Device_ProcessControlRequest+0x2e8>)
 8002726:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	 *  \note This is not applicable for non CONTROL type endpoints.
	 */
	static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
	static inline void Endpoint_ClearSETUP(void)
	{
		device.IsSetupRecieved = 0;
 800272a:	4a6a      	ldr	r2, [pc, #424]	; (80028d4 <HID_Device_ProcessControlRequest+0x2e8>)
 800272c:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8002730:	f36f 0341 	bfc	r3, #1, #1
 8002734:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
 8002738:	7b7b      	ldrb	r3, [r7, #13]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HID_Device_ProcessControlRequest+0x15a>
				  Endpoint_Write_8(ReportID);
 800273e:	7b7b      	ldrb	r3, [r7, #13]
 8002740:	4618      	mov	r0, r3
 8002742:	f000 fc1b 	bl	8002f7c <Endpoint_Write_8>

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	89fa      	ldrh	r2, [r7, #14]
 800274a:	4611      	mov	r1, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f000 ffa5 	bl	800369c <Endpoint_Write_Control_Stream_LE>
				Endpoint_ClearOUT();
 8002752:	f000 fb1d 	bl	8002d90 <Endpoint_ClearOUT>
 8002756:	46ad      	mov	sp, r5
			}

			break;
 8002758:	e116      	b.n	8002988 <HID_Device_ProcessControlRequest+0x39c>
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 800275a:	4b5f      	ldr	r3, [pc, #380]	; (80028d8 <HID_Device_ProcessControlRequest+0x2ec>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b21      	cmp	r3, #33	; 0x21
 8002760:	f040 8114 	bne.w	800298c <HID_Device_ProcessControlRequest+0x3a0>
			{
 8002764:	466b      	mov	r3, sp
 8002766:	461d      	mov	r5, r3
				uint16_t ReportSize = USB_ControlRequest.wLength;
 8002768:	4b5b      	ldr	r3, [pc, #364]	; (80028d8 <HID_Device_ProcessControlRequest+0x2ec>)
 800276a:	799a      	ldrb	r2, [r3, #6]
 800276c:	79db      	ldrb	r3, [r3, #7]
 800276e:	021b      	lsls	r3, r3, #8
 8002770:	4313      	orrs	r3, r2
 8002772:	85fb      	strh	r3, [r7, #46]	; 0x2e
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 8002774:	4b58      	ldr	r3, [pc, #352]	; (80028d8 <HID_Device_ProcessControlRequest+0x2ec>)
 8002776:	885b      	ldrh	r3, [r3, #2]
 8002778:	b29b      	uxth	r3, r3
 800277a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
 800277e:	4b56      	ldr	r3, [pc, #344]	; (80028d8 <HID_Device_ProcessControlRequest+0x2ec>)
 8002780:	885b      	ldrh	r3, [r3, #2]
 8002782:	b29b      	uxth	r3, r3
 8002784:	0a1b      	lsrs	r3, r3, #8
 8002786:	b29b      	uxth	r3, r3
 8002788:	b2db      	uxtb	r3, r3
 800278a:	3b01      	subs	r3, #1
 800278c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				uint8_t  ReportData[ReportSize];
 8002790:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 8002792:	4603      	mov	r3, r0
 8002794:	3b01      	subs	r3, #1
 8002796:	62bb      	str	r3, [r7, #40]	; 0x28
 8002798:	b281      	uxth	r1, r0
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	f04f 0400 	mov.w	r4, #0
 80027a6:	00d4      	lsls	r4, r2, #3
 80027a8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80027ac:	00cb      	lsls	r3, r1, #3
 80027ae:	b281      	uxth	r1, r0
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	f04f 0400 	mov.w	r4, #0
 80027bc:	00d4      	lsls	r4, r2, #3
 80027be:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80027c2:	00cb      	lsls	r3, r1, #3
 80027c4:	4603      	mov	r3, r0
 80027c6:	3307      	adds	r3, #7
 80027c8:	08db      	lsrs	r3, r3, #3
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	ebad 0d03 	sub.w	sp, sp, r3
 80027d0:	ab02      	add	r3, sp, #8
 80027d2:	3300      	adds	r3, #0
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
 80027d6:	4a3f      	ldr	r2, [pc, #252]	; (80028d4 <HID_Device_ProcessControlRequest+0x2e8>)
 80027d8:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80027dc:	f36f 0341 	bfc	r3, #1, #1
 80027e0:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80027e8:	4611      	mov	r1, r2
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 ff9e 	bl	800372c <Endpoint_Read_Control_Stream_LE>
				Endpoint_ClearIN();
 80027f0:	f000 fb1a 	bl	8002e28 <Endpoint_ClearIN>

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
 80027f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	bf14      	ite	ne
 80027fc:	2301      	movne	r3, #1
 80027fe:	2300      	moveq	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	461a      	mov	r2, r3
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	1898      	adds	r0, r3, r2
 8002808:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800280c:	2b00      	cmp	r3, #0
 800280e:	bf14      	ite	ne
 8002810:	2301      	movne	r3, #1
 8002812:	2300      	moveq	r3, #0
 8002814:	b2db      	uxtb	r3, r3
 8002816:	b29b      	uxth	r3, r3
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
 8002818:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	b29b      	uxth	r3, r3
 800281e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002822:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	4603      	mov	r3, r0
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fd ff00 	bl	8000630 <CALLBACK_HID_Device_ProcessHIDReport>
 8002830:	46ad      	mov	sp, r5
			}

			break;
 8002832:	e0ab      	b.n	800298c <HID_Device_ProcessControlRequest+0x3a0>
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 8002834:	4b28      	ldr	r3, [pc, #160]	; (80028d8 <HID_Device_ProcessControlRequest+0x2ec>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2ba1      	cmp	r3, #161	; 0xa1
 800283a:	f040 80a9 	bne.w	8002990 <HID_Device_ProcessControlRequest+0x3a4>
 800283e:	4a25      	ldr	r2, [pc, #148]	; (80028d4 <HID_Device_ProcessControlRequest+0x2e8>)
 8002840:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8002844:	f36f 0341 	bfc	r3, #1, #1
 8002848:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
 800284c:	bf00      	nop
	 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsINReady(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 800284e:	4b21      	ldr	r3, [pc, #132]	; (80028d4 <HID_Device_ProcessControlRequest+0x2e8>)
 8002850:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002854:	461a      	mov	r2, r3
 8002856:	232c      	movs	r3, #44	; 0x2c
 8002858:	fb03 f302 	mul.w	r3, r3, r2
 800285c:	4a1d      	ldr	r2, [pc, #116]	; (80028d4 <HID_Device_ProcessControlRequest+0x2e8>)
 800285e:	4413      	add	r3, r2
 8002860:	3304      	adds	r3, #4
 8002862:	617b      	str	r3, [r7, #20]
		return ep->InInUse == 0 && ep->IsEnabled;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d108      	bne.n	8002884 <HID_Device_ProcessControlRequest+0x298>
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	791b      	ldrb	r3, [r3, #4]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HID_Device_ProcessControlRequest+0x298>
 8002880:	2301      	movs	r3, #1
 8002882:	e000      	b.n	8002886 <HID_Device_ProcessControlRequest+0x29a>
 8002884:	2300      	movs	r3, #0
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	b2db      	uxtb	r3, r3
 800288c:	f083 0301 	eor.w	r3, r3, #1
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1db      	bne.n	800284e <HID_Device_ProcessControlRequest+0x262>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	7c1b      	ldrb	r3, [r3, #16]
 800289a:	4618      	mov	r0, r3
 800289c:	f000 fb6e 	bl	8002f7c <Endpoint_Write_8>
				Endpoint_ClearIN();
 80028a0:	f000 fac2 	bl	8002e28 <Endpoint_ClearIN>
				Endpoint_ClearStatusStage();
			}

			break;
 80028a4:	e074      	b.n	8002990 <HID_Device_ProcessControlRequest+0x3a4>
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 80028a6:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <HID_Device_ProcessControlRequest+0x2ec>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b21      	cmp	r3, #33	; 0x21
 80028ac:	d172      	bne.n	8002994 <HID_Device_ProcessControlRequest+0x3a8>
		device.IsSetupRecieved = 0;
 80028ae:	4a09      	ldr	r2, [pc, #36]	; (80028d4 <HID_Device_ProcessControlRequest+0x2e8>)
 80028b0:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80028b4:	f36f 0341 	bfc	r3, #1, #1
 80028b8:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
 80028bc:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <HID_Device_ProcessControlRequest+0x2ec>)
 80028be:	885b      	ldrh	r3, [r3, #2]
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	bf14      	ite	ne
 80028c8:	2301      	movne	r3, #1
 80028ca:	2300      	moveq	r3, #0
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	741a      	strb	r2, [r3, #16]
			}

			break;
 80028d2:	e05f      	b.n	8002994 <HID_Device_ProcessControlRequest+0x3a8>
 80028d4:	20000c0c 	.word	0x20000c0c
 80028d8:	20000f5c 	.word	0x20000f5c
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 80028dc:	4b31      	ldr	r3, [pc, #196]	; (80029a4 <HID_Device_ProcessControlRequest+0x3b8>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b21      	cmp	r3, #33	; 0x21
 80028e2:	d159      	bne.n	8002998 <HID_Device_ProcessControlRequest+0x3ac>
 80028e4:	4a30      	ldr	r2, [pc, #192]	; (80029a8 <HID_Device_ProcessControlRequest+0x3bc>)
 80028e6:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80028ea:	f36f 0341 	bfc	r3, #1, #1
 80028ee:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
 80028f2:	4b2c      	ldr	r3, [pc, #176]	; (80029a4 <HID_Device_ProcessControlRequest+0x3b8>)
 80028f4:	885b      	ldrh	r3, [r3, #2]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	119b      	asrs	r3, r3, #6
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8002900:	b29a      	uxth	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	829a      	strh	r2, [r3, #20]
			}

			break;
 8002906:	e047      	b.n	8002998 <HID_Device_ProcessControlRequest+0x3ac>
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 8002908:	4b26      	ldr	r3, [pc, #152]	; (80029a4 <HID_Device_ProcessControlRequest+0x3b8>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2ba1      	cmp	r3, #161	; 0xa1
 800290e:	d145      	bne.n	800299c <HID_Device_ProcessControlRequest+0x3b0>
 8002910:	4a25      	ldr	r2, [pc, #148]	; (80029a8 <HID_Device_ProcessControlRequest+0x3bc>)
 8002912:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8002916:	f36f 0341 	bfc	r3, #1, #1
 800291a:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
 800291e:	bf00      	nop
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002920:	4b21      	ldr	r3, [pc, #132]	; (80029a8 <HID_Device_ProcessControlRequest+0x3bc>)
 8002922:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002926:	461a      	mov	r2, r3
 8002928:	232c      	movs	r3, #44	; 0x2c
 800292a:	fb03 f302 	mul.w	r3, r3, r2
 800292e:	4a1e      	ldr	r2, [pc, #120]	; (80029a8 <HID_Device_ProcessControlRequest+0x3bc>)
 8002930:	4413      	add	r3, r2
 8002932:	3304      	adds	r3, #4
 8002934:	613b      	str	r3, [r7, #16]
		return ep->InInUse == 0 && ep->IsEnabled;
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	d108      	bne.n	8002956 <HID_Device_ProcessControlRequest+0x36a>
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	791b      	ldrb	r3, [r3, #4]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HID_Device_ProcessControlRequest+0x36a>
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <HID_Device_ProcessControlRequest+0x36c>
 8002956:	2300      	movs	r3, #0
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	b2db      	uxtb	r3, r3
 800295e:	f083 0301 	eor.w	r3, r3, #1
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1db      	bne.n	8002920 <HID_Device_ProcessControlRequest+0x334>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	8a9b      	ldrh	r3, [r3, #20]
 800296c:	089b      	lsrs	r3, r3, #2
 800296e:	b29b      	uxth	r3, r3
 8002970:	b2db      	uxtb	r3, r3
 8002972:	4618      	mov	r0, r3
 8002974:	f000 fb02 	bl	8002f7c <Endpoint_Write_8>
				Endpoint_ClearIN();
 8002978:	f000 fa56 	bl	8002e28 <Endpoint_ClearIN>
				Endpoint_ClearStatusStage();
			}

			break;
 800297c:	bf00      	nop
 800297e:	e00d      	b.n	800299c <HID_Device_ProcessControlRequest+0x3b0>
	  return;
 8002980:	bf00      	nop
 8002982:	e00c      	b.n	800299e <HID_Device_ProcessControlRequest+0x3b2>
	  return;
 8002984:	bf00      	nop
 8002986:	e00a      	b.n	800299e <HID_Device_ProcessControlRequest+0x3b2>
			break;
 8002988:	bf00      	nop
 800298a:	e008      	b.n	800299e <HID_Device_ProcessControlRequest+0x3b2>
			break;
 800298c:	bf00      	nop
 800298e:	e006      	b.n	800299e <HID_Device_ProcessControlRequest+0x3b2>
			break;
 8002990:	bf00      	nop
 8002992:	e004      	b.n	800299e <HID_Device_ProcessControlRequest+0x3b2>
			break;
 8002994:	bf00      	nop
 8002996:	e002      	b.n	800299e <HID_Device_ProcessControlRequest+0x3b2>
			break;
 8002998:	bf00      	nop
 800299a:	e000      	b.n	800299e <HID_Device_ProcessControlRequest+0x3b2>
			break;
 800299c:	bf00      	nop
	}
}
 800299e:	3730      	adds	r7, #48	; 0x30
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bdb0      	pop	{r4, r5, r7, pc}
 80029a4:	20000f5c 	.word	0x20000f5c
 80029a8:	20000c0c 	.word	0x20000c0c

080029ac <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3310      	adds	r3, #16
 80029b8:	2208      	movs	r2, #8
 80029ba:	2100      	movs	r1, #0
 80029bc:	4618      	mov	r0, r3
 80029be:	f004 f91f 	bl	8006c00 <memset>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	741a      	strb	r2, [r3, #16]
	HIDInterfaceInfo->State.IdleCount           = 750;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f240 22ee 	movw	r2, #750	; 0x2ee
 80029ce:	829a      	strh	r2, [r3, #20]

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2203      	movs	r2, #3
 80029d4:	719a      	strb	r2, [r3, #6]

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3302      	adds	r3, #2
 80029da:	2101      	movs	r1, #1
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 fba5 	bl	800312c <Endpoint_ConfigureEndpointTable>
 80029e2:	4603      	mov	r3, r0
 80029e4:	f083 0301 	eor.w	r3, r3, #1
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HID_Device_ConfigureEndpoints+0x46>
	  return false;
 80029ee:	2300      	movs	r3, #0
 80029f0:	e000      	b.n	80029f4 <HID_Device_ConfigureEndpoints+0x48>

	return true;
 80029f2:	2301      	movs	r3, #1
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 80029fc:	b5b0      	push	{r4, r5, r7, lr}
 80029fe:	b08a      	sub	sp, #40	; 0x28
 8002a00:	af02      	add	r7, sp, #8
 8002a02:	6078      	str	r0, [r7, #4]
	if (USB_DeviceState != DEVICE_STATE_Configured)
 8002a04:	4b67      	ldr	r3, [pc, #412]	; (8002ba4 <HID_Device_USBTask+0x1a8>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	f040 80c3 	bne.w	8002b96 <HID_Device_USBTask+0x19a>
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	8a5c      	ldrh	r4, [r3, #18]
			 *  \return Current USB frame number from the USB controller.
			 */
    
            static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE;
            static inline uint16_t USB_Device_GetFrameNumber(void) {
                return device.Driver->GetFrameNumber();
 8002a14:	4b64      	ldr	r3, [pc, #400]	; (8002ba8 <HID_Device_USBTask+0x1ac>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1a:	4798      	blx	r3
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	429c      	cmp	r4, r3
 8002a20:	f000 80bb 	beq.w	8002b9a <HID_Device_USBTask+0x19e>
		#else
		return;
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	789b      	ldrb	r3, [r3, #2]
 8002a28:	747b      	strb	r3, [r7, #17]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8002a2a:	7c7b      	ldrb	r3, [r7, #17]
 8002a2c:	f003 030f 	and.w	r3, r3, #15
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	4b5d      	ldr	r3, [pc, #372]	; (8002ba8 <HID_Device_USBTask+0x1ac>)
 8002a34:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002a38:	7c7b      	ldrb	r3, [r7, #17]
 8002a3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	4b59      	ldr	r3, [pc, #356]	; (8002ba8 <HID_Device_USBTask+0x1ac>)
 8002a42:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d

	if (Endpoint_IsReadWriteAllowed())
 8002a46:	f000 fa67 	bl	8002f18 <Endpoint_IsReadWriteAllowed>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80a5 	beq.w	8002b9c <HID_Device_USBTask+0x1a0>
	{
 8002a52:	466b      	mov	r3, sp
 8002a54:	461d      	mov	r5, r3
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	7b18      	ldrb	r0, [r3, #12]
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	61bb      	str	r3, [r7, #24]
 8002a60:	b2c1      	uxtb	r1, r0
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	f04f 0300 	mov.w	r3, #0
 8002a6a:	f04f 0400 	mov.w	r4, #0
 8002a6e:	00d4      	lsls	r4, r2, #3
 8002a70:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002a74:	00cb      	lsls	r3, r1, #3
 8002a76:	b2c1      	uxtb	r1, r0
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	f04f 0300 	mov.w	r3, #0
 8002a80:	f04f 0400 	mov.w	r4, #0
 8002a84:	00d4      	lsls	r4, r2, #3
 8002a86:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002a8a:	00cb      	lsls	r3, r1, #3
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	3307      	adds	r3, #7
 8002a90:	08db      	lsrs	r3, r3, #3
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	ebad 0d03 	sub.w	sp, sp, r3
 8002a98:	ab02      	add	r3, sp, #8
 8002a9a:	3300      	adds	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
		uint8_t  ReportID     = 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	73fb      	strb	r3, [r7, #15]
		uint16_t ReportINSize = 0;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	81bb      	strh	r3, [r7, #12]

		memset(ReportINData, 0, sizeof(ReportINData));
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	2100      	movs	r1, #0
 8002aac:	4618      	mov	r0, r3
 8002aae:	f004 f8a7 	bl	8006c00 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	f107 010f 	add.w	r1, r7, #15
 8002ab8:	f107 030c 	add.w	r3, r7, #12
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7fd fca4 	bl	8000410 <CALLBACK_HID_Device_CreateHIDReport>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	74fb      	strb	r3, [r7, #19]
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
 8002acc:	2300      	movs	r3, #0
 8002ace:	77fb      	strb	r3, [r7, #31]
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	8a9b      	ldrh	r3, [r3, #20]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d005      	beq.n	8002ae4 <HID_Device_USBTask+0xe8>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	8adb      	ldrh	r3, [r3, #22]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HID_Device_USBTask+0xe8>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <HID_Device_USBTask+0xea>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	74bb      	strb	r3, [r7, #18]
 8002ae8:	7cbb      	ldrb	r3, [r7, #18]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	74bb      	strb	r3, [r7, #18]

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d014      	beq.n	8002b22 <HID_Device_USBTask+0x126>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
 8002af8:	6978      	ldr	r0, [r7, #20]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	89ba      	ldrh	r2, [r7, #12]
 8002b00:	4619      	mov	r1, r3
 8002b02:	f003 ffb1 	bl	8006a68 <memcmp>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	bf14      	ite	ne
 8002b0c:	2301      	movne	r3, #1
 8002b0e:	2300      	moveq	r3, #0
 8002b10:	77fb      	strb	r3, [r7, #31]
			MEMCPY(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6898      	ldr	r0, [r3, #8]
 8002b16:	6979      	ldr	r1, [r7, #20]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	7b1b      	ldrb	r3, [r3, #12]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	f000 f845 	bl	8002bac <thumb2_memcpy>
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
 8002b22:	89bb      	ldrh	r3, [r7, #12]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d02c      	beq.n	8002b82 <HID_Device_USBTask+0x186>
 8002b28:	7cfb      	ldrb	r3, [r7, #19]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d105      	bne.n	8002b3a <HID_Device_USBTask+0x13e>
 8002b2e:	7ffb      	ldrb	r3, [r7, #31]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d102      	bne.n	8002b3a <HID_Device_USBTask+0x13e>
 8002b34:	7cbb      	ldrb	r3, [r7, #18]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d023      	beq.n	8002b82 <HID_Device_USBTask+0x186>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	8a9a      	ldrh	r2, [r3, #20]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	82da      	strh	r2, [r3, #22]

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	789b      	ldrb	r3, [r3, #2]
 8002b46:	743b      	strb	r3, [r7, #16]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8002b48:	7c3b      	ldrb	r3, [r7, #16]
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	4b15      	ldr	r3, [pc, #84]	; (8002ba8 <HID_Device_USBTask+0x1ac>)
 8002b52:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002b56:	7c3b      	ldrb	r3, [r7, #16]
 8002b58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <HID_Device_USBTask+0x1ac>)
 8002b60:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d

			if (ReportID)
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HID_Device_USBTask+0x176>
			  Endpoint_Write_8(ReportID);
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 fa05 	bl	8002f7c <Endpoint_Write_8>

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	89b9      	ldrh	r1, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 fb7f 	bl	800327c <Endpoint_Write_Stream_LE>

			Endpoint_ClearIN();
 8002b7e:	f000 f953 	bl	8002e28 <Endpoint_ClearIN>
 8002b82:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <HID_Device_USBTask+0x1ac>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b88:	4798      	blx	r3
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	461a      	mov	r2, r3
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	825a      	strh	r2, [r3, #18]
 8002b92:	46ad      	mov	sp, r5
 8002b94:	e002      	b.n	8002b9c <HID_Device_USBTask+0x1a0>
	  return;
 8002b96:	bf00      	nop
 8002b98:	e000      	b.n	8002b9c <HID_Device_USBTask+0x1a0>
		return;
 8002b9a:	bf00      	nop
	}
}
 8002b9c:	3720      	adds	r7, #32
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000f59 	.word	0x20000f59
 8002ba8:	20000c0c 	.word	0x20000c0c

08002bac <thumb2_memcpy>:
   stack to improve its performance.  It copies 4 bytes at a time and
   unrolls the loop to perform 4 of these copies per loop iteration.
*/
__attribute__((naked)) void thumb2_memcpy(void* pDest, const void* pSource, size_t length)
{
    __asm (
 8002bac:	0913      	lsrs	r3, r2, #4
 8002bae:	d011      	beq.n	8002bd4 <thumb2_memcpy+0x28>
 8002bb0:	f851 cb04 	ldr.w	ip, [r1], #4
 8002bb4:	f840 cb04 	str.w	ip, [r0], #4
 8002bb8:	f851 cb04 	ldr.w	ip, [r1], #4
 8002bbc:	f840 cb04 	str.w	ip, [r0], #4
 8002bc0:	f851 cb04 	ldr.w	ip, [r1], #4
 8002bc4:	f840 cb04 	str.w	ip, [r0], #4
 8002bc8:	f851 cb04 	ldr.w	ip, [r1], #4
 8002bcc:	f840 cb04 	str.w	ip, [r0], #4
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	d1ed      	bne.n	8002bb0 <thumb2_memcpy+0x4>
 8002bd4:	f012 030f 	ands.w	r3, r2, #15
 8002bd8:	d005      	beq.n	8002be6 <thumb2_memcpy+0x3a>
 8002bda:	f811 cb01 	ldrb.w	ip, [r1], #1
 8002bde:	f800 cb01 	strb.w	ip, [r0], #1
 8002be2:	3b01      	subs	r3, #1
 8002be4:	d1f9      	bne.n	8002bda <thumb2_memcpy+0x2e>
 8002be6:	4770      	bx	lr
        "    bne     3$\n"

        // Return to caller.
        "4$: bx      lr\n"
    );
}
 8002be8:	bf00      	nop
	...

08002bec <__NVIC_EnableIRQ>:
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	db0b      	blt.n	8002c16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	f003 021f 	and.w	r2, r3, #31
 8002c04:	4907      	ldr	r1, [pc, #28]	; (8002c24 <__NVIC_EnableIRQ+0x38>)
 8002c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	e000e100 	.word	0xe000e100

08002c28 <__NVIC_DisableIRQ>:
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	db10      	blt.n	8002c5c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	f003 021f 	and.w	r2, r3, #31
 8002c40:	4909      	ldr	r1, [pc, #36]	; (8002c68 <__NVIC_DisableIRQ+0x40>)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	2001      	movs	r0, #1
 8002c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c4e:	3320      	adds	r3, #32
 8002c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002c54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002c58:	f3bf 8f6f 	isb	sy
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	e000e100 	.word	0xe000e100

08002c6c <Endpoint_WaitUntilReady>:
#define USB_STREAM_TIMEOUT_MS 100

extern volatile uint8_t zlp_flag;

uint8_t Endpoint_WaitUntilReady(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
 8002c72:	2364      	movs	r3, #100	; 0x64
 8002c74:	75fb      	strb	r3, [r7, #23]
			 *  \return Current USB frame number from the USB controller.
			 */
    
            static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE;
            static inline uint16_t USB_Device_GetFrameNumber(void) {
                return device.Driver->GetFrameNumber();
 8002c76:	4b44      	ldr	r3, [pc, #272]	; (8002d88 <Endpoint_WaitUntilReady+0x11c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7c:	4798      	blx	r3
 8002c7e:	4603      	mov	r3, r0
	#else
	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
	#endif

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();
 8002c80:	82bb      	strh	r3, [r7, #20]
	 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
	 */
	static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline uint8_t Endpoint_GetEndpointDirection(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002c82:	4b41      	ldr	r3, [pc, #260]	; (8002d88 <Endpoint_WaitUntilReady+0x11c>)
 8002c84:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002c88:	461a      	mov	r2, r3
 8002c8a:	232c      	movs	r3, #44	; 0x2c
 8002c8c:	fb03 f302 	mul.w	r3, r3, r2
 8002c90:	4a3d      	ldr	r2, [pc, #244]	; (8002d88 <Endpoint_WaitUntilReady+0x11c>)
 8002c92:	4413      	add	r3, r2
 8002c94:	3304      	adds	r3, #4
 8002c96:	60fb      	str	r3, [r7, #12]
		return ep->Address & ENDPOINT_DIR_MASK;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002ca0:	b2db      	uxtb	r3, r3

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 8002ca2:	2b80      	cmp	r3, #128	; 0x80
 8002ca4:	d122      	bne.n	8002cec <Endpoint_WaitUntilReady+0x80>
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002ca6:	4b38      	ldr	r3, [pc, #224]	; (8002d88 <Endpoint_WaitUntilReady+0x11c>)
 8002ca8:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002cac:	461a      	mov	r2, r3
 8002cae:	232c      	movs	r3, #44	; 0x2c
 8002cb0:	fb03 f302 	mul.w	r3, r3, r2
 8002cb4:	4a34      	ldr	r2, [pc, #208]	; (8002d88 <Endpoint_WaitUntilReady+0x11c>)
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3304      	adds	r3, #4
 8002cba:	60bb      	str	r3, [r7, #8]
		return ep->InInUse == 0 && ep->IsEnabled;
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d108      	bne.n	8002cdc <Endpoint_WaitUntilReady+0x70>
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	791b      	ldrb	r3, [r3, #4]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <Endpoint_WaitUntilReady+0x70>
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e000      	b.n	8002cde <Endpoint_WaitUntilReady+0x72>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	b2db      	uxtb	r3, r3
		{
			if (Endpoint_IsINReady())
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d01a      	beq.n	8002d1e <Endpoint_WaitUntilReady+0xb2>
			  return ENDPOINT_READYWAIT_NoError;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	e048      	b.n	8002d7e <Endpoint_WaitUntilReady+0x112>
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002cec:	4b26      	ldr	r3, [pc, #152]	; (8002d88 <Endpoint_WaitUntilReady+0x11c>)
 8002cee:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	232c      	movs	r3, #44	; 0x2c
 8002cf6:	fb03 f302 	mul.w	r3, r3, r2
 8002cfa:	4a23      	ldr	r2, [pc, #140]	; (8002d88 <Endpoint_WaitUntilReady+0x11c>)
 8002cfc:	4413      	add	r3, r2
 8002cfe:	3304      	adds	r3, #4
 8002d00:	607b      	str	r3, [r7, #4]
		return ep->IsOutRecieved;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bf14      	ite	ne
 8002d10:	2301      	movne	r3, #1
 8002d12:	2300      	moveq	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <Endpoint_WaitUntilReady+0xb2>
			  return ENDPOINT_READYWAIT_NoError;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	e02f      	b.n	8002d7e <Endpoint_WaitUntilReady+0x112>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8002d1e:	4b1b      	ldr	r3, [pc, #108]	; (8002d8c <Endpoint_WaitUntilReady+0x120>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	74fb      	strb	r3, [r7, #19]

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8002d24:	7cfb      	ldrb	r3, [r7, #19]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <Endpoint_WaitUntilReady+0xc2>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e027      	b.n	8002d7e <Endpoint_WaitUntilReady+0x112>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8002d2e:	7cfb      	ldrb	r3, [r7, #19]
 8002d30:	2b05      	cmp	r3, #5
 8002d32:	d101      	bne.n	8002d38 <Endpoint_WaitUntilReady+0xcc>
		  return ENDPOINT_READYWAIT_BusSuspended;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e022      	b.n	8002d7e <Endpoint_WaitUntilReady+0x112>
	 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
	 */
	static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsStalled(void)
	{
		return device.Endpoints[device.CurrentEndpoint].IsHalted == 1 ? true : false;
 8002d38:	4b13      	ldr	r3, [pc, #76]	; (8002d88 <Endpoint_WaitUntilReady+0x11c>)
 8002d3a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4a11      	ldr	r2, [pc, #68]	; (8002d88 <Endpoint_WaitUntilReady+0x11c>)
 8002d42:	232c      	movs	r3, #44	; 0x2c
 8002d44:	fb03 f301 	mul.w	r3, r3, r1
 8002d48:	4413      	add	r3, r2
 8002d4a:	7a1b      	ldrb	r3, [r3, #8]
 8002d4c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002d50:	b2db      	uxtb	r3, r3
		else if (Endpoint_IsStalled())
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <Endpoint_WaitUntilReady+0xee>
		  return ENDPOINT_READYWAIT_EndpointStalled;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e011      	b.n	8002d7e <Endpoint_WaitUntilReady+0x112>
 8002d5a:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <Endpoint_WaitUntilReady+0x11c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d60:	4798      	blx	r3
 8002d62:	4603      	mov	r3, r0

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();
 8002d64:	823b      	strh	r3, [r7, #16]

		if (CurrentFrameNumber != PreviousFrameNumber)
 8002d66:	8a3a      	ldrh	r2, [r7, #16]
 8002d68:	8abb      	ldrh	r3, [r7, #20]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d089      	beq.n	8002c82 <Endpoint_WaitUntilReady+0x16>
		{
			PreviousFrameNumber = CurrentFrameNumber;
 8002d6e:	8a3b      	ldrh	r3, [r7, #16]
 8002d70:	82bb      	strh	r3, [r7, #20]

			if (!(TimeoutMSRem--))
 8002d72:	7dfb      	ldrb	r3, [r7, #23]
 8002d74:	1e5a      	subs	r2, r3, #1
 8002d76:	75fa      	strb	r2, [r7, #23]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d182      	bne.n	8002c82 <Endpoint_WaitUntilReady+0x16>
			  return ENDPOINT_READYWAIT_Timeout;
 8002d7c:	2304      	movs	r3, #4
		}
	}
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20000c0c 	.word	0x20000c0c
 8002d8c:	20000f59 	.word	0x20000f59

08002d90 <Endpoint_ClearOUT>:

void Endpoint_ClearOUT(void) {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002d96:	4b23      	ldr	r3, [pc, #140]	; (8002e24 <Endpoint_ClearOUT+0x94>)
 8002d98:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	232c      	movs	r3, #44	; 0x2c
 8002da0:	fb03 f302 	mul.w	r3, r3, r2
 8002da4:	4a1f      	ldr	r2, [pc, #124]	; (8002e24 <Endpoint_ClearOUT+0x94>)
 8002da6:	4413      	add	r3, r2
 8002da8:	3304      	adds	r3, #4
 8002daa:	607b      	str	r3, [r7, #4]
	/* if we have data left which isn't read yet, we leave this routine to not override it */
	if (ep->IsEnabled == 0)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	791b      	ldrb	r3, [r3, #4]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d02f      	beq.n	8002e1a <Endpoint_ClearOUT+0x8a>
		return;
	/* First Check whether we have data in the driver */
	ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 8002dba:	4b1a      	ldr	r3, [pc, #104]	; (8002e24 <Endpoint_ClearOUT+0x94>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	7810      	ldrb	r0, [r2, #0]
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6911      	ldr	r1, [r2, #16]
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6952      	ldr	r2, [r2, #20]
 8002dcc:	4798      	blx	r3
 8002dce:	4603      	mov	r3, r0
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	609a      	str	r2, [r3, #8]
	ep->OutOffset = 0;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	60da      	str	r2, [r3, #12]
	/* If we didn't request new data and all data has been read, request new */
	if (!ep->OutInUse && !ep->OutBytesAvailable) {
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d118      	bne.n	8002e1c <Endpoint_ClearOUT+0x8c>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d114      	bne.n	8002e1c <Endpoint_ClearOUT+0x8c>
		ep->OutInUse = true;
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	8893      	ldrh	r3, [r2, #4]
 8002df6:	f043 0308 	orr.w	r3, r3, #8
 8002dfa:	8093      	strh	r3, [r2, #4]
		ep->IsOutRecieved = 0;
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	8893      	ldrh	r3, [r2, #4]
 8002e00:	f36f 1345 	bfc	r3, #5, #1
 8002e04:	8093      	strh	r3, [r2, #4]
		device.Driver->EndpointReadStart(ep->Address,
 8002e06:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <Endpoint_ClearOUT+0x94>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	7810      	ldrb	r0, [r2, #0]
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6952      	ldr	r2, [r2, #20]
 8002e14:	4611      	mov	r1, r2
 8002e16:	4798      	blx	r3
 8002e18:	e000      	b.n	8002e1c <Endpoint_ClearOUT+0x8c>
		return;
 8002e1a:	bf00      	nop
				ep->OutBufferLength);
	}
}
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000c0c 	.word	0x20000c0c

08002e28 <Endpoint_ClearIN>:

void Endpoint_ClearIN(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002e2e:	4b38      	ldr	r3, [pc, #224]	; (8002f10 <Endpoint_ClearIN+0xe8>)
 8002e30:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002e34:	461a      	mov	r2, r3
 8002e36:	232c      	movs	r3, #44	; 0x2c
 8002e38:	fb03 f302 	mul.w	r3, r3, r2
 8002e3c:	4a34      	ldr	r2, [pc, #208]	; (8002f10 <Endpoint_ClearIN+0xe8>)
 8002e3e:	4413      	add	r3, r2
 8002e40:	3304      	adds	r3, #4
 8002e42:	607b      	str	r3, [r7, #4]
	int32_t data_count;
	/* don't clear if in use or not enabled */
	if (ep->InInUse == 1 || ep->IsEnabled == 0)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d059      	beq.n	8002f06 <Endpoint_ClearIN+0xde>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	791b      	ldrb	r3, [r3, #4]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d052      	beq.n	8002f06 <Endpoint_ClearIN+0xde>
		return;
	ep->InInUse = true;
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	8893      	ldrh	r3, [r2, #4]
 8002e64:	f043 0310 	orr.w	r3, r3, #16
 8002e68:	8093      	strh	r3, [r2, #4]
	/* store transfer information to loop over, if underlying is smaller */
	ep->InDataBuffer = ep->InBuffer;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69da      	ldr	r2, [r3, #28]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	629a      	str	r2, [r3, #40]	; 0x28
	ep->InDataLeft = ep->InBytesAvailable;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699a      	ldr	r2, [r3, #24]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	625a      	str	r2, [r3, #36]	; 0x24
	ep->InBytesAvailable = 0;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	619a      	str	r2, [r3, #24]
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
 8002e80:	206b      	movs	r0, #107	; 0x6b
 8002e82:	f7ff fed1 	bl	8002c28 <__NVIC_DisableIRQ>
	data_count = device.Driver->EndpointWrite(ep->Address,
 8002e86:	4b22      	ldr	r3, [pc, #136]	; (8002f10 <Endpoint_ClearIN+0xe8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	7810      	ldrb	r0, [r2, #0]
			ep->InDataBuffer,ep->InDataLeft);
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6a91      	ldr	r1, [r2, #40]	; 0x28
	data_count = device.Driver->EndpointWrite(ep->Address,
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e98:	4798      	blx	r3
 8002e9a:	6038      	str	r0, [r7, #0]
	ep->InDataBuffer += data_count;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	441a      	add	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	629a      	str	r2, [r3, #40]	; 0x28
	ep->InDataLeft -= data_count;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	1ad2      	subs	r2, r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	625a      	str	r2, [r3, #36]	; 0x24
	NVIC_EnableIRQ(USB0_0_IRQn);
 8002eb4:	206b      	movs	r0, #107	; 0x6b
 8002eb6:	f7ff fe99 	bl	8002bec <__NVIC_EnableIRQ>
	if((zlp_flag == true) && (ep->Number != 0))
 8002eba:	4b16      	ldr	r3, [pc, #88]	; (8002f14 <Endpoint_ClearIN+0xec>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d121      	bne.n	8002f08 <Endpoint_ClearIN+0xe0>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d01a      	beq.n	8002f08 <Endpoint_ClearIN+0xe0>
	{
		/*Send a ZLP from here*/
	  while(ep->InInUse)
 8002ed2:	bf00      	nop
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f8      	bne.n	8002ed4 <Endpoint_ClearIN+0xac>
	  {
		;
	  }
	  ep->InInUse = true;
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	8893      	ldrh	r3, [r2, #4]
 8002ee6:	f043 0310 	orr.w	r3, r3, #16
 8002eea:	8093      	strh	r3, [r2, #4]
	  device.Driver->EndpointWrite(ep->Address,
 8002eec:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <Endpoint_ClearIN+0xe8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	7810      	ldrb	r0, [r2, #0]
	  			ep->InDataBuffer,0);
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6a91      	ldr	r1, [r2, #40]	; 0x28
	  device.Driver->EndpointWrite(ep->Address,
 8002efa:	2200      	movs	r2, #0
 8002efc:	4798      	blx	r3
	  zlp_flag = false;
 8002efe:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <Endpoint_ClearIN+0xec>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	701a      	strb	r2, [r3, #0]
 8002f04:	e000      	b.n	8002f08 <Endpoint_ClearIN+0xe0>
		return;
 8002f06:	bf00      	nop
	}
}
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000c0c 	.word	0x20000c0c
 8002f14:	20000500 	.word	0x20000500

08002f18 <Endpoint_IsReadWriteAllowed>:

bool Endpoint_IsReadWriteAllowed(void) {
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002f1e:	4b16      	ldr	r3, [pc, #88]	; (8002f78 <Endpoint_IsReadWriteAllowed+0x60>)
 8002f20:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002f24:	461a      	mov	r2, r3
 8002f26:	232c      	movs	r3, #44	; 0x2c
 8002f28:	fb03 f302 	mul.w	r3, r3, r2
 8002f2c:	4a12      	ldr	r2, [pc, #72]	; (8002f78 <Endpoint_IsReadWriteAllowed+0x60>)
 8002f2e:	4413      	add	r3, r2
 8002f30:	3304      	adds	r3, #4
 8002f32:	603b      	str	r3, [r7, #0]
	bool Retval = false;
 8002f34:	2300      	movs	r3, #0
 8002f36:	71fb      	strb	r3, [r7, #7]

	if(EndPoint->Direction)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d009      	beq.n	8002f5a <Endpoint_IsReadWriteAllowed+0x42>
	{
		Retval = (EndPoint->InBytesAvailable < EndPoint->InBufferLength) ? true : false;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	699a      	ldr	r2, [r3, #24]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	bf34      	ite	cc
 8002f52:	2301      	movcc	r3, #1
 8002f54:	2300      	movcs	r3, #0
 8002f56:	71fb      	strb	r3, [r7, #7]
 8002f58:	e006      	b.n	8002f68 <Endpoint_IsReadWriteAllowed+0x50>
	}
	else
	{
		Retval = (EndPoint->OutBytesAvailable > 0) ? true : false;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	bf14      	ite	ne
 8002f62:	2301      	movne	r3, #1
 8002f64:	2300      	moveq	r3, #0
 8002f66:	71fb      	strb	r3, [r7, #7]
	}
	return Retval;
 8002f68:	79fb      	ldrb	r3, [r7, #7]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	20000c0c 	.word	0x20000c0c

08002f7c <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data) {
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	71fb      	strb	r3, [r7, #7]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002f86:	4b16      	ldr	r3, [pc, #88]	; (8002fe0 <Endpoint_Write_8+0x64>)
 8002f88:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	232c      	movs	r3, #44	; 0x2c
 8002f90:	fb03 f302 	mul.w	r3, r3, r2
 8002f94:	4a12      	ldr	r2, [pc, #72]	; (8002fe0 <Endpoint_Write_8+0x64>)
 8002f96:	4413      	add	r3, r2
 8002f98:	3304      	adds	r3, #4
 8002f9a:	60bb      	str	r3, [r7, #8]
	bool Success = false;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	73fb      	strb	r3, [r7, #15]

	 do
	  {
	    if(EndPoint->InBytesAvailable < EndPoint->InBufferLength)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	699a      	ldr	r2, [r3, #24]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d20d      	bcs.n	8002fc8 <Endpoint_Write_8+0x4c>
	    {
	      EndPoint->InBuffer[EndPoint->InBytesAvailable] = Data;
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	69da      	ldr	r2, [r3, #28]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	79fa      	ldrb	r2, [r7, #7]
 8002fb8:	701a      	strb	r2, [r3, #0]
	      EndPoint->InBytesAvailable++;
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	619a      	str	r2, [r3, #24]

	      Success = true;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	73fb      	strb	r3, [r7, #15]
	    }
	  }while(!Success);
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
 8002fca:	f083 0301 	eor.w	r3, r3, #1
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1e5      	bne.n	8002fa0 <Endpoint_Write_8+0x24>
}
 8002fd4:	bf00      	nop
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	20000c0c 	.word	0x20000c0c

08002fe4 <Endpoint_Read_8>:

uint8_t Endpoint_Read_8(void) {
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002fea:	4b19      	ldr	r3, [pc, #100]	; (8003050 <Endpoint_Read_8+0x6c>)
 8002fec:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	232c      	movs	r3, #44	; 0x2c
 8002ff4:	fb03 f302 	mul.w	r3, r3, r2
 8002ff8:	4a15      	ldr	r2, [pc, #84]	; (8003050 <Endpoint_Read_8+0x6c>)
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	603b      	str	r3, [r7, #0]
	bool Success = false;
 8003000:	2300      	movs	r3, #0
 8003002:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	71bb      	strb	r3, [r7, #6]
	 do
	  {
		if(EndPoint->OutBytesAvailable > 0)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d012      	beq.n	8003036 <Endpoint_Read_8+0x52>
		{
          data = EndPoint->OutBuffer[EndPoint->OutOffset];
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	4413      	add	r3, r2
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	71bb      	strb	r3, [r7, #6]
          EndPoint->OutOffset++;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	60da      	str	r2, [r3, #12]
          EndPoint->OutBytesAvailable--;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	1e5a      	subs	r2, r3, #1
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	609a      	str	r2, [r3, #8]
		  Success = true;
 8003032:	2301      	movs	r3, #1
 8003034:	71fb      	strb	r3, [r7, #7]
		}
	  }while(!Success);
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	f083 0301 	eor.w	r3, r3, #1
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1e2      	bne.n	8003008 <Endpoint_Read_8+0x24>
	 return data;
 8003042:	79bb      	ldrb	r3, [r7, #6]
}
 8003044:	4618      	mov	r0, r3
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	20000c0c 	.word	0x20000c0c

08003054 <Endpoint_Write_32_LE>:

void Endpoint_Write_32_LE(const uint32_t Data) {
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 800305c:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <Endpoint_Write_32_LE+0x64>)
 800305e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003062:	461a      	mov	r2, r3
 8003064:	232c      	movs	r3, #44	; 0x2c
 8003066:	fb03 f302 	mul.w	r3, r3, r2
 800306a:	4a13      	ldr	r2, [pc, #76]	; (80030b8 <Endpoint_Write_32_LE+0x64>)
 800306c:	4413      	add	r3, r2
 800306e:	3304      	adds	r3, #4
 8003070:	60bb      	str	r3, [r7, #8]
	bool Success = false;
 8003072:	2300      	movs	r3, #0
 8003074:	73fb      	strb	r3, [r7, #15]

	do {
		if(EndPoint->InBytesAvailable < (EndPoint->InBufferLength - 3)) {
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	699a      	ldr	r2, [r3, #24]
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	3b03      	subs	r3, #3
 8003080:	429a      	cmp	r2, r3
 8003082:	d20d      	bcs.n	80030a0 <Endpoint_Write_32_LE+0x4c>
			*(uint32_t*)(EndPoint->InBuffer + EndPoint->InBytesAvailable) = Data;
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	69da      	ldr	r2, [r3, #28]
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	4413      	add	r3, r2
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	601a      	str	r2, [r3, #0]
			EndPoint->InBytesAvailable+=4;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	1d1a      	adds	r2, r3, #4
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	619a      	str	r2, [r3, #24]

			Success = true;
 800309c:	2301      	movs	r3, #1
 800309e:	73fb      	strb	r3, [r7, #15]
		}
	}while(!Success);
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	f083 0301 	eor.w	r3, r3, #1
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1e4      	bne.n	8003076 <Endpoint_Write_32_LE+0x22>
}
 80030ac:	bf00      	nop
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	20000c0c 	.word	0x20000c0c

080030bc <Endpoint_Read_32_LE>:

uint32_t Endpoint_Read_32_LE(void) {
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 80030c2:	4b19      	ldr	r3, [pc, #100]	; (8003128 <Endpoint_Read_32_LE+0x6c>)
 80030c4:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80030c8:	461a      	mov	r2, r3
 80030ca:	232c      	movs	r3, #44	; 0x2c
 80030cc:	fb03 f302 	mul.w	r3, r3, r2
 80030d0:	4a15      	ldr	r2, [pc, #84]	; (8003128 <Endpoint_Read_32_LE+0x6c>)
 80030d2:	4413      	add	r3, r2
 80030d4:	3304      	adds	r3, #4
 80030d6:	607b      	str	r3, [r7, #4]
	bool Success = false;
 80030d8:	2300      	movs	r3, #0
 80030da:	73fb      	strb	r3, [r7, #15]
	uint32_t data = 0;
 80030dc:	2300      	movs	r3, #0
 80030de:	60bb      	str	r3, [r7, #8]

	do {
		if(EndPoint->OutBytesAvailable > 3) {
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d912      	bls.n	800310e <Endpoint_Read_32_LE+0x52>
			data = *(uint32_t*)(EndPoint->OutBuffer + EndPoint->OutOffset);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4413      	add	r3, r2
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	60bb      	str	r3, [r7, #8]
			EndPoint->OutOffset+=4;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	1d1a      	adds	r2, r3, #4
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	60da      	str	r2, [r3, #12]
			EndPoint->OutBytesAvailable-=4;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	1f1a      	subs	r2, r3, #4
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	609a      	str	r2, [r3, #8]

			Success = true;
 800310a:	2301      	movs	r3, #1
 800310c:	73fb      	strb	r3, [r7, #15]
		}
	} while(!Success);
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	f083 0301 	eor.w	r3, r3, #1
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1e2      	bne.n	80030e0 <Endpoint_Read_32_LE+0x24>
	return data;
 800311a:	68bb      	ldr	r3, [r7, #8]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	20000c0c 	.word	0x20000c0c

0800312c <Endpoint_ConfigureEndpointTable>:

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
 800312c:	b590      	push	{r4, r7, lr}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	460b      	mov	r3, r1
 8003136:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
 8003138:	2300      	movs	r3, #0
 800313a:	73fb      	strb	r3, [r7, #15]
 800313c:	e091      	b.n	8003262 <Endpoint_ConfigureEndpointTable+0x136>
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
 800313e:	7bfa      	ldrb	r2, [r7, #15]
 8003140:	4613      	mov	r3, r2
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	4413      	add	r3, r2
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	461a      	mov	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4413      	add	r3, r2
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	f003 030f 	and.w	r3, r3, #15
 8003154:	73bb      	strb	r3, [r7, #14]
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address, (XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type, Table[i].Size) != XMC_USBD_STATUS_OK)
 8003156:	4b48      	ldr	r3, [pc, #288]	; (8003278 <Endpoint_ConfigureEndpointTable+0x14c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	69dc      	ldr	r4, [r3, #28]
 800315c:	7bfa      	ldrb	r2, [r7, #15]
 800315e:	4613      	mov	r3, r2
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	4413      	add	r3, r2
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	461a      	mov	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4413      	add	r3, r2
 800316c:	7818      	ldrb	r0, [r3, #0]
 800316e:	7bfa      	ldrb	r2, [r7, #15]
 8003170:	4613      	mov	r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	4413      	add	r3, r2
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	461a      	mov	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4413      	add	r3, r2
 800317e:	7919      	ldrb	r1, [r3, #4]
 8003180:	7bfa      	ldrb	r2, [r7, #15]
 8003182:	4613      	mov	r3, r2
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	4413      	add	r3, r2
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	461a      	mov	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4413      	add	r3, r2
 8003190:	885b      	ldrh	r3, [r3, #2]
 8003192:	461a      	mov	r2, r3
 8003194:	47a0      	blx	r4
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <Endpoint_ConfigureEndpointTable+0x74>
			return false;
 800319c:	2300      	movs	r3, #0
 800319e:	e066      	b.n	800326e <Endpoint_ConfigureEndpointTable+0x142>
		/* Set device core values */
		device.Endpoints[Number].Address = Table[i].Address;
 80031a0:	7bfa      	ldrb	r2, [r7, #15]
 80031a2:	4613      	mov	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	4413      	add	r3, r2
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	461a      	mov	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	441a      	add	r2, r3
 80031b0:	7bbb      	ldrb	r3, [r7, #14]
 80031b2:	7810      	ldrb	r0, [r2, #0]
 80031b4:	4a30      	ldr	r2, [pc, #192]	; (8003278 <Endpoint_ConfigureEndpointTable+0x14c>)
 80031b6:	212c      	movs	r1, #44	; 0x2c
 80031b8:	fb01 f303 	mul.w	r3, r1, r3
 80031bc:	4413      	add	r3, r2
 80031be:	3304      	adds	r3, #4
 80031c0:	4602      	mov	r2, r0
 80031c2:	701a      	strb	r2, [r3, #0]
		device.Endpoints[Number].MaxPacketSize = Table[i].Size;
 80031c4:	7bfa      	ldrb	r2, [r7, #15]
 80031c6:	4613      	mov	r3, r2
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	4413      	add	r3, r2
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	461a      	mov	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4413      	add	r3, r2
 80031d4:	885a      	ldrh	r2, [r3, #2]
 80031d6:	7bbb      	ldrb	r3, [r7, #14]
 80031d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031dc:	b2d1      	uxtb	r1, r2
 80031de:	4a26      	ldr	r2, [pc, #152]	; (8003278 <Endpoint_ConfigureEndpointTable+0x14c>)
 80031e0:	202c      	movs	r0, #44	; 0x2c
 80031e2:	fb00 f303 	mul.w	r3, r0, r3
 80031e6:	441a      	add	r2, r3
 80031e8:	8913      	ldrh	r3, [r2, #8]
 80031ea:	f361 138c 	bfi	r3, r1, #6, #7
 80031ee:	8113      	strh	r3, [r2, #8]
		device.Endpoints[Number].IsConfigured = 1;
 80031f0:	7bbb      	ldrb	r3, [r7, #14]
 80031f2:	4a21      	ldr	r2, [pc, #132]	; (8003278 <Endpoint_ConfigureEndpointTable+0x14c>)
 80031f4:	212c      	movs	r1, #44	; 0x2c
 80031f6:	fb01 f303 	mul.w	r3, r1, r3
 80031fa:	441a      	add	r2, r3
 80031fc:	7a13      	ldrb	r3, [r2, #8]
 80031fe:	f043 0301 	orr.w	r3, r3, #1
 8003202:	7213      	strb	r3, [r2, #8]
		device.Endpoints[Number].IsEnabled = 1;
 8003204:	7bbb      	ldrb	r3, [r7, #14]
 8003206:	4a1c      	ldr	r2, [pc, #112]	; (8003278 <Endpoint_ConfigureEndpointTable+0x14c>)
 8003208:	212c      	movs	r1, #44	; 0x2c
 800320a:	fb01 f303 	mul.w	r3, r1, r3
 800320e:	441a      	add	r2, r3
 8003210:	7a13      	ldrb	r3, [r2, #8]
 8003212:	f043 0302 	orr.w	r3, r3, #2
 8003216:	7213      	strb	r3, [r2, #8]
		/* Start read for out endpoints */
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
 8003218:	7bfa      	ldrb	r2, [r7, #15]
 800321a:	4613      	mov	r3, r2
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	4413      	add	r3, r2
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	461a      	mov	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4413      	add	r3, r2
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	b25b      	sxtb	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	db15      	blt.n	800325c <Endpoint_ConfigureEndpointTable+0x130>
			device.Driver->EndpointReadStart(Table[i].Address,
 8003230:	4b11      	ldr	r3, [pc, #68]	; (8003278 <Endpoint_ConfigureEndpointTable+0x14c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8003236:	7bfa      	ldrb	r2, [r7, #15]
 8003238:	4613      	mov	r3, r2
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	4413      	add	r3, r2
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	461a      	mov	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4413      	add	r3, r2
 8003246:	7818      	ldrb	r0, [r3, #0]
 8003248:	7bbb      	ldrb	r3, [r7, #14]
 800324a:	4a0b      	ldr	r2, [pc, #44]	; (8003278 <Endpoint_ConfigureEndpointTable+0x14c>)
 800324c:	212c      	movs	r1, #44	; 0x2c
 800324e:	fb01 f303 	mul.w	r3, r1, r3
 8003252:	4413      	add	r3, r2
 8003254:	3318      	adds	r3, #24
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4619      	mov	r1, r3
 800325a:	47a0      	blx	r4
	for (i=0;i<Entries;i++) {
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	3301      	adds	r3, #1
 8003260:	73fb      	strb	r3, [r7, #15]
 8003262:	7bfa      	ldrb	r2, [r7, #15]
 8003264:	78fb      	ldrb	r3, [r7, #3]
 8003266:	429a      	cmp	r2, r3
 8003268:	f4ff af69 	bcc.w	800313e <Endpoint_ConfigureEndpointTable+0x12>
					device.Endpoints[Number].OutBufferLength);
	}
	return true;
 800326c:	2301      	movs	r3, #1
}
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	bd90      	pop	{r4, r7, pc}
 8003276:	bf00      	nop
 8003278:	20000c0c 	.word	0x20000c0c

0800327c <Endpoint_Write_Stream_LE>:

#if defined(USB_CAN_BE_DEVICE)

#include "EndpointStream_XMC4000.h"

uint8_t Endpoint_Write_Stream_LE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed)  {
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	460b      	mov	r3, r1
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 800328a:	4b3f      	ldr	r3, [pc, #252]	; (8003388 <Endpoint_Write_Stream_LE+0x10c>)
 800328c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003290:	461a      	mov	r2, r3
 8003292:	232c      	movs	r3, #44	; 0x2c
 8003294:	fb03 f302 	mul.w	r3, r3, r2
 8003298:	4a3b      	ldr	r2, [pc, #236]	; (8003388 <Endpoint_Write_Stream_LE+0x10c>)
 800329a:	4413      	add	r3, r2
 800329c:	3304      	adds	r3, #4
 800329e:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	82fb      	strh	r3, [r7, #22]
	uint16_t BytesTransfered = 0;
 80032a4:	2300      	movs	r3, #0
 80032a6:	83fb      	strh	r3, [r7, #30]
	uint8_t ErrorCode;
	uint16_t prev_length = 0;
 80032a8:	2300      	movs	r3, #0
 80032aa:	83bb      	strh	r3, [r7, #28]
	if (BytesProcessed!=NULL) {
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d052      	beq.n	8003358 <Endpoint_Write_Stream_LE+0xdc>
		Length -= *BytesProcessed;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	897a      	ldrh	r2, [r7, #10]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	83fb      	strh	r3, [r7, #30]
	}

	while (Length) {
 80032c2:	e049      	b.n	8003358 <Endpoint_Write_Stream_LE+0xdc>
		if (ep->InInUse)
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d000      	beq.n	80032d4 <Endpoint_Write_Stream_LE+0x58>
			continue;
 80032d2:	e041      	b.n	8003358 <Endpoint_Write_Stream_LE+0xdc>
		if (Endpoint_IsReadWriteAllowed()) {
 80032d4:	f7ff fe20 	bl	8002f18 <Endpoint_IsReadWriteAllowed>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d029      	beq.n	8003332 <Endpoint_Write_Stream_LE+0xb6>
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	6a1a      	ldr	r2, [r3, #32]
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	1ad2      	subs	r2, r2, r3
 80032e8:	897b      	ldrh	r3, [r7, #10]
 80032ea:	4293      	cmp	r3, r2
 80032ec:	bf28      	it	cs
 80032ee:	4613      	movcs	r3, r2
 80032f0:	82fb      	strh	r3, [r7, #22]
			MEMCPY((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable), (void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	461a      	mov	r2, r3
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	4413      	add	r3, r2
 80032fe:	4618      	mov	r0, r3
 8003300:	8bfa      	ldrh	r2, [r7, #30]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4413      	add	r3, r2
 8003306:	4619      	mov	r1, r3
 8003308:	8afb      	ldrh	r3, [r7, #22]
 800330a:	461a      	mov	r2, r3
 800330c:	f7ff fc4e 	bl	8002bac <thumb2_memcpy>
			ep->InBytesAvailable += Bytes;
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	699a      	ldr	r2, [r3, #24]
 8003314:	8afb      	ldrh	r3, [r7, #22]
 8003316:	441a      	add	r2, r3
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	619a      	str	r2, [r3, #24]
			BytesTransfered += Bytes;
 800331c:	8bfa      	ldrh	r2, [r7, #30]
 800331e:	8afb      	ldrh	r3, [r7, #22]
 8003320:	4413      	add	r3, r2
 8003322:	83fb      	strh	r3, [r7, #30]
			prev_length = Length;
 8003324:	897b      	ldrh	r3, [r7, #10]
 8003326:	83bb      	strh	r3, [r7, #28]
			Length -= Bytes;
 8003328:	897a      	ldrh	r2, [r7, #10]
 800332a:	8afb      	ldrh	r3, [r7, #22]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	817b      	strh	r3, [r7, #10]
 8003330:	e012      	b.n	8003358 <Endpoint_Write_Stream_LE+0xdc>
		}
		else {
			Endpoint_ClearIN();
 8003332:	f7ff fd79 	bl	8002e28 <Endpoint_ClearIN>
			if (BytesProcessed!=NULL) {
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d004      	beq.n	8003346 <Endpoint_Write_Stream_LE+0xca>
				*BytesProcessed = BytesTransfered;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	8bfa      	ldrh	r2, [r7, #30]
 8003340:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8003342:	2305      	movs	r3, #5
 8003344:	e01b      	b.n	800337e <Endpoint_Write_Stream_LE+0x102>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8003346:	f7ff fc91 	bl	8002c6c <Endpoint_WaitUntilReady>
 800334a:	4603      	mov	r3, r0
 800334c:	757b      	strb	r3, [r7, #21]
 800334e:	7d7b      	ldrb	r3, [r7, #21]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <Endpoint_Write_Stream_LE+0xdc>
				return ErrorCode;
 8003354:	7d7b      	ldrb	r3, [r7, #21]
 8003356:	e012      	b.n	800337e <Endpoint_Write_Stream_LE+0x102>
	while (Length) {
 8003358:	897b      	ldrh	r3, [r7, #10]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1b2      	bne.n	80032c4 <Endpoint_Write_Stream_LE+0x48>


		}
	}
	
	if((Length == 0) && (prev_length == ep->MaxPacketSize))
 800335e:	897b      	ldrh	r3, [r7, #10]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10b      	bne.n	800337c <Endpoint_Write_Stream_LE+0x100>
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	889b      	ldrh	r3, [r3, #4]
 8003368:	f3c3 1386 	ubfx	r3, r3, #6, #7
 800336c:	b2db      	uxtb	r3, r3
 800336e:	b29b      	uxth	r3, r3
 8003370:	8bba      	ldrh	r2, [r7, #28]
 8003372:	429a      	cmp	r2, r3
 8003374:	d102      	bne.n	800337c <Endpoint_Write_Stream_LE+0x100>
	{
	   zlp_flag = true;
 8003376:	4b05      	ldr	r3, [pc, #20]	; (800338c <Endpoint_Write_Stream_LE+0x110>)
 8003378:	2201      	movs	r2, #1
 800337a:	701a      	strb	r2, [r3, #0]
	}
	return ENDPOINT_RWSTREAM_NoError;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3720      	adds	r7, #32
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20000c0c 	.word	0x20000c0c
 800338c:	20000500 	.word	0x20000500

08003390 <SwapCopy>:

void SwapCopy(void *const Dest, const void *const Src,uint32_t Length) {
 8003390:	b480      	push	{r7}
 8003392:	b087      	sub	sp, #28
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
	while(i<Length) {
 80033a0:	e00e      	b.n	80033c0 <SwapCopy+0x30>
		*(uint8_t*)((uint32_t)Dest + (Length - 1 - i)) = *(uint8_t*)((uint32_t)Src + i);
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	4413      	add	r3, r2
 80033a8:	4619      	mov	r1, r3
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	1ad2      	subs	r2, r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4413      	add	r3, r2
 80033b4:	3b01      	subs	r3, #1
 80033b6:	780a      	ldrb	r2, [r1, #0]
 80033b8:	701a      	strb	r2, [r3, #0]
		i++;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	3301      	adds	r3, #1
 80033be:	617b      	str	r3, [r7, #20]
	while(i<Length) {
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d3ec      	bcc.n	80033a2 <SwapCopy+0x12>
	}
}
 80033c8:	bf00      	nop
 80033ca:	371c      	adds	r7, #28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <Endpoint_Write_Stream_BE>:
uint8_t	Endpoint_Write_Stream_BE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b088      	sub	sp, #32
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	460b      	mov	r3, r1
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 80033e2:	4b35      	ldr	r3, [pc, #212]	; (80034b8 <Endpoint_Write_Stream_BE+0xe4>)
 80033e4:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80033e8:	461a      	mov	r2, r3
 80033ea:	232c      	movs	r3, #44	; 0x2c
 80033ec:	fb03 f302 	mul.w	r3, r3, r2
 80033f0:	4a31      	ldr	r2, [pc, #196]	; (80034b8 <Endpoint_Write_Stream_BE+0xe4>)
 80033f2:	4413      	add	r3, r2
 80033f4:	3304      	adds	r3, #4
 80033f6:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 80033f8:	2300      	movs	r3, #0
 80033fa:	82fb      	strh	r3, [r7, #22]
	uint16_t BytesTransfered = 0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	83fb      	strh	r3, [r7, #30]
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d050      	beq.n	80034a8 <Endpoint_Write_Stream_BE+0xd4>
		Length -= *BytesProcessed;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	897a      	ldrh	r2, [r7, #10]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	83fb      	strh	r3, [r7, #30]
	}

	while (Length) {
 8003416:	e047      	b.n	80034a8 <Endpoint_Write_Stream_BE+0xd4>
		if (ep->InInUse)
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d000      	beq.n	8003428 <Endpoint_Write_Stream_BE+0x54>
			continue;
 8003426:	e03f      	b.n	80034a8 <Endpoint_Write_Stream_BE+0xd4>
		if (Endpoint_IsReadWriteAllowed()) {
 8003428:	f7ff fd76 	bl	8002f18 <Endpoint_IsReadWriteAllowed>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d027      	beq.n	8003482 <Endpoint_Write_Stream_BE+0xae>
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	6a1a      	ldr	r2, [r3, #32]
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	1ad2      	subs	r2, r2, r3
 800343c:	897b      	ldrh	r3, [r7, #10]
 800343e:	4293      	cmp	r3, r2
 8003440:	bf28      	it	cs
 8003442:	4613      	movcs	r3, r2
 8003444:	82fb      	strh	r3, [r7, #22]
			SwapCopy((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable),(void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	461a      	mov	r2, r3
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	4413      	add	r3, r2
 8003452:	4618      	mov	r0, r3
 8003454:	8bfa      	ldrh	r2, [r7, #30]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4413      	add	r3, r2
 800345a:	4619      	mov	r1, r3
 800345c:	8afb      	ldrh	r3, [r7, #22]
 800345e:	461a      	mov	r2, r3
 8003460:	f7ff ff96 	bl	8003390 <SwapCopy>
			ep->InBytesAvailable += Bytes;
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	699a      	ldr	r2, [r3, #24]
 8003468:	8afb      	ldrh	r3, [r7, #22]
 800346a:	441a      	add	r2, r3
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	619a      	str	r2, [r3, #24]
			BytesTransfered += Bytes;
 8003470:	8bfa      	ldrh	r2, [r7, #30]
 8003472:	8afb      	ldrh	r3, [r7, #22]
 8003474:	4413      	add	r3, r2
 8003476:	83fb      	strh	r3, [r7, #30]
			Length -= Bytes;
 8003478:	897a      	ldrh	r2, [r7, #10]
 800347a:	8afb      	ldrh	r3, [r7, #22]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	817b      	strh	r3, [r7, #10]
 8003480:	e012      	b.n	80034a8 <Endpoint_Write_Stream_BE+0xd4>
		}
		else {
			Endpoint_ClearIN();
 8003482:	f7ff fcd1 	bl	8002e28 <Endpoint_ClearIN>
			if (BytesProcessed!=NULL) {
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d004      	beq.n	8003496 <Endpoint_Write_Stream_BE+0xc2>
				*BytesProcessed = BytesTransfered;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	8bfa      	ldrh	r2, [r7, #30]
 8003490:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8003492:	2305      	movs	r3, #5
 8003494:	e00c      	b.n	80034b0 <Endpoint_Write_Stream_BE+0xdc>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8003496:	f7ff fbe9 	bl	8002c6c <Endpoint_WaitUntilReady>
 800349a:	4603      	mov	r3, r0
 800349c:	757b      	strb	r3, [r7, #21]
 800349e:	7d7b      	ldrb	r3, [r7, #21]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <Endpoint_Write_Stream_BE+0xd4>
				return ErrorCode;
 80034a4:	7d7b      	ldrb	r3, [r7, #21]
 80034a6:	e003      	b.n	80034b0 <Endpoint_Write_Stream_BE+0xdc>
	while (Length) {
 80034a8:	897b      	ldrh	r3, [r7, #10]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1b4      	bne.n	8003418 <Endpoint_Write_Stream_BE+0x44>
			}


		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3720      	adds	r7, #32
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	20000c0c 	.word	0x20000c0c

080034bc <Endpoint_Read_Stream_LE>:

uint8_t	Endpoint_Read_Stream_LE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 80034bc:	b580      	push	{r7, lr}
 80034be:	b088      	sub	sp, #32
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	460b      	mov	r3, r1
 80034c6:	607a      	str	r2, [r7, #4]
 80034c8:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 80034ca:	4b37      	ldr	r3, [pc, #220]	; (80035a8 <Endpoint_Read_Stream_LE+0xec>)
 80034cc:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80034d0:	461a      	mov	r2, r3
 80034d2:	232c      	movs	r3, #44	; 0x2c
 80034d4:	fb03 f302 	mul.w	r3, r3, r2
 80034d8:	4a33      	ldr	r2, [pc, #204]	; (80035a8 <Endpoint_Read_Stream_LE+0xec>)
 80034da:	4413      	add	r3, r2
 80034dc:	3304      	adds	r3, #4
 80034de:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	82fb      	strh	r3, [r7, #22]
	uint16_t BytesTransfered = 0;
 80034e4:	2300      	movs	r3, #0
 80034e6:	83fb      	strh	r3, [r7, #30]
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d053      	beq.n	8003596 <Endpoint_Read_Stream_LE+0xda>
		Length -= *BytesProcessed;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	897a      	ldrh	r2, [r7, #10]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	83fb      	strh	r3, [r7, #30]
	}

	while (Length) {
 80034fe:	e04a      	b.n	8003596 <Endpoint_Read_Stream_LE+0xda>
		if (ep->OutInUse)
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d000      	beq.n	8003510 <Endpoint_Read_Stream_LE+0x54>
			continue;
 800350e:	e042      	b.n	8003596 <Endpoint_Read_Stream_LE+0xda>
		if (Endpoint_IsReadWriteAllowed()) {
 8003510:	f7ff fd02 	bl	8002f18 <Endpoint_IsReadWriteAllowed>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d02a      	beq.n	8003570 <Endpoint_Read_Stream_LE+0xb4>
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	897b      	ldrh	r3, [r7, #10]
 8003520:	4293      	cmp	r3, r2
 8003522:	bf28      	it	cs
 8003524:	4613      	movcs	r3, r2
 8003526:	82fb      	strh	r3, [r7, #22]
			MEMCPY((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 8003528:	8bfa      	ldrh	r2, [r7, #30]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	4413      	add	r3, r2
 800352e:	4618      	mov	r0, r3
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	461a      	mov	r2, r3
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	4413      	add	r3, r2
 800353c:	4619      	mov	r1, r3
 800353e:	8afb      	ldrh	r3, [r7, #22]
 8003540:	461a      	mov	r2, r3
 8003542:	f7ff fb33 	bl	8002bac <thumb2_memcpy>
			ep->OutBytesAvailable -= Bytes;
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	8afb      	ldrh	r3, [r7, #22]
 800354c:	1ad2      	subs	r2, r2, r3
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	609a      	str	r2, [r3, #8]
			ep->OutOffset += Bytes;
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	8afb      	ldrh	r3, [r7, #22]
 8003558:	441a      	add	r2, r3
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	60da      	str	r2, [r3, #12]
			BytesTransfered += Bytes;
 800355e:	8bfa      	ldrh	r2, [r7, #30]
 8003560:	8afb      	ldrh	r3, [r7, #22]
 8003562:	4413      	add	r3, r2
 8003564:	83fb      	strh	r3, [r7, #30]
			Length -= Bytes;
 8003566:	897a      	ldrh	r2, [r7, #10]
 8003568:	8afb      	ldrh	r3, [r7, #22]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	817b      	strh	r3, [r7, #10]
 800356e:	e012      	b.n	8003596 <Endpoint_Read_Stream_LE+0xda>
		}
		else {
			Endpoint_ClearOUT();
 8003570:	f7ff fc0e 	bl	8002d90 <Endpoint_ClearOUT>
			if (BytesProcessed!=NULL) {
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d004      	beq.n	8003584 <Endpoint_Read_Stream_LE+0xc8>
				*BytesProcessed = BytesTransfered;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	8bfa      	ldrh	r2, [r7, #30]
 800357e:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8003580:	2305      	movs	r3, #5
 8003582:	e00c      	b.n	800359e <Endpoint_Read_Stream_LE+0xe2>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8003584:	f7ff fb72 	bl	8002c6c <Endpoint_WaitUntilReady>
 8003588:	4603      	mov	r3, r0
 800358a:	757b      	strb	r3, [r7, #21]
 800358c:	7d7b      	ldrb	r3, [r7, #21]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <Endpoint_Read_Stream_LE+0xda>
				return ErrorCode;
 8003592:	7d7b      	ldrb	r3, [r7, #21]
 8003594:	e003      	b.n	800359e <Endpoint_Read_Stream_LE+0xe2>
	while (Length) {
 8003596:	897b      	ldrh	r3, [r7, #10]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1b1      	bne.n	8003500 <Endpoint_Read_Stream_LE+0x44>
			}

		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3720      	adds	r7, #32
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000c0c 	.word	0x20000c0c

080035ac <Endpoint_Read_Stream_BE>:

uint8_t	Endpoint_Read_Stream_BE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b088      	sub	sp, #32
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	460b      	mov	r3, r1
 80035b6:	607a      	str	r2, [r7, #4]
 80035b8:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 80035ba:	4b37      	ldr	r3, [pc, #220]	; (8003698 <Endpoint_Read_Stream_BE+0xec>)
 80035bc:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80035c0:	461a      	mov	r2, r3
 80035c2:	232c      	movs	r3, #44	; 0x2c
 80035c4:	fb03 f302 	mul.w	r3, r3, r2
 80035c8:	4a33      	ldr	r2, [pc, #204]	; (8003698 <Endpoint_Read_Stream_BE+0xec>)
 80035ca:	4413      	add	r3, r2
 80035cc:	3304      	adds	r3, #4
 80035ce:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 80035d0:	2300      	movs	r3, #0
 80035d2:	82fb      	strh	r3, [r7, #22]
	uint16_t BytesTransfered = 0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	83fb      	strh	r3, [r7, #30]
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d053      	beq.n	8003686 <Endpoint_Read_Stream_BE+0xda>
		Length -= *BytesProcessed;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	897a      	ldrh	r2, [r7, #10]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	83fb      	strh	r3, [r7, #30]
	}

	while (Length) {
 80035ee:	e04a      	b.n	8003686 <Endpoint_Read_Stream_BE+0xda>
		if (ep->InInUse)
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d000      	beq.n	8003600 <Endpoint_Read_Stream_BE+0x54>
			continue;
 80035fe:	e042      	b.n	8003686 <Endpoint_Read_Stream_BE+0xda>
		if (Endpoint_IsReadWriteAllowed()) {
 8003600:	f7ff fc8a 	bl	8002f18 <Endpoint_IsReadWriteAllowed>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d02a      	beq.n	8003660 <Endpoint_Read_Stream_BE+0xb4>
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	897b      	ldrh	r3, [r7, #10]
 8003610:	4293      	cmp	r3, r2
 8003612:	bf28      	it	cs
 8003614:	4613      	movcs	r3, r2
 8003616:	82fb      	strh	r3, [r7, #22]
			SwapCopy((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 8003618:	8bfa      	ldrh	r2, [r7, #30]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4413      	add	r3, r2
 800361e:	4618      	mov	r0, r3
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	461a      	mov	r2, r3
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	4413      	add	r3, r2
 800362c:	4619      	mov	r1, r3
 800362e:	8afb      	ldrh	r3, [r7, #22]
 8003630:	461a      	mov	r2, r3
 8003632:	f7ff fead 	bl	8003390 <SwapCopy>
			ep->OutBytesAvailable -= Bytes;
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	8afb      	ldrh	r3, [r7, #22]
 800363c:	1ad2      	subs	r2, r2, r3
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	609a      	str	r2, [r3, #8]
			ep->OutOffset += Bytes;
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	8afb      	ldrh	r3, [r7, #22]
 8003648:	441a      	add	r2, r3
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	60da      	str	r2, [r3, #12]
			BytesTransfered += Bytes;
 800364e:	8bfa      	ldrh	r2, [r7, #30]
 8003650:	8afb      	ldrh	r3, [r7, #22]
 8003652:	4413      	add	r3, r2
 8003654:	83fb      	strh	r3, [r7, #30]
			Length -= Bytes;
 8003656:	897a      	ldrh	r2, [r7, #10]
 8003658:	8afb      	ldrh	r3, [r7, #22]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	817b      	strh	r3, [r7, #10]
 800365e:	e012      	b.n	8003686 <Endpoint_Read_Stream_BE+0xda>
		}
		else {
			Endpoint_ClearOUT();
 8003660:	f7ff fb96 	bl	8002d90 <Endpoint_ClearOUT>
			if (BytesProcessed!=NULL) {
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d004      	beq.n	8003674 <Endpoint_Read_Stream_BE+0xc8>
				*BytesProcessed = BytesTransfered;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	8bfa      	ldrh	r2, [r7, #30]
 800366e:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8003670:	2305      	movs	r3, #5
 8003672:	e00c      	b.n	800368e <Endpoint_Read_Stream_BE+0xe2>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8003674:	f7ff fafa 	bl	8002c6c <Endpoint_WaitUntilReady>
 8003678:	4603      	mov	r3, r0
 800367a:	757b      	strb	r3, [r7, #21]
 800367c:	7d7b      	ldrb	r3, [r7, #21]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <Endpoint_Read_Stream_BE+0xda>
				return ErrorCode;
 8003682:	7d7b      	ldrb	r3, [r7, #21]
 8003684:	e003      	b.n	800368e <Endpoint_Read_Stream_BE+0xe2>
	while (Length) {
 8003686:	897b      	ldrh	r3, [r7, #10]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1b1      	bne.n	80035f0 <Endpoint_Read_Stream_BE+0x44>
			}


		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3720      	adds	r7, #32
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20000c0c 	.word	0x20000c0c

0800369c <Endpoint_Write_Control_Stream_LE>:

uint8_t	Endpoint_Write_Control_Stream_LE (const void *const Buffer, uint16_t Length) {
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	460b      	mov	r3, r1
 80036a6:	807b      	strh	r3, [r7, #2]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[0];
 80036a8:	4b17      	ldr	r3, [pc, #92]	; (8003708 <Endpoint_Write_Control_Stream_LE+0x6c>)
 80036aa:	60bb      	str	r3, [r7, #8]
	uint16_t Bytes;

	while (Length) {
 80036ac:	e024      	b.n	80036f8 <Endpoint_Write_Control_Stream_LE+0x5c>
		if (!EndPoint->InInUse) {
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d11d      	bne.n	80036f8 <Endpoint_Write_Control_Stream_LE+0x5c>
			if (EndPoint->InBufferLength > Length) {
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	6a1a      	ldr	r2, [r3, #32]
 80036c0:	887b      	ldrh	r3, [r7, #2]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d902      	bls.n	80036cc <Endpoint_Write_Control_Stream_LE+0x30>
				Bytes = Length;
 80036c6:	887b      	ldrh	r3, [r7, #2]
 80036c8:	81fb      	strh	r3, [r7, #14]
 80036ca:	e002      	b.n	80036d2 <Endpoint_Write_Control_Stream_LE+0x36>
			} else {
				Bytes = EndPoint->InBufferLength;
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	81fb      	strh	r3, [r7, #14]
			}
			MEMCPY(EndPoint->InBuffer,Buffer,Bytes);
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	89fa      	ldrh	r2, [r7, #14]
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff fa66 	bl	8002bac <thumb2_memcpy>
			EndPoint->InBytesAvailable += Bytes;
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	699a      	ldr	r2, [r3, #24]
 80036e4:	89fb      	ldrh	r3, [r7, #14]
 80036e6:	441a      	add	r2, r3
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	619a      	str	r2, [r3, #24]
			Length -= Bytes;
 80036ec:	887a      	ldrh	r2, [r7, #2]
 80036ee:	89fb      	ldrh	r3, [r7, #14]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	807b      	strh	r3, [r7, #2]

			Endpoint_ClearIN();
 80036f4:	f7ff fb98 	bl	8002e28 <Endpoint_ClearIN>
	while (Length) {
 80036f8:	887b      	ldrh	r3, [r7, #2]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1d7      	bne.n	80036ae <Endpoint_Write_Control_Stream_LE+0x12>
		}
	}
	return ENDPOINT_RWCSTREAM_NoError;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20000c10 	.word	0x20000c10

0800370c <Endpoint_Write_Control_Stream_BE>:

uint8_t	Endpoint_Write_Control_Stream_BE (const void *const Buffer, uint16_t Length) {
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	460b      	mov	r3, r1
 8003716:	807b      	strh	r3, [r7, #2]
	return Endpoint_Write_Control_Stream_LE(Buffer,Length);
 8003718:	887b      	ldrh	r3, [r7, #2]
 800371a:	4619      	mov	r1, r3
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff ffbd 	bl	800369c <Endpoint_Write_Control_Stream_LE>
 8003722:	4603      	mov	r3, r0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <Endpoint_Read_Control_Stream_LE>:

uint8_t	Endpoint_Read_Control_Stream_LE (void *const Buffer, uint16_t Length) {
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	807b      	strh	r3, [r7, #2]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[0];
 8003738:	4b15      	ldr	r3, [pc, #84]	; (8003790 <Endpoint_Read_Control_Stream_LE+0x64>)
 800373a:	60fb      	str	r3, [r7, #12]
	uint16_t Bytes;

	while (Length) {
 800373c:	e020      	b.n	8003780 <Endpoint_Read_Control_Stream_LE+0x54>
		if (EndPoint->IsOutRecieved) {
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d019      	beq.n	8003780 <Endpoint_Read_Control_Stream_LE+0x54>
			Bytes = EndPoint->OutBytesAvailable > Length
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	689a      	ldr	r2, [r3, #8]
					? Length : EndPoint->OutBytesAvailable;
 8003750:	887b      	ldrh	r3, [r7, #2]
 8003752:	4293      	cmp	r3, r2
 8003754:	bf28      	it	cs
 8003756:	4613      	movcs	r3, r2
			Bytes = EndPoint->OutBytesAvailable > Length
 8003758:	817b      	strh	r3, [r7, #10]
			MEMCPY(Buffer,EndPoint->OutBuffer,Bytes);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	897a      	ldrh	r2, [r7, #10]
 8003760:	4619      	mov	r1, r3
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7ff fa22 	bl	8002bac <thumb2_memcpy>
			EndPoint->OutBytesAvailable -= Bytes;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	897b      	ldrh	r3, [r7, #10]
 800376e:	1ad2      	subs	r2, r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	609a      	str	r2, [r3, #8]
			Length -= Bytes;
 8003774:	887a      	ldrh	r2, [r7, #2]
 8003776:	897b      	ldrh	r3, [r7, #10]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	807b      	strh	r3, [r7, #2]

			Endpoint_ClearOUT();
 800377c:	f7ff fb08 	bl	8002d90 <Endpoint_ClearOUT>
	while (Length) {
 8003780:	887b      	ldrh	r3, [r7, #2]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1db      	bne.n	800373e <Endpoint_Read_Control_Stream_LE+0x12>
		}
	}
	return ENDPOINT_RWCSTREAM_NoError;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	20000c10 	.word	0x20000c10

08003794 <Endpoint_Read_Control_Stream_BE>:

uint8_t	Endpoint_Read_Control_Stream_BE (void *const Buffer, uint16_t Length) {
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	460b      	mov	r3, r1
 800379e:	807b      	strh	r3, [r7, #2]
	return Endpoint_Read_Control_Stream_LE(Buffer,Length);
 80037a0:	887b      	ldrh	r3, [r7, #2]
 80037a2:	4619      	mov	r1, r3
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff ffc1 	bl	800372c <Endpoint_Read_Control_Stream_LE>
 80037aa:	4603      	mov	r3, r0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <Endpoint_Null_Stream>:

uint8_t Endpoint_Null_Stream(uint16_t Length,
								 uint16_t* const BytesProcessed) {
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	6039      	str	r1, [r7, #0]
 80037be:	80fb      	strh	r3, [r7, #6]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 80037c0:	4b32      	ldr	r3, [pc, #200]	; (800388c <Endpoint_Null_Stream+0xd8>)
 80037c2:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80037c6:	461a      	mov	r2, r3
 80037c8:	232c      	movs	r3, #44	; 0x2c
 80037ca:	fb03 f302 	mul.w	r3, r3, r2
 80037ce:	4a2f      	ldr	r2, [pc, #188]	; (800388c <Endpoint_Null_Stream+0xd8>)
 80037d0:	4413      	add	r3, r2
 80037d2:	3304      	adds	r3, #4
 80037d4:	613b      	str	r3, [r7, #16]
		uint16_t Bytes = 0;
 80037d6:	2300      	movs	r3, #0
 80037d8:	81fb      	strh	r3, [r7, #14]
		uint16_t BytesTransfered = 0;
 80037da:	2300      	movs	r3, #0
 80037dc:	82fb      	strh	r3, [r7, #22]
		uint8_t ErrorCode;

		if (BytesProcessed!=NULL) {
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d04b      	beq.n	800387c <Endpoint_Null_Stream+0xc8>
			Length -= *BytesProcessed;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	88fa      	ldrh	r2, [r7, #6]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	80fb      	strh	r3, [r7, #6]
			BytesTransfered = *BytesProcessed;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	881b      	ldrh	r3, [r3, #0]
 80037f2:	82fb      	strh	r3, [r7, #22]
		}

		while (Length) {
 80037f4:	e042      	b.n	800387c <Endpoint_Null_Stream+0xc8>
			if (ep->InInUse)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d000      	beq.n	8003806 <Endpoint_Null_Stream+0x52>
				continue;
 8003804:	e03a      	b.n	800387c <Endpoint_Null_Stream+0xc8>
			if (Endpoint_IsReadWriteAllowed()) {
 8003806:	f7ff fb87 	bl	8002f18 <Endpoint_IsReadWriteAllowed>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d022      	beq.n	8003856 <Endpoint_Null_Stream+0xa2>
				Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	6a1a      	ldr	r2, [r3, #32]
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	1ad2      	subs	r2, r2, r3
 800381a:	88fb      	ldrh	r3, [r7, #6]
 800381c:	4293      	cmp	r3, r2
 800381e:	bf28      	it	cs
 8003820:	4613      	movcs	r3, r2
 8003822:	81fb      	strh	r3, [r7, #14]
				memset(ep->InBuffer + ep->InBytesAvailable,0x0,Bytes);
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	69da      	ldr	r2, [r3, #28]
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	4413      	add	r3, r2
 800382e:	89fa      	ldrh	r2, [r7, #14]
 8003830:	2100      	movs	r1, #0
 8003832:	4618      	mov	r0, r3
 8003834:	f003 f9e4 	bl	8006c00 <memset>
				ep->InBytesAvailable += Bytes;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	699a      	ldr	r2, [r3, #24]
 800383c:	89fb      	ldrh	r3, [r7, #14]
 800383e:	441a      	add	r2, r3
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	619a      	str	r2, [r3, #24]
				BytesTransfered += Bytes;
 8003844:	8afa      	ldrh	r2, [r7, #22]
 8003846:	89fb      	ldrh	r3, [r7, #14]
 8003848:	4413      	add	r3, r2
 800384a:	82fb      	strh	r3, [r7, #22]
				Length -= Bytes;
 800384c:	88fa      	ldrh	r2, [r7, #6]
 800384e:	89fb      	ldrh	r3, [r7, #14]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	80fb      	strh	r3, [r7, #6]
 8003854:	e012      	b.n	800387c <Endpoint_Null_Stream+0xc8>
			}
			else {
				Endpoint_ClearIN();
 8003856:	f7ff fae7 	bl	8002e28 <Endpoint_ClearIN>
				if (BytesProcessed!=NULL) {
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d004      	beq.n	800386a <Endpoint_Null_Stream+0xb6>
					*BytesProcessed = BytesTransfered;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	8afa      	ldrh	r2, [r7, #22]
 8003864:	801a      	strh	r2, [r3, #0]
					return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8003866:	2305      	movs	r3, #5
 8003868:	e00c      	b.n	8003884 <Endpoint_Null_Stream+0xd0>
				}

				if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 800386a:	f7ff f9ff 	bl	8002c6c <Endpoint_WaitUntilReady>
 800386e:	4603      	mov	r3, r0
 8003870:	737b      	strb	r3, [r7, #13]
 8003872:	7b7b      	ldrb	r3, [r7, #13]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <Endpoint_Null_Stream+0xc8>
					return ErrorCode;
 8003878:	7b7b      	ldrb	r3, [r7, #13]
 800387a:	e003      	b.n	8003884 <Endpoint_Null_Stream+0xd0>
		while (Length) {
 800387c:	88fb      	ldrh	r3, [r7, #6]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1b9      	bne.n	80037f6 <Endpoint_Null_Stream+0x42>
				}


			}
		}
		return ENDPOINT_RWSTREAM_NoError;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	20000c0c 	.word	0x20000c0c

08003890 <USBD_HandleEP0_Stall>:
/**
 * \brief Handle protocol stall on EP0
 *
 * Stalls EP0 and then restarts a new transfer including setting state to \ref IDLE.
 */
void USBD_HandleEP0_Stall() {
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
	/* When we stall ep0 as protocol stall, we go back into idle state and start a new read */
	device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0,1);
 8003894:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <USBD_HandleEP0_Stall+0x28>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	2101      	movs	r1, #1
 800389c:	2080      	movs	r0, #128	; 0x80
 800389e:	4798      	blx	r3
	device.EP0_State = IDLE;
 80038a0:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <USBD_HandleEP0_Stall+0x28>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	device.Driver->EndpointReadStart(0,24);
 80038a8:	4b03      	ldr	r3, [pc, #12]	; (80038b8 <USBD_HandleEP0_Stall+0x28>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ae:	2118      	movs	r1, #24
 80038b0:	2000      	movs	r0, #0
 80038b2:	4798      	blx	r3
}
 80038b4:	bf00      	nop
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	20000c0c 	.word	0x20000c0c

080038bc <USB_Device_ProcessControlRequest>:
 * \ref EVENT_USB_Device_ControlRequest function. There the user has the chance to complete
 * some custom request or override the handling of this function. If the user has handled the
 * request, he has to call \ref Endpoint_ClearSETUP.
 *
 */
void USB_Device_ProcessControlRequest() {
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
	uint32_t length = 0,ret;
 80038c2:	2300      	movs	r3, #0
 80038c4:	617b      	str	r3, [r7, #20]
	uint16_t status = 0;
 80038c6:	2300      	movs	r3, #0
 80038c8:	813b      	strh	r3, [r7, #8]
	void *buffer;
	uint8_t Value;
	uint16_t Index;

	Value = USB_ControlRequest.wValue & 0x00FF;
 80038ca:	4bab      	ldr	r3, [pc, #684]	; (8003b78 <USB_Device_ProcessControlRequest+0x2bc>)
 80038cc:	885b      	ldrh	r3, [r3, #2]
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	74fb      	strb	r3, [r7, #19]

	/* Handling of descriptors */
	EVENT_USB_Device_ControlRequest();
 80038d2:	f7fd f913 	bl	8000afc <EVENT_USB_Device_ControlRequest>
	if (!device.IsSetupRecieved)
 80038d6:	4ba9      	ldr	r3, [pc, #676]	; (8003b7c <USB_Device_ProcessControlRequest+0x2c0>)
 80038d8:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80038dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 81fd 	beq.w	8003ce2 <USB_Device_ProcessControlRequest+0x426>
		return;

	/* default request handling */
	switch (USB_ControlRequest.bRequest) {
 80038e8:	4ba3      	ldr	r3, [pc, #652]	; (8003b78 <USB_Device_ProcessControlRequest+0x2bc>)
 80038ea:	785b      	ldrb	r3, [r3, #1]
 80038ec:	2b0c      	cmp	r3, #12
 80038ee:	f200 81ea 	bhi.w	8003cc6 <USB_Device_ProcessControlRequest+0x40a>
 80038f2:	a201      	add	r2, pc, #4	; (adr r2, 80038f8 <USB_Device_ProcessControlRequest+0x3c>)
 80038f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f8:	08003a6f 	.word	0x08003a6f
 80038fc:	0800392d 	.word	0x0800392d
 8003900:	08003cc7 	.word	0x08003cc7
 8003904:	08003bfb 	.word	0x08003bfb
 8003908:	08003cc7 	.word	0x08003cc7
 800390c:	08003b53 	.word	0x08003b53
 8003910:	080039d3 	.word	0x080039d3
 8003914:	08003bc1 	.word	0x08003bc1
 8003918:	080039c3 	.word	0x080039c3
 800391c:	08003b89 	.word	0x08003b89
 8003920:	08003a37 	.word	0x08003a37
 8003924:	08003bc7 	.word	0x08003bc7
 8003928:	08003cc1 	.word	0x08003cc1
	case REQ_ClearFeature:
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT) {
 800392c:	4b92      	ldr	r3, [pc, #584]	; (8003b78 <USB_Device_ProcessControlRequest+0x2bc>)
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	f003 0303 	and.w	r3, r3, #3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d133      	bne.n	80039a0 <USB_Device_ProcessControlRequest+0xe4>
			Index = USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK;
 8003938:	4b8f      	ldr	r3, [pc, #572]	; (8003b78 <USB_Device_ProcessControlRequest+0x2bc>)
 800393a:	889b      	ldrh	r3, [r3, #4]
 800393c:	b29b      	uxth	r3, r3
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	817b      	strh	r3, [r7, #10]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0)  &&
 8003944:	4b8e      	ldr	r3, [pc, #568]	; (8003b80 <USB_Device_ProcessControlRequest+0x2c4>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b04      	cmp	r3, #4
 800394c:	d004      	beq.n	8003958 <USB_Device_ProcessControlRequest+0x9c>
 800394e:	4b8a      	ldr	r3, [pc, #552]	; (8003b78 <USB_Device_ProcessControlRequest+0x2bc>)
 8003950:	889b      	ldrh	r3, [r3, #4]
 8003952:	b29b      	uxth	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	d120      	bne.n	800399a <USB_Device_ProcessControlRequest+0xde>
					device.Endpoints[Index].IsConfigured==1) {
 8003958:	897b      	ldrh	r3, [r7, #10]
 800395a:	4a88      	ldr	r2, [pc, #544]	; (8003b7c <USB_Device_ProcessControlRequest+0x2c0>)
 800395c:	212c      	movs	r1, #44	; 0x2c
 800395e:	fb01 f303 	mul.w	r3, r1, r3
 8003962:	4413      	add	r3, r2
 8003964:	7a1b      	ldrb	r3, [r3, #8]
 8003966:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800396a:	b2db      	uxtb	r3, r3
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0)  &&
 800396c:	2b01      	cmp	r3, #1
 800396e:	d114      	bne.n	800399a <USB_Device_ProcessControlRequest+0xde>
				device.Endpoints[Index].IsHalted = 0;
 8003970:	897b      	ldrh	r3, [r7, #10]
 8003972:	4a82      	ldr	r2, [pc, #520]	; (8003b7c <USB_Device_ProcessControlRequest+0x2c0>)
 8003974:	212c      	movs	r1, #44	; 0x2c
 8003976:	fb01 f303 	mul.w	r3, r1, r3
 800397a:	441a      	add	r2, r3
 800397c:	7a13      	ldrb	r3, [r2, #8]
 800397e:	f36f 0382 	bfc	r3, #2, #1
 8003982:	7213      	strb	r3, [r2, #8]
				device.Driver->EndpointStall(USB_ControlRequest.wIndex,0);
 8003984:	4b7d      	ldr	r3, [pc, #500]	; (8003b7c <USB_Device_ProcessControlRequest+0x2c0>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	4a7b      	ldr	r2, [pc, #492]	; (8003b78 <USB_Device_ProcessControlRequest+0x2bc>)
 800398c:	8892      	ldrh	r2, [r2, #4]
 800398e:	b292      	uxth	r2, r2
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	2100      	movs	r1, #0
 8003994:	4610      	mov	r0, r2
 8003996:	4798      	blx	r3
			} else {
				USBD_HandleEP0_Stall();
			}
			break;
 8003998:	e19b      	b.n	8003cd2 <USB_Device_ProcessControlRequest+0x416>
				USBD_HandleEP0_Stall();
 800399a:	f7ff ff79 	bl	8003890 <USBD_HandleEP0_Stall>
			break;
 800399e:	e198      	b.n	8003cd2 <USB_Device_ProcessControlRequest+0x416>
		}
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_DEVICE) {
 80039a0:	4b75      	ldr	r3, [pc, #468]	; (8003b78 <USB_Device_ProcessControlRequest+0x2bc>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	f003 0303 	and.w	r3, r3, #3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d107      	bne.n	80039bc <USB_Device_ProcessControlRequest+0x100>
			 device.RemoteWakeUp = 0;
 80039ac:	4a73      	ldr	r2, [pc, #460]	; (8003b7c <USB_Device_ProcessControlRequest+0x2c0>)
 80039ae:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80039b2:	f36f 0382 	bfc	r3, #2, #1
 80039b6:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			 break;
 80039ba:	e18a      	b.n	8003cd2 <USB_Device_ProcessControlRequest+0x416>
		}
		USBD_HandleEP0_Stall();
 80039bc:	f7ff ff68 	bl	8003890 <USBD_HandleEP0_Stall>
		break;
 80039c0:	e187      	b.n	8003cd2 <USB_Device_ProcessControlRequest+0x416>

	case REQ_GetConfiguration:
		device.Driver->EndpointWrite(0,&device.Configuration,1);
 80039c2:	4b6e      	ldr	r3, [pc, #440]	; (8003b7c <USB_Device_ProcessControlRequest+0x2c0>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	2201      	movs	r2, #1
 80039ca:	496e      	ldr	r1, [pc, #440]	; (8003b84 <USB_Device_ProcessControlRequest+0x2c8>)
 80039cc:	2000      	movs	r0, #0
 80039ce:	4798      	blx	r3
		break;
 80039d0:	e17f      	b.n	8003cd2 <USB_Device_ProcessControlRequest+0x416>

	case REQ_GetDescriptor:
		length = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue,USB_ControlRequest.wIndex,(void*)&buffer);
 80039d2:	4b69      	ldr	r3, [pc, #420]	; (8003b78 <USB_Device_ProcessControlRequest+0x2bc>)
 80039d4:	885b      	ldrh	r3, [r3, #2]
 80039d6:	b298      	uxth	r0, r3
 80039d8:	4b67      	ldr	r3, [pc, #412]	; (8003b78 <USB_Device_ProcessControlRequest+0x2bc>)
 80039da:	889b      	ldrh	r3, [r3, #4]
 80039dc:	b29b      	uxth	r3, r3
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	1d3a      	adds	r2, r7, #4
 80039e2:	4619      	mov	r1, r3
 80039e4:	f7fd f8a0 	bl	8000b28 <CALLBACK_USB_GetDescriptor>
 80039e8:	4603      	mov	r3, r0
 80039ea:	617b      	str	r3, [r7, #20]
		if (length==0)
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d102      	bne.n	80039f8 <USB_Device_ProcessControlRequest+0x13c>
			USBD_HandleEP0_Stall();
 80039f2:	f7ff ff4d 	bl	8003890 <USBD_HandleEP0_Stall>
					length : USB_ControlRequest.wLength;
			ret = device.Driver->EndpointWrite(0,buffer,length);
			device.Endpoints[0].InDataLeft = length - ret;
			device.Endpoints[0].InDataBuffer = (uint8_t *)((uint32_t)buffer + ret);
		}
		break;
 80039f6:	e16c      	b.n	8003cd2 <USB_Device_ProcessControlRequest+0x416>
			length = length < USB_ControlRequest.wLength ?
 80039f8:	4b5f      	ldr	r3, [pc, #380]	; (8003b78 <USB_Device_ProcessControlRequest+0x2bc>)
 80039fa:	88db      	ldrh	r3, [r3, #6]
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	461a      	mov	r2, r3
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	4293      	cmp	r3, r2
 8003a04:	bf28      	it	cs
 8003a06:	4613      	movcs	r3, r2
 8003a08:	617b      	str	r3, [r7, #20]
			ret = device.Driver->EndpointWrite(0,buffer,length);
 8003a0a:	4b5c      	ldr	r3, [pc, #368]	; (8003b7c <USB_Device_ProcessControlRequest+0x2c0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	2000      	movs	r0, #0
 8003a16:	4798      	blx	r3
 8003a18:	4603      	mov	r3, r0
 8003a1a:	60fb      	str	r3, [r7, #12]
			device.Endpoints[0].InDataLeft = length - ret;
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	4a56      	ldr	r2, [pc, #344]	; (8003b7c <USB_Device_ProcessControlRequest+0x2c0>)
 8003a24:	6293      	str	r3, [r2, #40]	; 0x28
			device.Endpoints[0].InDataBuffer = (uint8_t *)((uint32_t)buffer + ret);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	461a      	mov	r2, r3
 8003a30:	4b52      	ldr	r3, [pc, #328]	; (8003b7c <USB_Device_ProcessControlRequest+0x2c0>)
 8003a32:	62da      	str	r2, [r3, #44]	; 0x2c
		break;
 8003a34:	e14d      	b.n	8003cd2 <USB_Device_ProcessControlRequest+0x416>

	case REQ_GetInterface:
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 8003a36:	4b52      	ldr	r3, [pc, #328]	; (8003b80 <USB_Device_ProcessControlRequest+0x2c4>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b04      	cmp	r3, #4
 8003a3e:	d10d      	bne.n	8003a5c <USB_Device_ProcessControlRequest+0x1a0>
			device.Driver->EndpointWrite(0,&device.InterfaceSettings[USB_ControlRequest.wIndex],1);
 8003a40:	4b4e      	ldr	r3, [pc, #312]	; (8003b7c <USB_Device_ProcessControlRequest+0x2c0>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	4a4c      	ldr	r2, [pc, #304]	; (8003b78 <USB_Device_ProcessControlRequest+0x2bc>)
 8003a48:	8892      	ldrh	r2, [r2, #4]
 8003a4a:	b292      	uxth	r2, r2
 8003a4c:	f502 729c 	add.w	r2, r2, #312	; 0x138
 8003a50:	494a      	ldr	r1, [pc, #296]	; (8003b7c <USB_Device_ProcessControlRequest+0x2c0>)
 8003a52:	4411      	add	r1, r2
 8003a54:	2201      	movs	r2, #1
 8003a56:	2000      	movs	r0, #0
 8003a58:	4798      	blx	r3
			break;
 8003a5a:	e13a      	b.n	8003cd2 <USB_Device_ProcessControlRequest+0x416>
		}
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 8003a5c:	4b48      	ldr	r3, [pc, #288]	; (8003b80 <USB_Device_ProcessControlRequest+0x2c4>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b03      	cmp	r3, #3
 8003a64:	f040 8132 	bne.w	8003ccc <USB_Device_ProcessControlRequest+0x410>
			USBD_HandleEP0_Stall();
 8003a68:	f7ff ff12 	bl	8003890 <USBD_HandleEP0_Stall>
			break;
 8003a6c:	e131      	b.n	8003cd2 <USB_Device_ProcessControlRequest+0x416>
		}
		break;

	case REQ_GetStatus:
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_DEVICE) {
 8003a6e:	4b42      	ldr	r3, [pc, #264]	; (8003b78 <USB_Device_ProcessControlRequest+0x2bc>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d11b      	bne.n	8003ab2 <USB_Device_ProcessControlRequest+0x1f6>
			status = device.RemoteWakeUp << 1 | device.SelfPowered;
 8003a7a:	4b40      	ldr	r3, [pc, #256]	; (8003b7c <USB_Device_ProcessControlRequest+0x2c0>)
 8003a7c:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8003a80:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	b21a      	sxth	r2, r3
 8003a8a:	4b3c      	ldr	r3, [pc, #240]	; (8003b7c <USB_Device_ProcessControlRequest+0x2c0>)
 8003a8c:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8003a90:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	b21b      	sxth	r3, r3
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	b21b      	sxth	r3, r3
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	813b      	strh	r3, [r7, #8]
			device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 8003aa0:	4b36      	ldr	r3, [pc, #216]	; (8003b7c <USB_Device_ProcessControlRequest+0x2c0>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	f107 0108 	add.w	r1, r7, #8
 8003aaa:	2202      	movs	r2, #2
 8003aac:	2000      	movs	r0, #0
 8003aae:	4798      	blx	r3
			break;
 8003ab0:	e10f      	b.n	8003cd2 <USB_Device_ProcessControlRequest+0x416>
		}
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_INTERFACE && USB_DeviceState == DEVICE_STATE_Configured) {
 8003ab2:	4b31      	ldr	r3, [pc, #196]	; (8003b78 <USB_Device_ProcessControlRequest+0x2bc>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d10f      	bne.n	8003ade <USB_Device_ProcessControlRequest+0x222>
 8003abe:	4b30      	ldr	r3, [pc, #192]	; (8003b80 <USB_Device_ProcessControlRequest+0x2c4>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d10a      	bne.n	8003ade <USB_Device_ProcessControlRequest+0x222>
			status = 0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	813b      	strh	r3, [r7, #8]
			device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 8003acc:	4b2b      	ldr	r3, [pc, #172]	; (8003b7c <USB_Device_ProcessControlRequest+0x2c0>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	f107 0108 	add.w	r1, r7, #8
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	2000      	movs	r0, #0
 8003ada:	4798      	blx	r3
			break;
 8003adc:	e0f9      	b.n	8003cd2 <USB_Device_ProcessControlRequest+0x416>
		}
		/* print endpoint status only when(or):
		 * - Device_Address_state and ep == 0
		 * - Device_configured_state and ep is configured
		 */
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT) {
 8003ade:	4b26      	ldr	r3, [pc, #152]	; (8003b78 <USB_Device_ProcessControlRequest+0x2bc>)
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d130      	bne.n	8003b4c <USB_Device_ProcessControlRequest+0x290>
			Index = USB_ControlRequest.wIndex & 0xFF & ENDPOINT_EPNUM_MASK;
 8003aea:	4b23      	ldr	r3, [pc, #140]	; (8003b78 <USB_Device_ProcessControlRequest+0x2bc>)
 8003aec:	889b      	ldrh	r3, [r3, #4]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	f003 030f 	and.w	r3, r3, #15
 8003af4:	817b      	strh	r3, [r7, #10]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0) &&
 8003af6:	4b22      	ldr	r3, [pc, #136]	; (8003b80 <USB_Device_ProcessControlRequest+0x2c4>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b04      	cmp	r3, #4
 8003afe:	d004      	beq.n	8003b0a <USB_Device_ProcessControlRequest+0x24e>
 8003b00:	4b1d      	ldr	r3, [pc, #116]	; (8003b78 <USB_Device_ProcessControlRequest+0x2bc>)
 8003b02:	889b      	ldrh	r3, [r3, #4]
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d120      	bne.n	8003b4c <USB_Device_ProcessControlRequest+0x290>
					device.Endpoints[Index].IsConfigured==1) {
 8003b0a:	897b      	ldrh	r3, [r7, #10]
 8003b0c:	4a1b      	ldr	r2, [pc, #108]	; (8003b7c <USB_Device_ProcessControlRequest+0x2c0>)
 8003b0e:	212c      	movs	r1, #44	; 0x2c
 8003b10:	fb01 f303 	mul.w	r3, r1, r3
 8003b14:	4413      	add	r3, r2
 8003b16:	7a1b      	ldrb	r3, [r3, #8]
 8003b18:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003b1c:	b2db      	uxtb	r3, r3
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0) &&
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d114      	bne.n	8003b4c <USB_Device_ProcessControlRequest+0x290>
				status = device.Endpoints[Index].IsHalted;
 8003b22:	897b      	ldrh	r3, [r7, #10]
 8003b24:	4a15      	ldr	r2, [pc, #84]	; (8003b7c <USB_Device_ProcessControlRequest+0x2c0>)
 8003b26:	212c      	movs	r1, #44	; 0x2c
 8003b28:	fb01 f303 	mul.w	r3, r1, r3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	7a1b      	ldrb	r3, [r3, #8]
 8003b30:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	813b      	strh	r3, [r7, #8]
				device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 8003b3a:	4b10      	ldr	r3, [pc, #64]	; (8003b7c <USB_Device_ProcessControlRequest+0x2c0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	f107 0108 	add.w	r1, r7, #8
 8003b44:	2202      	movs	r2, #2
 8003b46:	2000      	movs	r0, #0
 8003b48:	4798      	blx	r3
				break;
 8003b4a:	e0c2      	b.n	8003cd2 <USB_Device_ProcessControlRequest+0x416>
			}
		}
		/* default stall */
		USBD_HandleEP0_Stall();
 8003b4c:	f7ff fea0 	bl	8003890 <USBD_HandleEP0_Stall>
		break;
 8003b50:	e0bf      	b.n	8003cd2 <USB_Device_ProcessControlRequest+0x416>

	case REQ_SetAddress:
		if (Value == 0)
 8003b52:	7cfb      	ldrb	r3, [r7, #19]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d103      	bne.n	8003b60 <USB_Device_ProcessControlRequest+0x2a4>
			USB_DeviceState = DEVICE_STATE_Default;
 8003b58:	4b09      	ldr	r3, [pc, #36]	; (8003b80 <USB_Device_ProcessControlRequest+0x2c4>)
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	701a      	strb	r2, [r3, #0]
 8003b5e:	e002      	b.n	8003b66 <USB_Device_ProcessControlRequest+0x2aa>
		else
			USB_DeviceState = DEVICE_STATE_Addressed;
 8003b60:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <USB_Device_ProcessControlRequest+0x2c4>)
 8003b62:	2203      	movs	r2, #3
 8003b64:	701a      	strb	r2, [r3, #0]
		device.Driver->DeviceSetAddress(Value,XMC_USBD_SET_ADDRESS_STAGE_SETUP);
 8003b66:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <USB_Device_ProcessControlRequest+0x2c0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	7cfa      	ldrb	r2, [r7, #19]
 8003b6e:	2100      	movs	r1, #0
 8003b70:	4610      	mov	r0, r2
 8003b72:	4798      	blx	r3
		break;
 8003b74:	e0ad      	b.n	8003cd2 <USB_Device_ProcessControlRequest+0x416>
 8003b76:	bf00      	nop
 8003b78:	20000f5c 	.word	0x20000f5c
 8003b7c:	20000c0c 	.word	0x20000c0c
 8003b80:	20000f59 	.word	0x20000f59
 8003b84:	20000d45 	.word	0x20000d45

	case REQ_SetConfiguration:
		/* Regardless the state update the configuration to unconfigure endpoints */
		device.Configuration = Value;
 8003b88:	4a58      	ldr	r2, [pc, #352]	; (8003cec <USB_Device_ProcessControlRequest+0x430>)
 8003b8a:	7cfb      	ldrb	r3, [r7, #19]
 8003b8c:	f882 3139 	strb.w	r3, [r2, #313]	; 0x139
		EVENT_USB_Device_ConfigurationChanged();
 8003b90:	f7fc ff8c 	bl	8000aac <EVENT_USB_Device_ConfigurationChanged>
		/* when config 0 is choosen, we are back in address state */
		if (Value == 0) {
 8003b94:	7cfb      	ldrb	r3, [r7, #19]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d103      	bne.n	8003ba2 <USB_Device_ProcessControlRequest+0x2e6>
			USB_DeviceState = DEVICE_STATE_Addressed;
 8003b9a:	4b55      	ldr	r3, [pc, #340]	; (8003cf0 <USB_Device_ProcessControlRequest+0x434>)
 8003b9c:	2203      	movs	r2, #3
 8003b9e:	701a      	strb	r2, [r3, #0]
			break;
 8003ba0:	e097      	b.n	8003cd2 <USB_Device_ProcessControlRequest+0x416>
		}
		/* go ahead only with vailid config. (must be set in event) */
		if (device.IsConfigured == 1)
 8003ba2:	4b52      	ldr	r3, [pc, #328]	; (8003cec <USB_Device_ProcessControlRequest+0x430>)
 8003ba4:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <USB_Device_ProcessControlRequest+0x2fe>
			USB_DeviceState = DEVICE_STATE_Configured;
 8003bb2:	4b4f      	ldr	r3, [pc, #316]	; (8003cf0 <USB_Device_ProcessControlRequest+0x434>)
 8003bb4:	2204      	movs	r2, #4
 8003bb6:	701a      	strb	r2, [r3, #0]
		else
			USBD_HandleEP0_Stall();
		break;
 8003bb8:	e08b      	b.n	8003cd2 <USB_Device_ProcessControlRequest+0x416>
			USBD_HandleEP0_Stall();
 8003bba:	f7ff fe69 	bl	8003890 <USBD_HandleEP0_Stall>
		break;
 8003bbe:	e088      	b.n	8003cd2 <USB_Device_ProcessControlRequest+0x416>

	case REQ_SetDescriptor:
		/* Set Descriptor not supported, so stall */
		USBD_HandleEP0_Stall();
 8003bc0:	f7ff fe66 	bl	8003890 <USBD_HandleEP0_Stall>
		break;
 8003bc4:	e085      	b.n	8003cd2 <USB_Device_ProcessControlRequest+0x416>

	case REQ_SetInterface:
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 8003bc6:	4b4a      	ldr	r3, [pc, #296]	; (8003cf0 <USB_Device_ProcessControlRequest+0x434>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d10c      	bne.n	8003bea <USB_Device_ProcessControlRequest+0x32e>
			/* TODO: Check if interface and altsetting exists and configuration is allowed, else stall */
			device.InterfaceSettings[USB_ControlRequest.wIndex] = USB_ControlRequest.wValue;
 8003bd0:	4b48      	ldr	r3, [pc, #288]	; (8003cf4 <USB_Device_ProcessControlRequest+0x438>)
 8003bd2:	885b      	ldrh	r3, [r3, #2]
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	4b47      	ldr	r3, [pc, #284]	; (8003cf4 <USB_Device_ProcessControlRequest+0x438>)
 8003bd8:	889b      	ldrh	r3, [r3, #4]
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	4619      	mov	r1, r3
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	4b42      	ldr	r3, [pc, #264]	; (8003cec <USB_Device_ProcessControlRequest+0x430>)
 8003be2:	440b      	add	r3, r1
 8003be4:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
			break;
 8003be8:	e073      	b.n	8003cd2 <USB_Device_ProcessControlRequest+0x416>
		}
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 8003bea:	4b41      	ldr	r3, [pc, #260]	; (8003cf0 <USB_Device_ProcessControlRequest+0x434>)
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	d16d      	bne.n	8003cd0 <USB_Device_ProcessControlRequest+0x414>
			USBD_HandleEP0_Stall();
 8003bf4:	f7ff fe4c 	bl	8003890 <USBD_HandleEP0_Stall>
			break;
 8003bf8:	e06b      	b.n	8003cd2 <USB_Device_ProcessControlRequest+0x416>
		}
		break;

	case REQ_SetFeature:
		/* we do not support test mode */
		if (Value == FEATURE_SEL_TestMode) {
 8003bfa:	7cfb      	ldrb	r3, [r7, #19]
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d102      	bne.n	8003c06 <USB_Device_ProcessControlRequest+0x34a>
			USBD_HandleEP0_Stall();
 8003c00:	f7ff fe46 	bl	8003890 <USBD_HandleEP0_Stall>
			break;
 8003c04:	e065      	b.n	8003cd2 <USB_Device_ProcessControlRequest+0x416>
		}
		/* configured state */
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 8003c06:	4b3a      	ldr	r3, [pc, #232]	; (8003cf0 <USB_Device_ProcessControlRequest+0x434>)
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d138      	bne.n	8003c82 <USB_Device_ProcessControlRequest+0x3c6>
			switch (Value) {
 8003c10:	7cfb      	ldrb	r3, [r7, #19]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <USB_Device_ProcessControlRequest+0x370>
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d000      	beq.n	8003c1c <USB_Device_ProcessControlRequest+0x360>
					device.Endpoints[Index].IsHalted = 1;
					device.Driver->EndpointStall(USB_ControlRequest.wIndex,1);
				}
				break;
			}
			break;
 8003c1a:	e05a      	b.n	8003cd2 <USB_Device_ProcessControlRequest+0x416>
				device.RemoteWakeUp = 1;
 8003c1c:	4a33      	ldr	r2, [pc, #204]	; (8003cec <USB_Device_ProcessControlRequest+0x430>)
 8003c1e:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8003c22:	f043 0304 	orr.w	r3, r3, #4
 8003c26:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
				break;
 8003c2a:	e029      	b.n	8003c80 <USB_Device_ProcessControlRequest+0x3c4>
				Index = USB_ControlRequest.wIndex & 0xFF & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK;
 8003c2c:	4b31      	ldr	r3, [pc, #196]	; (8003cf4 <USB_Device_ProcessControlRequest+0x438>)
 8003c2e:	889b      	ldrh	r3, [r3, #4]
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	817b      	strh	r3, [r7, #10]
				if (device.Endpoints[Index].IsConfigured == 0)
 8003c38:	897b      	ldrh	r3, [r7, #10]
 8003c3a:	4a2c      	ldr	r2, [pc, #176]	; (8003cec <USB_Device_ProcessControlRequest+0x430>)
 8003c3c:	212c      	movs	r1, #44	; 0x2c
 8003c3e:	fb01 f303 	mul.w	r3, r1, r3
 8003c42:	4413      	add	r3, r2
 8003c44:	7a1b      	ldrb	r3, [r3, #8]
 8003c46:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d102      	bne.n	8003c56 <USB_Device_ProcessControlRequest+0x39a>
					USBD_HandleEP0_Stall();
 8003c50:	f7ff fe1e 	bl	8003890 <USBD_HandleEP0_Stall>
				break;
 8003c54:	e013      	b.n	8003c7e <USB_Device_ProcessControlRequest+0x3c2>
					device.Endpoints[Index].IsHalted = 1;
 8003c56:	897b      	ldrh	r3, [r7, #10]
 8003c58:	4a24      	ldr	r2, [pc, #144]	; (8003cec <USB_Device_ProcessControlRequest+0x430>)
 8003c5a:	212c      	movs	r1, #44	; 0x2c
 8003c5c:	fb01 f303 	mul.w	r3, r1, r3
 8003c60:	441a      	add	r2, r3
 8003c62:	7a13      	ldrb	r3, [r2, #8]
 8003c64:	f043 0304 	orr.w	r3, r3, #4
 8003c68:	7213      	strb	r3, [r2, #8]
					device.Driver->EndpointStall(USB_ControlRequest.wIndex,1);
 8003c6a:	4b20      	ldr	r3, [pc, #128]	; (8003cec <USB_Device_ProcessControlRequest+0x430>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	4a20      	ldr	r2, [pc, #128]	; (8003cf4 <USB_Device_ProcessControlRequest+0x438>)
 8003c72:	8892      	ldrh	r2, [r2, #4]
 8003c74:	b292      	uxth	r2, r2
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	2101      	movs	r1, #1
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	4798      	blx	r3
				break;
 8003c7e:	bf00      	nop
			break;
 8003c80:	e027      	b.n	8003cd2 <USB_Device_ProcessControlRequest+0x416>
		}
		/* when addressed, only ep0 can be halted */
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 8003c82:	4b1b      	ldr	r3, [pc, #108]	; (8003cf0 <USB_Device_ProcessControlRequest+0x434>)
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b03      	cmp	r3, #3
 8003c8a:	d116      	bne.n	8003cba <USB_Device_ProcessControlRequest+0x3fe>
			if (Value == FEATURE_SEL_EndpointHalt &&
 8003c8c:	7cfb      	ldrb	r3, [r7, #19]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d113      	bne.n	8003cba <USB_Device_ProcessControlRequest+0x3fe>
					(USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT &&
 8003c92:	4b18      	ldr	r3, [pc, #96]	; (8003cf4 <USB_Device_ProcessControlRequest+0x438>)
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	f003 0303 	and.w	r3, r3, #3
			if (Value == FEATURE_SEL_EndpointHalt &&
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d10d      	bne.n	8003cba <USB_Device_ProcessControlRequest+0x3fe>
					(USB_ControlRequest.wIndex & 0x00FF) == 0x0) {
 8003c9e:	4b15      	ldr	r3, [pc, #84]	; (8003cf4 <USB_Device_ProcessControlRequest+0x438>)
 8003ca0:	889b      	ldrh	r3, [r3, #4]
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	b2db      	uxtb	r3, r3
					(USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT &&
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d107      	bne.n	8003cba <USB_Device_ProcessControlRequest+0x3fe>
				device.Endpoints[0].IsHalted = 1;
 8003caa:	4a10      	ldr	r2, [pc, #64]	; (8003cec <USB_Device_ProcessControlRequest+0x430>)
 8003cac:	7a13      	ldrb	r3, [r2, #8]
 8003cae:	f043 0304 	orr.w	r3, r3, #4
 8003cb2:	7213      	strb	r3, [r2, #8]
				USBD_HandleEP0_Stall();
 8003cb4:	f7ff fdec 	bl	8003890 <USBD_HandleEP0_Stall>
				break;
 8003cb8:	e00b      	b.n	8003cd2 <USB_Device_ProcessControlRequest+0x416>
			}
		}
		/* default behaviour is stall */
		USBD_HandleEP0_Stall();
 8003cba:	f7ff fde9 	bl	8003890 <USBD_HandleEP0_Stall>
		break;
 8003cbe:	e008      	b.n	8003cd2 <USB_Device_ProcessControlRequest+0x416>

	case REQ_SynchFrame:
		/* Not yet supported */
		USBD_HandleEP0_Stall();
 8003cc0:	f7ff fde6 	bl	8003890 <USBD_HandleEP0_Stall>
		break;
 8003cc4:	e005      	b.n	8003cd2 <USB_Device_ProcessControlRequest+0x416>

	default:
		USBD_HandleEP0_Stall();
 8003cc6:	f7ff fde3 	bl	8003890 <USBD_HandleEP0_Stall>
 8003cca:	e002      	b.n	8003cd2 <USB_Device_ProcessControlRequest+0x416>
		break;
 8003ccc:	bf00      	nop
 8003cce:	e000      	b.n	8003cd2 <USB_Device_ProcessControlRequest+0x416>
		break;
 8003cd0:	bf00      	nop
	}
	device.IsSetupRecieved = 0;
 8003cd2:	4a06      	ldr	r2, [pc, #24]	; (8003cec <USB_Device_ProcessControlRequest+0x430>)
 8003cd4:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8003cd8:	f36f 0341 	bfc	r3, #1, #1
 8003cdc:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
 8003ce0:	e000      	b.n	8003ce4 <USB_Device_ProcessControlRequest+0x428>
		return;
 8003ce2:	bf00      	nop
}
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20000c0c 	.word	0x20000c0c
 8003cf0:	20000f59 	.word	0x20000f59
 8003cf4:	20000f5c 	.word	0x20000f5c

08003cf8 <USBD_HandleEP0_IN>:
 * \brief Handle complete IN transfer on EP0
 *
 * In \ref IN_DATA state it starts a receive and switches to \ref OUT_STATUS state.
 * In \ref IN_STATUS state its starts a new read of setup packets and switches to \ref IDLE.
 */
void USBD_HandleEP0_IN() {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
	if (device.EP0_State == IN_DATA) {
 8003cfc:	4b10      	ldr	r3, [pc, #64]	; (8003d40 <USBD_HandleEP0_IN+0x48>)
 8003cfe:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d109      	bne.n	8003d1a <USBD_HandleEP0_IN+0x22>
		/* Read zero length out data packet */
		device.Driver->EndpointReadStart(0,0);
 8003d06:	4b0e      	ldr	r3, [pc, #56]	; (8003d40 <USBD_HandleEP0_IN+0x48>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	2000      	movs	r0, #0
 8003d10:	4798      	blx	r3
		device.EP0_State = OUT_STATUS;
 8003d12:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <USBD_HandleEP0_IN+0x48>)
 8003d14:	2205      	movs	r2, #5
 8003d16:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
	if (device.EP0_State == IN_STATUS) {
 8003d1a:	4b09      	ldr	r3, [pc, #36]	; (8003d40 <USBD_HandleEP0_IN+0x48>)
 8003d1c:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8003d20:	2b03      	cmp	r3, #3
 8003d22:	d10b      	bne.n	8003d3c <USBD_HandleEP0_IN+0x44>
		/* Request new setup packet */
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 8003d24:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <USBD_HandleEP0_IN+0x48>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2a:	4a05      	ldr	r2, [pc, #20]	; (8003d40 <USBD_HandleEP0_IN+0x48>)
 8003d2c:	7912      	ldrb	r2, [r2, #4]
 8003d2e:	2118      	movs	r1, #24
 8003d30:	4610      	mov	r0, r2
 8003d32:	4798      	blx	r3
		device.EP0_State = IDLE;
 8003d34:	4b02      	ldr	r3, [pc, #8]	; (8003d40 <USBD_HandleEP0_IN+0x48>)
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
}
 8003d3c:	bf00      	nop
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	20000c0c 	.word	0x20000c0c

08003d44 <USBD_HandleEP0_OUT>:
 * \brief Handle complete OUT transfer on EP0
 *
 * Handles the OUT packet based on the state of endpoint 0. Starts a new read for new SETUP packets, when in \ref OUT_STATUS.
 * When endpoint 0 is in \ref OUT_DATA state, it handles the received data and starts a write transaction for \ref IN_STATUS.
 */
void USBD_HandleEP0_OUT() {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
	if (device.EP0_State == OUT_DATA) {
 8003d48:	4b12      	ldr	r3, [pc, #72]	; (8003d94 <USBD_HandleEP0_OUT+0x50>)
 8003d4a:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d10c      	bne.n	8003d6c <USBD_HandleEP0_OUT+0x28>
		/* Now we have the data for handling the request */
		USB_Device_ProcessControlRequest();
 8003d52:	f7ff fdb3 	bl	80038bc <USB_Device_ProcessControlRequest>
		/* Zero length packet for status stage */
		device.Driver->EndpointWrite(ENDPOINT_DIR_MASK & 0,0,0);
 8003d56:	4b0f      	ldr	r3, [pc, #60]	; (8003d94 <USBD_HandleEP0_OUT+0x50>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	2100      	movs	r1, #0
 8003d60:	2000      	movs	r0, #0
 8003d62:	4798      	blx	r3
		device.EP0_State = IN_STATUS;
 8003d64:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <USBD_HandleEP0_OUT+0x50>)
 8003d66:	2203      	movs	r2, #3
 8003d68:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
	if (device.EP0_State == OUT_STATUS) {
 8003d6c:	4b09      	ldr	r3, [pc, #36]	; (8003d94 <USBD_HandleEP0_OUT+0x50>)
 8003d6e:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8003d72:	2b05      	cmp	r3, #5
 8003d74:	d10b      	bne.n	8003d8e <USBD_HandleEP0_OUT+0x4a>
		/* Request new setup packet */
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 8003d76:	4b07      	ldr	r3, [pc, #28]	; (8003d94 <USBD_HandleEP0_OUT+0x50>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7c:	4a05      	ldr	r2, [pc, #20]	; (8003d94 <USBD_HandleEP0_OUT+0x50>)
 8003d7e:	7912      	ldrb	r2, [r2, #4]
 8003d80:	2118      	movs	r1, #24
 8003d82:	4610      	mov	r0, r2
 8003d84:	4798      	blx	r3
		device.EP0_State = IDLE;
 8003d86:	4b03      	ldr	r3, [pc, #12]	; (8003d94 <USBD_HandleEP0_OUT+0x50>)
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
}
 8003d8e:	bf00      	nop
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	20000c0c 	.word	0x20000c0c

08003d98 <USBD_HandleEP0_SETUP>:
 * Handles the setup package an switches to correct state. If data is send from host to device it switches into \ref OUT_DATA state.
 * When the hosts sends all data within the setup package and \ref wLength equals zero, starts processing the request and sends a
 * in status reponse including the switch to \ref IN_STATUS.
 * When the host expects data from the device, the function processes the control request and switches to \ref IN_DATA state.
 */
void USBD_HandleEP0_SETUP() {
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
	/* read setup package from ep0 */
	int32_t ret_val = device.Driver->EndpointRead(0,(void*)&USB_ControlRequest,8);
 8003d9e:	4b21      	ldr	r3, [pc, #132]	; (8003e24 <USBD_HandleEP0_SETUP+0x8c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	2208      	movs	r2, #8
 8003da6:	4920      	ldr	r1, [pc, #128]	; (8003e28 <USBD_HandleEP0_SETUP+0x90>)
 8003da8:	2000      	movs	r0, #0
 8003daa:	4798      	blx	r3
 8003dac:	6078      	str	r0, [r7, #4]
#if NO_COPY_DRIVER
	MEMCPY(&USB_ControlRequest,device.Endpoints[0].OutBuffer,sizeof(USB_ControlRequest));
#endif
	device.IsSetupRecieved = true;
 8003dae:	4a1d      	ldr	r2, [pc, #116]	; (8003e24 <USBD_HandleEP0_SETUP+0x8c>)
 8003db0:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8003db4:	f043 0302 	orr.w	r3, r3, #2
 8003db8:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
	if (ret_val != 8 )
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d12c      	bne.n	8003e1c <USBD_HandleEP0_SETUP+0x84>
		return;

	/* preprocess */
	/* if length is zero we have only a in_status phase */
	if (USB_ControlRequest.wLength==0) {
 8003dc2:	4b19      	ldr	r3, [pc, #100]	; (8003e28 <USBD_HandleEP0_SETUP+0x90>)
 8003dc4:	88db      	ldrh	r3, [r3, #6]
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10d      	bne.n	8003de8 <USBD_HandleEP0_SETUP+0x50>
		device.EP0_State = IN_STATUS;
 8003dcc:	4b15      	ldr	r3, [pc, #84]	; (8003e24 <USBD_HandleEP0_SETUP+0x8c>)
 8003dce:	2203      	movs	r2, #3
 8003dd0:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
		USB_Device_ProcessControlRequest();
 8003dd4:	f7ff fd72 	bl	80038bc <USB_Device_ProcessControlRequest>
		device.Driver->EndpointWrite(0,0,0);
 8003dd8:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <USBD_HandleEP0_SETUP+0x8c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	2200      	movs	r2, #0
 8003de0:	2100      	movs	r1, #0
 8003de2:	2000      	movs	r0, #0
 8003de4:	4798      	blx	r3
 8003de6:	e01a      	b.n	8003e1e <USBD_HandleEP0_SETUP+0x86>
	} else {
		if (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) {
 8003de8:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <USBD_HandleEP0_SETUP+0x90>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	b25b      	sxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	da06      	bge.n	8003e00 <USBD_HandleEP0_SETUP+0x68>
			device.EP0_State = IN_DATA;
 8003df2:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <USBD_HandleEP0_SETUP+0x8c>)
 8003df4:	2202      	movs	r2, #2
 8003df6:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
			USB_Device_ProcessControlRequest();
 8003dfa:	f7ff fd5f 	bl	80038bc <USB_Device_ProcessControlRequest>
 8003dfe:	e00e      	b.n	8003e1e <USBD_HandleEP0_SETUP+0x86>
		}
		else {
			device.EP0_State = OUT_DATA;
 8003e00:	4b08      	ldr	r3, [pc, #32]	; (8003e24 <USBD_HandleEP0_SETUP+0x8c>)
 8003e02:	2204      	movs	r2, #4
 8003e04:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
			/* Do not process request here, first read data */
			device.Driver->EndpointReadStart(0,USB_ControlRequest.wLength);
 8003e08:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <USBD_HandleEP0_SETUP+0x8c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0e:	4a06      	ldr	r2, [pc, #24]	; (8003e28 <USBD_HandleEP0_SETUP+0x90>)
 8003e10:	88d2      	ldrh	r2, [r2, #6]
 8003e12:	b292      	uxth	r2, r2
 8003e14:	4611      	mov	r1, r2
 8003e16:	2000      	movs	r0, #0
 8003e18:	4798      	blx	r3
 8003e1a:	e000      	b.n	8003e1e <USBD_HandleEP0_SETUP+0x86>
		return;
 8003e1c:	bf00      	nop
		}
	}
}
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	20000c0c 	.word	0x20000c0c
 8003e28:	20000f5c 	.word	0x20000f5c

08003e2c <USBD_SignalDeviceEventHandler>:
 * The device can have several events, where it notifies the application about.
 *
 * \note Not all events are available on all chip series. (Power Events are only supported on XMC4500)
 * \see USB_USBD_EVENT
 */
void USBD_SignalDeviceEventHandler(XMC_USBD_EVENT_t event) {
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	4603      	mov	r3, r0
 8003e34:	71fb      	strb	r3, [r7, #7]
	int i;
	switch (event) {
 8003e36:	79fb      	ldrb	r3, [r7, #7]
 8003e38:	2b09      	cmp	r3, #9
 8003e3a:	f200 80fd 	bhi.w	8004038 <USBD_SignalDeviceEventHandler+0x20c>
 8003e3e:	a201      	add	r2, pc, #4	; (adr r2, 8003e44 <USBD_SignalDeviceEventHandler+0x18>)
 8003e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e44:	08003f9b 	.word	0x08003f9b
 8003e48:	08003f89 	.word	0x08003f89
 8003e4c:	08003f77 	.word	0x08003f77
 8003e50:	08003f7d 	.word	0x08003f7d
 8003e54:	08003e6d 	.word	0x08003e6d
 8003e58:	08004039 	.word	0x08004039
 8003e5c:	08004021 	.word	0x08004021
 8003e60:	08004011 	.word	0x08004011
 8003e64:	08004039 	.word	0x08004039
 8003e68:	08003f71 	.word	0x08003f71
	case XMC_USBD_EVENT_RESET:
		USB_DeviceState = DEVICE_STATE_Default;
 8003e6c:	4b74      	ldr	r3, [pc, #464]	; (8004040 <USBD_SignalDeviceEventHandler+0x214>)
 8003e6e:	2202      	movs	r2, #2
 8003e70:	701a      	strb	r2, [r3, #0]
		device.EP0_State = IDLE;
 8003e72:	4b74      	ldr	r3, [pc, #464]	; (8004044 <USBD_SignalDeviceEventHandler+0x218>)
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
		device.RemoteWakeUp = 0;
 8003e7a:	4a72      	ldr	r2, [pc, #456]	; (8004044 <USBD_SignalDeviceEventHandler+0x218>)
 8003e7c:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8003e80:	f36f 0382 	bfc	r3, #2, #1
 8003e84:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
		/* Reset endpoints and configuration */
		for (i=0;i<(uint8_t)XMC_USBD_NUM_EPS; i++) {
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	e050      	b.n	8003f30 <USBD_SignalDeviceEventHandler+0x104>
			device.Endpoints[i].InInUse = 0;
 8003e8e:	4a6d      	ldr	r2, [pc, #436]	; (8004044 <USBD_SignalDeviceEventHandler+0x218>)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	212c      	movs	r1, #44	; 0x2c
 8003e94:	fb01 f303 	mul.w	r3, r1, r3
 8003e98:	441a      	add	r2, r3
 8003e9a:	8913      	ldrh	r3, [r2, #8]
 8003e9c:	f36f 1304 	bfc	r3, #4, #1
 8003ea0:	8113      	strh	r3, [r2, #8]
			device.Endpoints[i].OutInUse = 0;
 8003ea2:	4a68      	ldr	r2, [pc, #416]	; (8004044 <USBD_SignalDeviceEventHandler+0x218>)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	212c      	movs	r1, #44	; 0x2c
 8003ea8:	fb01 f303 	mul.w	r3, r1, r3
 8003eac:	441a      	add	r2, r3
 8003eae:	8913      	ldrh	r3, [r2, #8]
 8003eb0:	f36f 03c3 	bfc	r3, #3, #1
 8003eb4:	8113      	strh	r3, [r2, #8]
			device.Endpoints[i].IsHalted = 0;
 8003eb6:	4a63      	ldr	r2, [pc, #396]	; (8004044 <USBD_SignalDeviceEventHandler+0x218>)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	212c      	movs	r1, #44	; 0x2c
 8003ebc:	fb01 f303 	mul.w	r3, r1, r3
 8003ec0:	441a      	add	r2, r3
 8003ec2:	7a13      	ldrb	r3, [r2, #8]
 8003ec4:	f36f 0382 	bfc	r3, #2, #1
 8003ec8:	7213      	strb	r3, [r2, #8]
			if (i!=0 && device.Endpoints[i].IsConfigured) {
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d02c      	beq.n	8003f2a <USBD_SignalDeviceEventHandler+0xfe>
 8003ed0:	4a5c      	ldr	r2, [pc, #368]	; (8004044 <USBD_SignalDeviceEventHandler+0x218>)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	212c      	movs	r1, #44	; 0x2c
 8003ed6:	fb01 f303 	mul.w	r3, r1, r3
 8003eda:	4413      	add	r3, r2
 8003edc:	7a1b      	ldrb	r3, [r3, #8]
 8003ede:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d020      	beq.n	8003f2a <USBD_SignalDeviceEventHandler+0xfe>
				device.Driver->EndpointUnconfigure(device.Endpoints[i].Address);
 8003ee8:	4b56      	ldr	r3, [pc, #344]	; (8004044 <USBD_SignalDeviceEventHandler+0x218>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	4955      	ldr	r1, [pc, #340]	; (8004044 <USBD_SignalDeviceEventHandler+0x218>)
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	202c      	movs	r0, #44	; 0x2c
 8003ef4:	fb00 f202 	mul.w	r2, r0, r2
 8003ef8:	440a      	add	r2, r1
 8003efa:	3204      	adds	r2, #4
 8003efc:	7812      	ldrb	r2, [r2, #0]
 8003efe:	4610      	mov	r0, r2
 8003f00:	4798      	blx	r3
				device.Endpoints[i].IsConfigured = 0;
 8003f02:	4a50      	ldr	r2, [pc, #320]	; (8004044 <USBD_SignalDeviceEventHandler+0x218>)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	212c      	movs	r1, #44	; 0x2c
 8003f08:	fb01 f303 	mul.w	r3, r1, r3
 8003f0c:	441a      	add	r2, r3
 8003f0e:	7a13      	ldrb	r3, [r2, #8]
 8003f10:	f36f 0300 	bfc	r3, #0, #1
 8003f14:	7213      	strb	r3, [r2, #8]
				device.Endpoints[i].IsEnabled = 0;
 8003f16:	4a4b      	ldr	r2, [pc, #300]	; (8004044 <USBD_SignalDeviceEventHandler+0x218>)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	212c      	movs	r1, #44	; 0x2c
 8003f1c:	fb01 f303 	mul.w	r3, r1, r3
 8003f20:	441a      	add	r2, r3
 8003f22:	7a13      	ldrb	r3, [r2, #8]
 8003f24:	f36f 0341 	bfc	r3, #1, #1
 8003f28:	7213      	strb	r3, [r2, #8]
		for (i=0;i<(uint8_t)XMC_USBD_NUM_EPS; i++) {
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b06      	cmp	r3, #6
 8003f34:	ddab      	ble.n	8003e8e <USBD_SignalDeviceEventHandler+0x62>
			}
		}
		device.Configuration = 0;
 8003f36:	4b43      	ldr	r3, [pc, #268]	; (8004044 <USBD_SignalDeviceEventHandler+0x218>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
		for (i=0;i<NUM_INTERFACES;i++) {
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	e009      	b.n	8003f58 <USBD_SignalDeviceEventHandler+0x12c>
			device.InterfaceSettings[i] = 0;
 8003f44:	4a3f      	ldr	r2, [pc, #252]	; (8004044 <USBD_SignalDeviceEventHandler+0x218>)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003f4e:	2200      	movs	r2, #0
 8003f50:	701a      	strb	r2, [r3, #0]
		for (i=0;i<NUM_INTERFACES;i++) {
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	3301      	adds	r3, #1
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	ddf2      	ble.n	8003f44 <USBD_SignalDeviceEventHandler+0x118>
		}
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 8003f5e:	4b39      	ldr	r3, [pc, #228]	; (8004044 <USBD_SignalDeviceEventHandler+0x218>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f64:	4a37      	ldr	r2, [pc, #220]	; (8004044 <USBD_SignalDeviceEventHandler+0x218>)
 8003f66:	7912      	ldrb	r2, [r2, #4]
 8003f68:	2118      	movs	r1, #24
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	4798      	blx	r3
		break;
 8003f6e:	e064      	b.n	800403a <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_SOF:
		EVENT_USB_Device_StartOfFrame();
 8003f70:	f002 f8f2 	bl	8006158 <USB_Event_Stub>
		break;
 8003f74:	e061      	b.n	800403a <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_CONNECT:
		EVENT_USB_Device_Connect();
 8003f76:	f7fc fd7a 	bl	8000a6e <EVENT_USB_Device_Connect>
		break;
 8003f7a:	e05e      	b.n	800403a <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_DISCONNECT:
		USB_DeviceState = DEVICE_STATE_Powered;
 8003f7c:	4b30      	ldr	r3, [pc, #192]	; (8004040 <USBD_SignalDeviceEventHandler+0x214>)
 8003f7e:	2201      	movs	r2, #1
 8003f80:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_Disconnect();
 8003f82:	f002 f8e9 	bl	8006158 <USB_Event_Stub>
		break;
 8003f86:	e058      	b.n	800403a <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_POWER_OFF:
		 USB_DeviceState = DEVICE_STATE_Unattached;
 8003f88:	4b2d      	ldr	r3, [pc, #180]	; (8004040 <USBD_SignalDeviceEventHandler+0x214>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	701a      	strb	r2, [r3, #0]
		 device.Driver->EndpointUnconfigure(0);
 8003f8e:	4b2d      	ldr	r3, [pc, #180]	; (8004044 <USBD_SignalDeviceEventHandler+0x218>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	2000      	movs	r0, #0
 8003f96:	4798      	blx	r3
		 break;
 8003f98:	e04f      	b.n	800403a <USBD_SignalDeviceEventHandler+0x20e>
    case XMC_USBD_EVENT_POWER_ON:
		 USB_DeviceState = DEVICE_STATE_Powered;
 8003f9a:	4b29      	ldr	r3, [pc, #164]	; (8004040 <USBD_SignalDeviceEventHandler+0x214>)
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	701a      	strb	r2, [r3, #0]
		 memset(&device,0x0,sizeof(USB_Device_t));
 8003fa0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	4827      	ldr	r0, [pc, #156]	; (8004044 <USBD_SignalDeviceEventHandler+0x218>)
 8003fa8:	f002 fe2a 	bl	8006c00 <memset>
		 device.Driver = &Driver_USBD0;
 8003fac:	4b25      	ldr	r3, [pc, #148]	; (8004044 <USBD_SignalDeviceEventHandler+0x218>)
 8003fae:	4a26      	ldr	r2, [pc, #152]	; (8004048 <USBD_SignalDeviceEventHandler+0x21c>)
 8003fb0:	601a      	str	r2, [r3, #0]
		 device.EP0_State = IDLE;
 8003fb2:	4b24      	ldr	r3, [pc, #144]	; (8004044 <USBD_SignalDeviceEventHandler+0x218>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
		 device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 8003fba:	4b22      	ldr	r3, [pc, #136]	; (8004044 <USBD_SignalDeviceEventHandler+0x218>)
 8003fbc:	4a23      	ldr	r2, [pc, #140]	; (800404c <USBD_SignalDeviceEventHandler+0x220>)
 8003fbe:	621a      	str	r2, [r3, #32]
		 device.Endpoints[0].InBufferLength = 256;
 8003fc0:	4b20      	ldr	r3, [pc, #128]	; (8004044 <USBD_SignalDeviceEventHandler+0x218>)
 8003fc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fc6:	625a      	str	r2, [r3, #36]	; 0x24
		 device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 8003fc8:	4b1e      	ldr	r3, [pc, #120]	; (8004044 <USBD_SignalDeviceEventHandler+0x218>)
 8003fca:	4a21      	ldr	r2, [pc, #132]	; (8004050 <USBD_SignalDeviceEventHandler+0x224>)
 8003fcc:	615a      	str	r2, [r3, #20]
		 device.Endpoints[0].OutBufferLength = 256;
 8003fce:	4b1d      	ldr	r3, [pc, #116]	; (8004044 <USBD_SignalDeviceEventHandler+0x218>)
 8003fd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fd4:	619a      	str	r2, [r3, #24]
		 device.Endpoints[0].Direction = 0;
 8003fd6:	4a1b      	ldr	r2, [pc, #108]	; (8004044 <USBD_SignalDeviceEventHandler+0x218>)
 8003fd8:	7913      	ldrb	r3, [r2, #4]
 8003fda:	f36f 13c7 	bfc	r3, #7, #1
 8003fde:	7113      	strb	r3, [r2, #4]
		 device.Endpoints[0].IsConfigured = 1;
 8003fe0:	4a18      	ldr	r2, [pc, #96]	; (8004044 <USBD_SignalDeviceEventHandler+0x218>)
 8003fe2:	7a13      	ldrb	r3, [r2, #8]
 8003fe4:	f043 0301 	orr.w	r3, r3, #1
 8003fe8:	7213      	strb	r3, [r2, #8]
		 device.Endpoints[0].IsEnabled = 1;
 8003fea:	4a16      	ldr	r2, [pc, #88]	; (8004044 <USBD_SignalDeviceEventHandler+0x218>)
 8003fec:	7a13      	ldrb	r3, [r2, #8]
 8003fee:	f043 0302 	orr.w	r3, r3, #2
 8003ff2:	7213      	strb	r3, [r2, #8]
		 device.Endpoints[0].MaxPacketSize = 64;
 8003ff4:	4a13      	ldr	r2, [pc, #76]	; (8004044 <USBD_SignalDeviceEventHandler+0x218>)
 8003ff6:	8913      	ldrh	r3, [r2, #8]
 8003ff8:	2140      	movs	r1, #64	; 0x40
 8003ffa:	f361 138c 	bfi	r3, r1, #6, #7
 8003ffe:	8113      	strh	r3, [r2, #8]

		  /* then configure endpoint 0 */
		 device.Driver->EndpointConfigure(0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 8004000:	4b10      	ldr	r3, [pc, #64]	; (8004044 <USBD_SignalDeviceEventHandler+0x218>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	2240      	movs	r2, #64	; 0x40
 8004008:	2100      	movs	r1, #0
 800400a:	2000      	movs	r0, #0
 800400c:	4798      	blx	r3
					   (uint8_t)XMC_USBD_MAX_PACKET_SIZE);

		break;
 800400e:	e014      	b.n	800403a <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_REMOTE_WAKEUP:
		break;
	case XMC_USBD_EVENT_RESUME:
		USB_DeviceState = device.PreSuspendDeviceState;
 8004010:	4b0c      	ldr	r3, [pc, #48]	; (8004044 <USBD_SignalDeviceEventHandler+0x218>)
 8004012:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 8004016:	4b0a      	ldr	r3, [pc, #40]	; (8004040 <USBD_SignalDeviceEventHandler+0x214>)
 8004018:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_WakeUp();
 800401a:	f002 f89d 	bl	8006158 <USB_Event_Stub>
		break;
 800401e:	e00c      	b.n	800403a <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_SUSPEND:
		device.PreSuspendDeviceState = USB_DeviceState;
 8004020:	4b07      	ldr	r3, [pc, #28]	; (8004040 <USBD_SignalDeviceEventHandler+0x214>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	b2da      	uxtb	r2, r3
 8004026:	4b07      	ldr	r3, [pc, #28]	; (8004044 <USBD_SignalDeviceEventHandler+0x218>)
 8004028:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
		USB_DeviceState = DEVICE_STATE_Suspended;
 800402c:	4b04      	ldr	r3, [pc, #16]	; (8004040 <USBD_SignalDeviceEventHandler+0x214>)
 800402e:	2205      	movs	r2, #5
 8004030:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_Suspend();
 8004032:	f002 f891 	bl	8006158 <USB_Event_Stub>
		break;
 8004036:	e000      	b.n	800403a <USBD_SignalDeviceEventHandler+0x20e>
	default:
		return;
 8004038:	bf00      	nop
	}
}
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	20000f59 	.word	0x20000f59
 8004044:	20000c0c 	.word	0x20000c0c
 8004048:	08006dc8 	.word	0x08006dc8
 800404c:	20000a0c 	.word	0x20000a0c
 8004050:	20000b0c 	.word	0x20000b0c

08004054 <USBD_SignalEndpointEvent_Handler>:
 *
 * \param[in] ep_addr Endpoint address
 * \param[in] ep_event Endpoint event type
 *
 */
void USBD_SignalEndpointEvent_Handler (uint8_t ep_addr, XMC_USBD_EP_EVENT_t ep_event) {
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	4603      	mov	r3, r0
 800405c:	460a      	mov	r2, r1
 800405e:	71fb      	strb	r3, [r7, #7]
 8004060:	4613      	mov	r3, r2
 8004062:	71bb      	strb	r3, [r7, #6]
	USBD_Endpoint_t *ep =  &device.Endpoints[ep_addr & ENDPOINT_EPNUM_MASK];
 8004064:	79fb      	ldrb	r3, [r7, #7]
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	222c      	movs	r2, #44	; 0x2c
 800406c:	fb02 f303 	mul.w	r3, r2, r3
 8004070:	4a5d      	ldr	r2, [pc, #372]	; (80041e8 <USBD_SignalEndpointEvent_Handler+0x194>)
 8004072:	4413      	add	r3, r2
 8004074:	3304      	adds	r3, #4
 8004076:	617b      	str	r3, [r7, #20]
	uint8_t temp_num,temp_dir;
	int32_t data_count;
	/* store CurrentEndpoint and direction for restore after handling */
	temp_num = device.CurrentEndpoint;
 8004078:	4b5b      	ldr	r3, [pc, #364]	; (80041e8 <USBD_SignalEndpointEvent_Handler+0x194>)
 800407a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800407e:	74fb      	strb	r3, [r7, #19]
	temp_dir = device.CurrentDirection;
 8004080:	4b59      	ldr	r3, [pc, #356]	; (80041e8 <USBD_SignalEndpointEvent_Handler+0x194>)
 8004082:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 8004086:	74bb      	strb	r3, [r7, #18]
	/* select the given endpoint */
	device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	b2da      	uxtb	r2, r3
 8004090:	4b55      	ldr	r3, [pc, #340]	; (80041e8 <USBD_SignalEndpointEvent_Handler+0x194>)
 8004092:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
	device.CurrentDirection = ep_addr & ENDPOINT_DIR_MASK;
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800409c:	b2da      	uxtb	r2, r3
 800409e:	4b52      	ldr	r3, [pc, #328]	; (80041e8 <USBD_SignalEndpointEvent_Handler+0x194>)
 80040a0:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	/* choose what to do based on the event */
	switch (ep_event) {
 80040a4:	79bb      	ldrb	r3, [r7, #6]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d013      	beq.n	80040d2 <USBD_SignalEndpointEvent_Handler+0x7e>
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d03a      	beq.n	8004124 <USBD_SignalEndpointEvent_Handler+0xd0>
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f040 808e 	bne.w	80041d0 <USBD_SignalEndpointEvent_Handler+0x17c>
	case XMC_USBD_EP_EVENT_SETUP:
		ep->OutInUse = 0;
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	8893      	ldrh	r3, [r2, #4]
 80040b8:	f36f 03c3 	bfc	r3, #3, #1
 80040bc:	8093      	strh	r3, [r2, #4]
		switch(device.CurrentEndpoint) {
 80040be:	4b4a      	ldr	r3, [pc, #296]	; (80041e8 <USBD_SignalEndpointEvent_Handler+0x194>)
 80040c0:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d000      	beq.n	80040ca <USBD_SignalEndpointEvent_Handler+0x76>
		case 0:
			USBD_HandleEP0_SETUP();
			break;
		default:
			break;
 80040c8:	e002      	b.n	80040d0 <USBD_SignalEndpointEvent_Handler+0x7c>
			USBD_HandleEP0_SETUP();
 80040ca:	f7ff fe65 	bl	8003d98 <USBD_HandleEP0_SETUP>
			break;
 80040ce:	bf00      	nop
		}
		break;
 80040d0:	e07e      	b.n	80041d0 <USBD_SignalEndpointEvent_Handler+0x17c>
	case XMC_USBD_EP_EVENT_OUT:
		ep->IsOutRecieved = 1;
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	8893      	ldrh	r3, [r2, #4]
 80040d6:	f043 0320 	orr.w	r3, r3, #32
 80040da:	8093      	strh	r3, [r2, #4]
		if (ep->OutBytesAvailable == 0) {
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d110      	bne.n	8004106 <USBD_SignalEndpointEvent_Handler+0xb2>
			ep->OutOffset = 0; /* clear offset, new data is there */
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2200      	movs	r2, #0
 80040e8:	60da      	str	r2, [r3, #12]
			ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 80040ea:	4b3f      	ldr	r3, [pc, #252]	; (80041e8 <USBD_SignalEndpointEvent_Handler+0x194>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	7810      	ldrb	r0, [r2, #0]
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	6911      	ldr	r1, [r2, #16]
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	6952      	ldr	r2, [r2, #20]
 80040fc:	4798      	blx	r3
 80040fe:	4603      	mov	r3, r0
 8004100:	461a      	mov	r2, r3
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	609a      	str	r2, [r3, #8]
		}
		ep->OutInUse = 0;
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	8893      	ldrh	r3, [r2, #4]
 800410a:	f36f 03c3 	bfc	r3, #3, #1
 800410e:	8093      	strh	r3, [r2, #4]
		switch(device.CurrentEndpoint) {
 8004110:	4b35      	ldr	r3, [pc, #212]	; (80041e8 <USBD_SignalEndpointEvent_Handler+0x194>)
 8004112:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004116:	2b00      	cmp	r3, #0
 8004118:	d000      	beq.n	800411c <USBD_SignalEndpointEvent_Handler+0xc8>
		case 0:
			USBD_HandleEP0_OUT();
			break;
		default:
			break;
 800411a:	e002      	b.n	8004122 <USBD_SignalEndpointEvent_Handler+0xce>
			USBD_HandleEP0_OUT();
 800411c:	f7ff fe12 	bl	8003d44 <USBD_HandleEP0_OUT>
			break;
 8004120:	bf00      	nop
		}
		break;
 8004122:	e055      	b.n	80041d0 <USBD_SignalEndpointEvent_Handler+0x17c>
	case XMC_USBD_EP_EVENT_IN:
		/* loop write transfers */
		if (ep->InDataLeft> 0) {
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	2b00      	cmp	r3, #0
 800412a:	d017      	beq.n	800415c <USBD_SignalEndpointEvent_Handler+0x108>
			data_count = device.Driver->EndpointWrite(ep->Address,ep->InDataBuffer,ep->InDataLeft);
 800412c:	4b2e      	ldr	r3, [pc, #184]	; (80041e8 <USBD_SignalEndpointEvent_Handler+0x194>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	7810      	ldrb	r0, [r2, #0]
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800413e:	4798      	blx	r3
 8004140:	60f8      	str	r0, [r7, #12]
			ep->InDataLeft -= data_count;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	1ad2      	subs	r2, r2, r3
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	625a      	str	r2, [r3, #36]	; 0x24
			ep->InDataBuffer+= data_count;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	441a      	add	r2, r3
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	629a      	str	r2, [r3, #40]	; 0x28
			return;
 800415a:	e041      	b.n	80041e0 <USBD_SignalEndpointEvent_Handler+0x18c>
		} else if (ep->Number == 0 && ep->InBytesAvailable > 0 && ep->InBytesAvailable!=USB_ControlRequest.wLength && ep->InBytesAvailable % ep->MaxPacketSize == 0) {
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	f003 030f 	and.w	r3, r3, #15
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d120      	bne.n	80041ac <USBD_SignalEndpointEvent_Handler+0x158>
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d01c      	beq.n	80041ac <USBD_SignalEndpointEvent_Handler+0x158>
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	4a1d      	ldr	r2, [pc, #116]	; (80041ec <USBD_SignalEndpointEvent_Handler+0x198>)
 8004178:	88d2      	ldrh	r2, [r2, #6]
 800417a:	b292      	uxth	r2, r2
 800417c:	4293      	cmp	r3, r2
 800417e:	d015      	beq.n	80041ac <USBD_SignalEndpointEvent_Handler+0x158>
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	8892      	ldrh	r2, [r2, #4]
 8004188:	f3c2 1286 	ubfx	r2, r2, #6, #7
 800418c:	b2d2      	uxtb	r2, r2
 800418e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004192:	fb02 f201 	mul.w	r2, r2, r1
 8004196:	1a9b      	subs	r3, r3, r2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d107      	bne.n	80041ac <USBD_SignalEndpointEvent_Handler+0x158>
			/* if the amount of data for endpoint 0 is exact the requested amount, then no zlp has to be send */
			device.Driver->EndpointWrite(ep->Address,0,0);
 800419c:	4b12      	ldr	r3, [pc, #72]	; (80041e8 <USBD_SignalEndpointEvent_Handler+0x194>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	7810      	ldrb	r0, [r2, #0]
 80041a6:	2200      	movs	r2, #0
 80041a8:	2100      	movs	r1, #0
 80041aa:	4798      	blx	r3
		}
		ep->InBytesAvailable = 0;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	2200      	movs	r2, #0
 80041b0:	619a      	str	r2, [r3, #24]
		ep->InInUse = 0;
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	8893      	ldrh	r3, [r2, #4]
 80041b6:	f36f 1304 	bfc	r3, #4, #1
 80041ba:	8093      	strh	r3, [r2, #4]
		switch(device.CurrentEndpoint) {
 80041bc:	4b0a      	ldr	r3, [pc, #40]	; (80041e8 <USBD_SignalEndpointEvent_Handler+0x194>)
 80041be:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d000      	beq.n	80041c8 <USBD_SignalEndpointEvent_Handler+0x174>
		case 0:
			USBD_HandleEP0_IN();
			break;
		default:
			break;
 80041c6:	e002      	b.n	80041ce <USBD_SignalEndpointEvent_Handler+0x17a>
			USBD_HandleEP0_IN();
 80041c8:	f7ff fd96 	bl	8003cf8 <USBD_HandleEP0_IN>
			break;
 80041cc:	bf00      	nop
		}
		break;
 80041ce:	bf00      	nop
	}
	device.CurrentEndpoint = temp_num;
 80041d0:	4a05      	ldr	r2, [pc, #20]	; (80041e8 <USBD_SignalEndpointEvent_Handler+0x194>)
 80041d2:	7cfb      	ldrb	r3, [r7, #19]
 80041d4:	f882 313c 	strb.w	r3, [r2, #316]	; 0x13c
	device.CurrentDirection = temp_dir;
 80041d8:	4a03      	ldr	r2, [pc, #12]	; (80041e8 <USBD_SignalEndpointEvent_Handler+0x194>)
 80041da:	7cbb      	ldrb	r3, [r7, #18]
 80041dc:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d
}
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	20000c0c 	.word	0x20000c0c
 80041ec:	20000f5c 	.word	0x20000f5c

080041f0 <USBD_Initialize>:
 * \brief Initialize driver core and driver
 *
 * Intializes the USB driver core data structures and sets it into default state. Afterwards
 * it initializes the USB device controller driver and prepare it for connection via \ref USBD_Connect.
 */
int USBD_Initialize(XMC_USBD_t *usb_init) {
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
	int32_t status = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]
	memset(&device,0x0,sizeof(USB_Device_t));
 80041fc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004200:	2100      	movs	r1, #0
 8004202:	4829      	ldr	r0, [pc, #164]	; (80042a8 <USBD_Initialize+0xb8>)
 8004204:	f002 fcfc 	bl	8006c00 <memset>
	USB_DeviceState = DEVICE_STATE_Unattached;
 8004208:	4b28      	ldr	r3, [pc, #160]	; (80042ac <USBD_Initialize+0xbc>)
 800420a:	2200      	movs	r2, #0
 800420c:	701a      	strb	r2, [r3, #0]
	device.Driver = &Driver_USBD0;
 800420e:	4b26      	ldr	r3, [pc, #152]	; (80042a8 <USBD_Initialize+0xb8>)
 8004210:	4a27      	ldr	r2, [pc, #156]	; (80042b0 <USBD_Initialize+0xc0>)
 8004212:	601a      	str	r2, [r3, #0]
	device.EP0_State = IDLE;
 8004214:	4b24      	ldr	r3, [pc, #144]	; (80042a8 <USBD_Initialize+0xb8>)
 8004216:	2201      	movs	r2, #1
 8004218:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 800421c:	4b22      	ldr	r3, [pc, #136]	; (80042a8 <USBD_Initialize+0xb8>)
 800421e:	4a25      	ldr	r2, [pc, #148]	; (80042b4 <USBD_Initialize+0xc4>)
 8004220:	621a      	str	r2, [r3, #32]
	device.Endpoints[0].InBufferLength = 256;
 8004222:	4b21      	ldr	r3, [pc, #132]	; (80042a8 <USBD_Initialize+0xb8>)
 8004224:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004228:	625a      	str	r2, [r3, #36]	; 0x24
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 800422a:	4b1f      	ldr	r3, [pc, #124]	; (80042a8 <USBD_Initialize+0xb8>)
 800422c:	4a22      	ldr	r2, [pc, #136]	; (80042b8 <USBD_Initialize+0xc8>)
 800422e:	615a      	str	r2, [r3, #20]
	device.Endpoints[0].OutBufferLength = 256;
 8004230:	4b1d      	ldr	r3, [pc, #116]	; (80042a8 <USBD_Initialize+0xb8>)
 8004232:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004236:	619a      	str	r2, [r3, #24]
	device.Endpoints[0].Direction = 0;
 8004238:	4a1b      	ldr	r2, [pc, #108]	; (80042a8 <USBD_Initialize+0xb8>)
 800423a:	7913      	ldrb	r3, [r2, #4]
 800423c:	f36f 13c7 	bfc	r3, #7, #1
 8004240:	7113      	strb	r3, [r2, #4]
	device.Endpoints[0].IsConfigured = 1;
 8004242:	4a19      	ldr	r2, [pc, #100]	; (80042a8 <USBD_Initialize+0xb8>)
 8004244:	7a13      	ldrb	r3, [r2, #8]
 8004246:	f043 0301 	orr.w	r3, r3, #1
 800424a:	7213      	strb	r3, [r2, #8]
	device.Endpoints[0].IsEnabled = 1;
 800424c:	4a16      	ldr	r2, [pc, #88]	; (80042a8 <USBD_Initialize+0xb8>)
 800424e:	7a13      	ldrb	r3, [r2, #8]
 8004250:	f043 0302 	orr.w	r3, r3, #2
 8004254:	7213      	strb	r3, [r2, #8]
	device.Endpoints[0].MaxPacketSize = 64;
 8004256:	4a14      	ldr	r2, [pc, #80]	; (80042a8 <USBD_Initialize+0xb8>)
 8004258:	8913      	ldrh	r3, [r2, #8]
 800425a:	2140      	movs	r1, #64	; 0x40
 800425c:	f361 138c 	bfi	r3, r1, #6, #7
 8004260:	8113      	strh	r3, [r2, #8]

	/* First initalize the device */
	status = device.Driver->Initialize(usb_init);
 8004262:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <USBD_Initialize+0xb8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	4798      	blx	r3
 800426c:	4603      	mov	r3, r0
 800426e:	60fb      	str	r3, [r7, #12]
	if (status != XMC_USBD_STATUS_OK)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <USBD_Initialize+0x8c>
		return -1;
 8004276:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800427a:	e011      	b.n	80042a0 <USBD_Initialize+0xb0>

	/* then configure endpoint 0 */
	device.Driver->EndpointConfigure(0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 800427c:	4b0a      	ldr	r3, [pc, #40]	; (80042a8 <USBD_Initialize+0xb8>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	2240      	movs	r2, #64	; 0x40
 8004284:	2100      	movs	r1, #0
 8004286:	2000      	movs	r0, #0
 8004288:	4798      	blx	r3
			(uint8_t)XMC_USBD_MAX_PACKET_SIZE);
	if (status != XMC_USBD_STATUS_OK) {
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d006      	beq.n	800429e <USBD_Initialize+0xae>
		device.Driver->Uninitialize();
 8004290:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <USBD_Initialize+0xb8>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	4798      	blx	r3
		return -1;
 8004298:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800429c:	e000      	b.n	80042a0 <USBD_Initialize+0xb0>
	}

	return 0;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	20000c0c 	.word	0x20000c0c
 80042ac:	20000f59 	.word	0x20000f59
 80042b0:	08006dc8 	.word	0x08006dc8
 80042b4:	20000a0c 	.word	0x20000a0c
 80042b8:	20000b0c 	.word	0x20000b0c

080042bc <USB_IsEnumDone>:
/**
 * \brief Is the enumeration finished?
 *
 * Tell the USB device controller driver if the enumeration interrupt have been reached
 */
int USB_IsEnumDone(void){
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
	if (device.Driver->IsEnumDone())
 80042c0:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <USB_IsEnumDone+0x1c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c6:	4798      	blx	r3
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <USB_IsEnumDone+0x16>
		return 1;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e000      	b.n	80042d4 <USB_IsEnumDone+0x18>
	else
		return 0;
 80042d2:	2300      	movs	r3, #0
 }
 80042d4:	4618      	mov	r0, r3
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	20000c0c 	.word	0x20000c0c

080042dc <USBD_SetEndpointBuffer>:
 *
 * \param[in] addr Endpoint address
 * \param[in] buf Buffer pointer
 * \param[in] len Buffer length
 */
void USBD_SetEndpointBuffer(uint8_t addr,uint8_t *buf,uint16_t len) {
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	4603      	mov	r3, r0
 80042e4:	6039      	str	r1, [r7, #0]
 80042e6:	71fb      	strb	r3, [r7, #7]
 80042e8:	4613      	mov	r3, r2
 80042ea:	80bb      	strh	r3, [r7, #4]
	uint8_t number  = addr & ENDPOINT_EPNUM_MASK;
 80042ec:	79fb      	ldrb	r3, [r7, #7]
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	73fb      	strb	r3, [r7, #15]
	if (addr & ENDPOINT_DIR_MASK) {
 80042f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	da12      	bge.n	8004322 <USBD_SetEndpointBuffer+0x46>
		device.Endpoints[number].InBuffer = buf;
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
 80042fe:	4a15      	ldr	r2, [pc, #84]	; (8004354 <USBD_SetEndpointBuffer+0x78>)
 8004300:	212c      	movs	r1, #44	; 0x2c
 8004302:	fb01 f303 	mul.w	r3, r1, r3
 8004306:	4413      	add	r3, r2
 8004308:	3320      	adds	r3, #32
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	601a      	str	r2, [r3, #0]
		device.Endpoints[number].InBufferLength = len;
 800430e:	7bfb      	ldrb	r3, [r7, #15]
 8004310:	88ba      	ldrh	r2, [r7, #4]
 8004312:	4910      	ldr	r1, [pc, #64]	; (8004354 <USBD_SetEndpointBuffer+0x78>)
 8004314:	202c      	movs	r0, #44	; 0x2c
 8004316:	fb00 f303 	mul.w	r3, r0, r3
 800431a:	440b      	add	r3, r1
 800431c:	3324      	adds	r3, #36	; 0x24
 800431e:	601a      	str	r2, [r3, #0]
	} else {
		device.Endpoints[number].OutBuffer = buf;
		device.Endpoints[number].OutBufferLength = len;
	}
}
 8004320:	e011      	b.n	8004346 <USBD_SetEndpointBuffer+0x6a>
		device.Endpoints[number].OutBuffer = buf;
 8004322:	7bfb      	ldrb	r3, [r7, #15]
 8004324:	4a0b      	ldr	r2, [pc, #44]	; (8004354 <USBD_SetEndpointBuffer+0x78>)
 8004326:	212c      	movs	r1, #44	; 0x2c
 8004328:	fb01 f303 	mul.w	r3, r1, r3
 800432c:	4413      	add	r3, r2
 800432e:	3314      	adds	r3, #20
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	601a      	str	r2, [r3, #0]
		device.Endpoints[number].OutBufferLength = len;
 8004334:	7bfb      	ldrb	r3, [r7, #15]
 8004336:	88ba      	ldrh	r2, [r7, #4]
 8004338:	4906      	ldr	r1, [pc, #24]	; (8004354 <USBD_SetEndpointBuffer+0x78>)
 800433a:	202c      	movs	r0, #44	; 0x2c
 800433c:	fb00 f303 	mul.w	r3, r0, r3
 8004340:	440b      	add	r3, r1
 8004342:	3318      	adds	r3, #24
 8004344:	601a      	str	r2, [r3, #0]
}
 8004346:	bf00      	nop
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	20000c0c 	.word	0x20000c0c

08004358 <XMC_USBD_lDeviceActive>:
 * Therefore the endpoint inInUse flag are checked and if one endpoint is in use, 1 is returned,
 * else 0 is returned.
 * @return 1 if an endpoint is active else 0
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t result = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	73bb      	strb	r3, [r7, #14]
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8004364:	2300      	movs	r3, #0
 8004366:	73fb      	strb	r3, [r7, #15]
 8004368:	e01c      	b.n	80043a4 <XMC_USBD_lDeviceActive+0x4c>
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 800436a:	7bfb      	ldrb	r3, [r7, #15]
 800436c:	4a13      	ldr	r2, [pc, #76]	; (80043bc <XMC_USBD_lDeviceActive+0x64>)
 800436e:	2134      	movs	r1, #52	; 0x34
 8004370:	fb01 f303 	mul.w	r3, r1, r3
 8004374:	4413      	add	r3, r2
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10b      	bne.n	800439a <XMC_USBD_lDeviceActive+0x42>
 8004382:	7bfb      	ldrb	r3, [r7, #15]
 8004384:	4a0d      	ldr	r2, [pc, #52]	; (80043bc <XMC_USBD_lDeviceActive+0x64>)
 8004386:	2134      	movs	r1, #52	; 0x34
 8004388:	fb01 f303 	mul.w	r3, r1, r3
 800438c:	4413      	add	r3, r2
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <XMC_USBD_lDeviceActive+0x46>
    {
      result = 1U;
 800439a:	2301      	movs	r3, #1
 800439c:	73bb      	strb	r3, [r7, #14]
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 800439e:	7bfb      	ldrb	r3, [r7, #15]
 80043a0:	3301      	adds	r3, #1
 80043a2:	73fb      	strb	r3, [r7, #15]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	7b1b      	ldrb	r3, [r3, #12]
 80043a8:	7bfa      	ldrb	r2, [r7, #15]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d3dd      	bcc.n	800436a <XMC_USBD_lDeviceActive+0x12>
    }
  }
  return result;
 80043ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	20000d50 	.word	0x20000d50

080043c0 <XMC_USBD_lReadFifo>:
 *
 * @arg ep_num the endpoint to read for
 * @arg byte_count the byte count to read
 */
static void XMC_USBD_lReadFifo(const uint32_t ep_num,const uint32_t byte_count) 
{
 80043c0:	b480      	push	{r7}
 80043c2:	b08b      	sub	sp, #44	; 0x2c
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num];
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2234      	movs	r2, #52	; 0x34
 80043ce:	fb02 f303 	mul.w	r3, r2, r3
 80043d2:	4a34      	ldr	r2, [pc, #208]	; (80044a4 <XMC_USBD_lReadFifo+0xe4>)
 80043d4:	4413      	add	r3, r2
 80043d6:	623b      	str	r3, [r7, #32]
  uint32_t word_count;
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
 80043d8:	4b32      	ldr	r3, [pc, #200]	; (80044a4 <XMC_USBD_lReadFifo+0xe4>)
 80043da:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80043de:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 80043e0:	4a30      	ldr	r2, [pc, #192]	; (80044a4 <XMC_USBD_lReadFifo+0xe4>)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3370      	adds	r3, #112	; 0x70
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	60fb      	str	r3, [r7, #12]
  word_count = (byte_count >> 2U );
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	089b      	lsrs	r3, r3, #2
 80043f4:	61bb      	str	r3, [r7, #24]
  temp_word_count = (word_count << 2U);
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	617b      	str	r3, [r7, #20]
  /* Check if ep is enabled and has buffer */
  if (!data.b.usbactep)
 80043fc:	7b7b      	ldrb	r3, [r7, #13]
 80043fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	d047      	beq.n	8004498 <XMC_USBD_lReadFifo+0xd8>
  {
    /*Do Nothing*/
  }
  else if (ep->xferBuffer == NULL)
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	2b00      	cmp	r3, #0
 800440e:	d043      	beq.n	8004498 <XMC_USBD_lReadFifo+0xd8>
	/*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U;i < word_count; i++)
 8004410:	2300      	movs	r3, #0
 8004412:	627b      	str	r3, [r7, #36]	; 0x24
 8004414:	e00a      	b.n	800442c <XMC_USBD_lReadFifo+0x6c>
    {
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	69fa      	ldr	r2, [r7, #28]
 8004422:	6812      	ldr	r2, [r2, #0]
 8004424:	601a      	str	r2, [r3, #0]
    for (i = 0U;i < word_count; i++)
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	3301      	adds	r3, #1
 800442a:	627b      	str	r3, [r7, #36]	; 0x24
 800442c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	429a      	cmp	r2, r3
 8004432:	d3f0      	bcc.n	8004416 <XMC_USBD_lReadFifo+0x56>
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	429a      	cmp	r2, r3
 800443a:	d021      	beq.n	8004480 <XMC_USBD_lReadFifo+0xc0>
    {
      temp_data = *fifo;
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	613b      	str	r3, [r7, #16]
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 8004442:	2300      	movs	r3, #0
 8004444:	627b      	str	r3, [r7, #36]	; 0x24
 8004446:	e015      	b.n	8004474 <XMC_USBD_lReadFifo+0xb4>
      {
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	22ff      	movs	r2, #255	; 0xff
 800444e:	409a      	lsls	r2, r3
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	401a      	ands	r2, r3
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	fa22 f003 	lsr.w	r0, r2, r3
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	0099      	lsls	r1, r3, #2
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	440b      	add	r3, r1
 8004468:	4413      	add	r3, r2
 800446a:	b2c2      	uxtb	r2, r0
 800446c:	701a      	strb	r2, [r3, #0]
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	3301      	adds	r3, #1
 8004472:	627b      	str	r3, [r7, #36]	; 0x24
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	4413      	add	r3, r2
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	429a      	cmp	r2, r3
 800447e:	d8e3      	bhi.n	8004448 <XMC_USBD_lReadFifo+0x88>
      }
    }

    /* save the amount of data */
    ep->xferCount += byte_count;
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	441a      	add	r2, r3
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->xferBuffer += byte_count;
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	441a      	add	r2, r3
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004498:	bf00      	nop
 800449a:	372c      	adds	r7, #44	; 0x2c
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	20000d50 	.word	0x20000d50

080044a8 <XMC_USBD_lWriteFifo>:
 *
 * @arg[in] ep the endpoint to use
 * @return the number of bytes written to the fifo
 */
static uint32_t XMC_USBD_lWriteFifo(XMC_USBD_EP_t *const ep) 
{
 80044a8:	b480      	push	{r7}
 80044aa:	b089      	sub	sp, #36	; 0x24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  volatile uint32_t *fifo;
  uint32_t byte_count;
  uint32_t word_count;
  uint32_t result;
  uint32_t i;
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	4a23      	ldr	r2, [pc, #140]	; (8004548 <XMC_USBD_lWriteFifo+0xa0>)
 80044bc:	3378      	adds	r3, #120	; 0x78
 80044be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044c2:	60fb      	str	r3, [r7, #12]
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	4a1e      	ldr	r2, [pc, #120]	; (8004548 <XMC_USBD_lWriteFifo+0xa0>)
 80044d0:	336a      	adds	r3, #106	; 0x6a
 80044d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	60bb      	str	r3, [r7, #8]
  /* calculate the length and the amount of dwords to copy based on the fifo status */
  byte_count = ep->xferLength - ep->xferCount;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	61fb      	str	r3, [r7, #28]
  if (!byte_count)
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d102      	bne.n	80044f2 <XMC_USBD_lWriteFifo+0x4a>
  {
    result = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	617b      	str	r3, [r7, #20]
 80044f0:	e023      	b.n	800453a <XMC_USBD_lWriteFifo+0x92>
  }
  else
  {
    /* add the unaligned bytes to the word count to compare with the fifo space */
    word_count = ((uint32_t)byte_count + 3U) >> 2U;
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	3303      	adds	r3, #3
 80044f6:	089b      	lsrs	r3, r3, #2
 80044f8:	61bb      	str	r3, [r7, #24]
    if (word_count > (uint32_t)freeSpace.b.txfspcavail )
 80044fa:	893b      	ldrh	r3, [r7, #8]
 80044fc:	461a      	mov	r2, r3
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	4293      	cmp	r3, r2
 8004502:	d904      	bls.n	800450e <XMC_USBD_lWriteFifo+0x66>
    {
      word_count = (uint32_t)freeSpace.b.txfspcavail;
 8004504:	893b      	ldrh	r3, [r7, #8]
 8004506:	61bb      	str	r3, [r7, #24]
      byte_count = (uint32_t)word_count << (uint32_t)2U;
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	61fb      	str	r3, [r7, #28]
    }

    /* copy data dword wise */
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 800450e:	2300      	movs	r3, #0
 8004510:	613b      	str	r3, [r7, #16]
 8004512:	e00c      	b.n	800452e <XMC_USBD_lWriteFifo+0x86>
    {
      *fifo = *(uint32_t*)ep->xferBuffer;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	601a      	str	r2, [r3, #0]
      i++;
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	3301      	adds	r3, #1
 8004522:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004528:	1d1a      	adds	r2, r3, #4
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	625a      	str	r2, [r3, #36]	; 0x24
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	429a      	cmp	r2, r3
 8004534:	d3ee      	bcc.n	8004514 <XMC_USBD_lWriteFifo+0x6c>
    }
    result=byte_count;
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	617b      	str	r3, [r7, #20]
  }
  return result;
 800453a:	697b      	ldr	r3, [r7, #20]
}
 800453c:	4618      	mov	r0, r3
 800453e:	3724      	adds	r7, #36	; 0x24
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	20000d50 	.word	0x20000d50

0800454c <XMC_USBD_lFlushTXFifo>:
 * @param[in] fifo_num Fifo number to flush
 *
 * @note Use 0x10 as parameter to flush all tx fifos.
 */
static void XMC_USBD_lFlushTXFifo(const uint8_t fifo_num) 
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	4603      	mov	r3, r0
 8004554:	71fb      	strb	r3, [r7, #7]
  volatile grstctl_t data;  
  uint32_t count;
  data.d32 = 0U;
 8004556:	2300      	movs	r3, #0
 8004558:	60bb      	str	r3, [r7, #8]
  /*flush fifo */
  data.b.txfflsh = 1U;
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	f043 0320 	orr.w	r3, r3, #32
 8004560:	60bb      	str	r3, [r7, #8]
  data.b.txfnum = fifo_num;
 8004562:	79fb      	ldrb	r3, [r7, #7]
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	b2da      	uxtb	r2, r3
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	f362 138a 	bfi	r3, r2, #6, #5
 8004570:	60bb      	str	r3, [r7, #8]
  xmc_device.global_register->grstctl = data.d32;
 8004572:	4b14      	ldr	r3, [pc, #80]	; (80045c4 <XMC_USBD_lFlushTXFifo+0x78>)
 8004574:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	611a      	str	r2, [r3, #16]
  for (count = 0U;count < 1000U; count++){}
 800457c:	2300      	movs	r3, #0
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	e002      	b.n	8004588 <XMC_USBD_lFlushTXFifo+0x3c>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	3301      	adds	r3, #1
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800458e:	d3f8      	bcc.n	8004582 <XMC_USBD_lFlushTXFifo+0x36>
  do
  {
   data.d32 = xmc_device.global_register->grstctl;
 8004590:	4b0c      	ldr	r3, [pc, #48]	; (80045c4 <XMC_USBD_lFlushTXFifo+0x78>)
 8004592:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	60bb      	str	r3, [r7, #8]
  } while (data.b.txfflsh);
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1f4      	bne.n	8004590 <XMC_USBD_lFlushTXFifo+0x44>
    count = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]
  while (count++ < 1000U)
 80045aa:	bf00      	nop
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	60fa      	str	r2, [r7, #12]
 80045b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045b6:	d3f9      	bcc.n	80045ac <XMC_USBD_lFlushTXFifo+0x60>
  {
    /* wait 3 phy clocks */
  }
}
 80045b8:	bf00      	nop
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	20000d50 	.word	0x20000d50

080045c8 <XMC_USBD_lFlushRXFifo>:

/**
 * @brief Flush the rx fifo
 */
static void XMC_USBD_lFlushRXFifo(void) 
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
  volatile grstctl_t data;  
  uint32_t count;
	
	data.d32 = 0U;
 80045ce:	2300      	movs	r3, #0
 80045d0:	603b      	str	r3, [r7, #0]
  data.b.rxfflsh = 1U;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	f043 0310 	orr.w	r3, r3, #16
 80045d8:	603b      	str	r3, [r7, #0]
  /* flush FIFO */
  xmc_device.global_register->grstctl = data.d32;
 80045da:	4b14      	ldr	r3, [pc, #80]	; (800462c <XMC_USBD_lFlushRXFifo+0x64>)
 80045dc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	611a      	str	r2, [r3, #16]
  do
  {
    for (count = 0U; count < 1000U; count++){}
 80045e4:	2300      	movs	r3, #0
 80045e6:	607b      	str	r3, [r7, #4]
 80045e8:	e002      	b.n	80045f0 <XMC_USBD_lFlushRXFifo+0x28>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	3301      	adds	r3, #1
 80045ee:	607b      	str	r3, [r7, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045f6:	d3f8      	bcc.n	80045ea <XMC_USBD_lFlushRXFifo+0x22>
    data.d32 = xmc_device.global_register->grstctl;
 80045f8:	4b0c      	ldr	r3, [pc, #48]	; (800462c <XMC_USBD_lFlushRXFifo+0x64>)
 80045fa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	603b      	str	r3, [r7, #0]
  } while (data.b.rxfflsh);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1ea      	bne.n	80045e4 <XMC_USBD_lFlushRXFifo+0x1c>
  count = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	607b      	str	r3, [r7, #4]
  while (count++ < 1000U)
 8004612:	bf00      	nop
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	607a      	str	r2, [r7, #4]
 800461a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800461e:	d3f9      	bcc.n	8004614 <XMC_USBD_lFlushRXFifo+0x4c>
  {
    /* wait 3 phy clocks */
  }
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	20000d50 	.word	0x20000d50

08004630 <XMC_USBD_lAssignTXFifo>:
 * A free tx fifo will be searched and the number will be returned.
 *
 * @return Fifo number for a free fifo
 */
static uint8_t XMC_USBD_lAssignTXFifo(void) 
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
  uint16_t mask = 1U;
 8004636:	2301      	movs	r3, #1
 8004638:	80fb      	strh	r3, [r7, #6]
  uint8_t i = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	717b      	strb	r3, [r7, #5]
  uint8_t result = 0U;
 800463e:	2300      	movs	r3, #0
 8004640:	713b      	strb	r3, [r7, #4]
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 8004642:	e005      	b.n	8004650 <XMC_USBD_lAssignTXFifo+0x20>
  {
    mask = (uint16_t)(mask << 1U);
 8004644:	88fb      	ldrh	r3, [r7, #6]
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	80fb      	strh	r3, [r7, #6]
    i++;
 800464a:	797b      	ldrb	r3, [r7, #5]
 800464c:	3301      	adds	r3, #1
 800464e:	717b      	strb	r3, [r7, #5]
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 8004650:	797b      	ldrb	r3, [r7, #5]
 8004652:	2b06      	cmp	r3, #6
 8004654:	d807      	bhi.n	8004666 <XMC_USBD_lAssignTXFifo+0x36>
 8004656:	4b11      	ldr	r3, [pc, #68]	; (800469c <XMC_USBD_lAssignTXFifo+0x6c>)
 8004658:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 800465c:	88fb      	ldrh	r3, [r7, #6]
 800465e:	4013      	ands	r3, r2
 8004660:	b29b      	uxth	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1ee      	bne.n	8004644 <XMC_USBD_lAssignTXFifo+0x14>
  }
  if ((xmc_device.txfifomsk & mask) == 0U)
 8004666:	4b0d      	ldr	r3, [pc, #52]	; (800469c <XMC_USBD_lAssignTXFifo+0x6c>)
 8004668:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 800466c:	88fb      	ldrh	r3, [r7, #6]
 800466e:	4013      	ands	r3, r2
 8004670:	b29b      	uxth	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10a      	bne.n	800468c <XMC_USBD_lAssignTXFifo+0x5c>
  {
    xmc_device.txfifomsk |= mask;
 8004676:	4b09      	ldr	r3, [pc, #36]	; (800469c <XMC_USBD_lAssignTXFifo+0x6c>)
 8004678:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 800467c:	88fb      	ldrh	r3, [r7, #6]
 800467e:	4313      	orrs	r3, r2
 8004680:	b29a      	uxth	r2, r3
 8004682:	4b06      	ldr	r3, [pc, #24]	; (800469c <XMC_USBD_lAssignTXFifo+0x6c>)
 8004684:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
    result=i;
 8004688:	797b      	ldrb	r3, [r7, #5]
 800468a:	713b      	strb	r3, [r7, #4]
  }
  return result;
 800468c:	793b      	ldrb	r3, [r7, #4]
}
 800468e:	4618      	mov	r0, r3
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	20000d50 	.word	0x20000d50

080046a0 <XMC_USBD_lUnassignFifo>:
 *
 * Mark an used tx fifo as free.
 * @param[in] fifo_nr Fifo number to free
 */
static void XMC_USBD_lUnassignFifo(const uint8_t fifo_nr) 
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	4603      	mov	r3, r0
 80046a8:	71fb      	strb	r3, [r7, #7]
  xmc_device.txfifomsk = (uint16_t)((uint32_t)xmc_device.txfifomsk & (uint32_t)(~((uint32_t)((uint32_t)1U << fifo_nr))));
 80046aa:	4b0a      	ldr	r3, [pc, #40]	; (80046d4 <XMC_USBD_lUnassignFifo+0x34>)
 80046ac:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 80046b0:	79fb      	ldrb	r3, [r7, #7]
 80046b2:	2101      	movs	r1, #1
 80046b4:	fa01 f303 	lsl.w	r3, r1, r3
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	43db      	mvns	r3, r3
 80046bc:	b29b      	uxth	r3, r3
 80046be:	4013      	ands	r3, r2
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	4b04      	ldr	r3, [pc, #16]	; (80046d4 <XMC_USBD_lUnassignFifo+0x34>)
 80046c4:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	20000d50 	.word	0x20000d50

080046d8 <XMC_USBD_lStartReadXfer>:
 * that the transfer values are reasonable (e.g. buffer size is not exceeded).
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartReadXfer(XMC_USBD_EP_t *const ep) 
{
 80046d8:	b480      	push	{r7}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	613b      	str	r3, [r7, #16]
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6892      	ldr	r2, [r2, #8]
 80046f2:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d909      	bls.n	800470e <XMC_USBD_lStartReadXfer+0x36>
  {
    ep->xferLength += ep->maxTransferSize;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6892      	ldr	r2, [r2, #8]
 8004702:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8004706:	441a      	add	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	629a      	str	r2, [r3, #40]	; 0x28
 800470c:	e003      	b.n	8004716 <XMC_USBD_lStartReadXfer+0x3e>
  }
  else
  {
    ep->xferLength = ep->xferTotal;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (ep->address_u.address_st.number == 0U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d118      	bne.n	8004756 <XMC_USBD_lStartReadXfer+0x7e>
  {
	/* Setup the endpoint to receive 3 setup packages and one normal package.*/
	/* Cast the data pointer to use only one variable */
    deptsiz0_data_t *ep0_data = (deptsiz0_data_t*)&data;
 8004724:	f107 0310 	add.w	r3, r7, #16
 8004728:	617b      	str	r3, [r7, #20]
    ep0_data->b.pktcnt = 0x1U;
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	7893      	ldrb	r3, [r2, #2]
 800472e:	2101      	movs	r1, #1
 8004730:	f361 03c4 	bfi	r3, r1, #3, #2
 8004734:	7093      	strb	r3, [r2, #2]
    ep0_data->b.supcnt = 0x3U;
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	78d3      	ldrb	r3, [r2, #3]
 800473a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800473e:	70d3      	strb	r3, [r2, #3]
    ep0_data->b.xfersize = (uint8_t)ep->xferTotal;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004748:	b2d9      	uxtb	r1, r3
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	7813      	ldrb	r3, [r2, #0]
 800474e:	f361 0306 	bfi	r3, r1, #0, #7
 8004752:	7013      	strb	r3, [r2, #0]
 8004754:	e032      	b.n	80047bc <XMC_USBD_lStartReadXfer+0xe4>
  }
  else
  {
    /* If requested length is zero, just receive one zero length packet */
    if (ep->xferLength == 0U)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475a:	2b00      	cmp	r3, #0
 800475c:	d109      	bne.n	8004772 <XMC_USBD_lStartReadXfer+0x9a>
    {
      data.b.xfersize = 0U;
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f36f 0312 	bfc	r3, #0, #19
 8004764:	613b      	str	r3, [r7, #16]
      data.b.pktcnt = 1U;
 8004766:	8a7b      	ldrh	r3, [r7, #18]
 8004768:	2201      	movs	r2, #1
 800476a:	f362 03cc 	bfi	r3, r2, #3, #10
 800476e:	827b      	strh	r3, [r7, #18]
 8004770:	e024      	b.n	80047bc <XMC_USBD_lStartReadXfer+0xe4>
    }
    else
    {
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6852      	ldr	r2, [r2, #4]
 8004780:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8004784:	b2d2      	uxtb	r2, r2
 8004786:	4413      	add	r3, r2
 8004788:	3b01      	subs	r3, #1
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6852      	ldr	r2, [r2, #4]
 800478e:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	fbb3 f3f2 	udiv	r3, r3, r2
 8004798:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800479c:	b29a      	uxth	r2, r3
 800479e:	8a7b      	ldrh	r3, [r7, #18]
 80047a0:	f362 03cc 	bfi	r3, r2, #3, #10
 80047a4:	827b      	strh	r3, [r7, #18]
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	f3c3 0212 	ubfx	r2, r3, #0, #19
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	f362 0312 	bfi	r3, r2, #0, #19
 80047ba:	613b      	str	r3, [r7, #16]
    }
  }
  if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80047bc:	4b22      	ldr	r3, [pc, #136]	; (8004848 <XMC_USBD_lStartReadXfer+0x170>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	7b5b      	ldrb	r3, [r3, #13]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10d      	bne.n	80047e2 <XMC_USBD_lStartReadXfer+0x10a>
  {
    /* Programm dma address if needed */
    xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepdma = (uint32_t)(ep->xferBuffer);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	4a1d      	ldr	r2, [pc, #116]	; (800484c <XMC_USBD_lStartReadXfer+0x174>)
 80047d6:	3370      	adds	r3, #112	; 0x70
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4413      	add	r3, r2
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	460a      	mov	r2, r1
 80047e0:	615a      	str	r2, [r3, #20]
  }
  /* setup endpoint size and enable endpoint */
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doeptsiz = data.d32;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	4a17      	ldr	r2, [pc, #92]	; (800484c <XMC_USBD_lStartReadXfer+0x174>)
 80047ee:	3370      	adds	r3, #112	; 0x70
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	611a      	str	r2, [r3, #16]
 
  epctl.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004802:	b2db      	uxtb	r3, r3
 8004804:	4a11      	ldr	r2, [pc, #68]	; (800484c <XMC_USBD_lStartReadXfer+0x174>)
 8004806:	3370      	adds	r3, #112	; 0x70
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	60fb      	str	r3, [r7, #12]
  epctl.b.cnak = 1U;
 8004812:	7bfb      	ldrb	r3, [r7, #15]
 8004814:	f043 0304 	orr.w	r3, r3, #4
 8004818:	73fb      	strb	r3, [r7, #15]
  epctl.b.epena = 1U;
 800481a:	7bfb      	ldrb	r3, [r7, #15]
 800481c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004820:	73fb      	strb	r3, [r7, #15]
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = epctl.d32;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800482a:	b2db      	uxtb	r3, r3
 800482c:	4a07      	ldr	r2, [pc, #28]	; (800484c <XMC_USBD_lStartReadXfer+0x174>)
 800482e:	3370      	adds	r3, #112	; 0x70
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	601a      	str	r2, [r3, #0]
}
 800483a:	bf00      	nop
 800483c:	371c      	adds	r7, #28
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	20000d4c 	.word	0x20000d4c
 800484c:	20000d50 	.word	0x20000d50

08004850 <XMC_USBD_lStartWriteXfer>:
 * to start a new in transfer
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartWriteXfer(XMC_USBD_EP_t *const ep) 
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
 8004858:	2300      	movs	r3, #0
 800485a:	60fb      	str	r3, [r7, #12]
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004864:	b2db      	uxtb	r3, r3
 8004866:	4a5e      	ldr	r2, [pc, #376]	; (80049e0 <XMC_USBD_lStartWriteXfer+0x190>)
 8004868:	336a      	adds	r3, #106	; 0x6a
 800486a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	60bb      	str	r3, [r7, #8]

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	6892      	ldr	r2, [r2, #8]
 8004880:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8004884:	4293      	cmp	r3, r2
 8004886:	d204      	bcs.n	8004892 <XMC_USBD_lStartWriteXfer+0x42>
  {
    ep->xferLength = ep->xferTotal;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	629a      	str	r2, [r3, #40]	; 0x28
 8004890:	e008      	b.n	80048a4 <XMC_USBD_lStartWriteXfer+0x54>
  }
  else
  {
    ep->xferLength += ep->maxTransferSize;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6892      	ldr	r2, [r2, #8]
 800489a:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800489e:	441a      	add	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (ep->xferLength == 0U)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d109      	bne.n	80048c0 <XMC_USBD_lStartWriteXfer+0x70>
  {
    size.b.xfersize = 0U;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f36f 0312 	bfc	r3, #0, #19
 80048b2:	60fb      	str	r3, [r7, #12]
    size.b.pktcnt = 1U;
 80048b4:	89fb      	ldrh	r3, [r7, #14]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f362 03cc 	bfi	r3, r2, #3, #10
 80048bc:	81fb      	strh	r3, [r7, #14]
 80048be:	e06b      	b.n	8004998 <XMC_USBD_lStartWriteXfer+0x148>
  }
  else
  {
    if (ep->address_u.address_st.number == 0U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	f003 030f 	and.w	r3, r3, #15
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d110      	bne.n	80048f0 <XMC_USBD_lStartWriteXfer+0xa0>
    {
      size.b.pktcnt = 1U;
 80048ce:	89fb      	ldrh	r3, [r7, #14]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f362 03cc 	bfi	r3, r2, #3, #10
 80048d6:	81fb      	strh	r3, [r7, #14]
      /* ep->maxXferSize equals maxPacketSize */
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	f3c3 0212 	ubfx	r2, r3, #0, #19
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f362 0312 	bfi	r3, r2, #0, #19
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	e02a      	b.n	8004946 <XMC_USBD_lStartWriteXfer+0xf6>
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	f3c3 0212 	ubfx	r2, r3, #0, #19
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f362 0312 	bfi	r3, r2, #0, #19
 8004904:	60fb      	str	r3, [r7, #12]
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490a:	b29a      	uxth	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	b29b      	uxth	r3, r3
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	b29b      	uxth	r3, r3
 8004916:	461a      	mov	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f3c3 23c6 	ubfx	r3, r3, #11, #7
 8004920:	b2db      	uxtb	r3, r3
 8004922:	b29b      	uxth	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b29b      	uxth	r3, r3
 8004928:	4413      	add	r3, r2
    		 ep->maxPacketSize);
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6852      	ldr	r2, [r2, #4]
 800492e:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8004932:	b2d2      	uxtb	r2, r2
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8004934:	fb93 f3f2 	sdiv	r3, r3, r2
 8004938:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800493c:	b29a      	uxth	r2, r3
 800493e:	89fb      	ldrh	r3, [r7, #14]
 8004940:	f362 03cc 	bfi	r3, r2, #3, #10
 8004944:	81fb      	strh	r3, [r7, #14]
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8004946:	4b27      	ldr	r3, [pc, #156]	; (80049e4 <XMC_USBD_lStartWriteXfer+0x194>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	7b5b      	ldrb	r3, [r3, #13]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10c      	bne.n	800496a <XMC_USBD_lStartWriteXfer+0x11a>
    {
      /* Program dma*/
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepdma = (uint32_t)ep->xferBuffer;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800495c:	b2db      	uxtb	r3, r3
 800495e:	4a20      	ldr	r2, [pc, #128]	; (80049e0 <XMC_USBD_lStartWriteXfer+0x190>)
 8004960:	336a      	adds	r3, #106	; 0x6a
 8004962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004966:	460a      	mov	r2, r1
 8004968:	615a      	str	r2, [r3, #20]
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800496a:	4b1e      	ldr	r3, [pc, #120]	; (80049e4 <XMC_USBD_lStartWriteXfer+0x194>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	7b5b      	ldrb	r3, [r3, #13]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d111      	bne.n	8004998 <XMC_USBD_lStartWriteXfer+0x148>
    {
      /* enable fifo empty interrupt */
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8004974:	4b1a      	ldr	r3, [pc, #104]	; (80049e0 <XMC_USBD_lStartWriteXfer+0x190>)
 8004976:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800497a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004984:	b2db      	uxtb	r3, r3
 8004986:	461a      	mov	r2, r3
 8004988:	2301      	movs	r3, #1
 800498a:	fa03 f202 	lsl.w	r2, r3, r2
 800498e:	4b14      	ldr	r3, [pc, #80]	; (80049e0 <XMC_USBD_lStartWriteXfer+0x190>)
 8004990:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004994:	430a      	orrs	r2, r1
 8004996:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	4a0f      	ldr	r2, [pc, #60]	; (80049e0 <XMC_USBD_lStartWriteXfer+0x190>)
 80049a4:	336a      	adds	r3, #106	; 0x6a
 80049a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	611a      	str	r2, [r3, #16]
  ctl.b.epena = 1U;
 80049ae:	7afb      	ldrb	r3, [r7, #11]
 80049b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049b4:	72fb      	strb	r3, [r7, #11]
  ctl.b.cnak = 1U;
 80049b6:	7afb      	ldrb	r3, [r7, #11]
 80049b8:	f043 0304 	orr.w	r3, r3, #4
 80049bc:	72fb      	strb	r3, [r7, #11]
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = ctl.d32;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	4a05      	ldr	r2, [pc, #20]	; (80049e0 <XMC_USBD_lStartWriteXfer+0x190>)
 80049ca:	336a      	adds	r3, #106	; 0x6a
 80049cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	601a      	str	r2, [r3, #0]
}
 80049d4:	bf00      	nop
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	20000d50 	.word	0x20000d50
 80049e4:	20000d4c 	.word	0x20000d4c

080049e8 <XMC_USBD_lHandleUSBReset>:
 * When ever the host sets the bus into reset condition the usb otg_core generates
 * an interrupt, which is handled by this function. It resets the complete otg_core
 * into the default state.
 */
static void XMC_USBD_lHandleUSBReset(const XMC_USBD_t *const obj) 
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b088      	sub	sp, #32
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  fifosize_data_t gnptxfsiz;
  daint_data_t daint;
  dcfg_data_t dcfg;
	
  /* Clear the Remote Wakeup Signaling */
  dctl.d32 = xmc_device.device_register->dctl;
 80049f0:	4b50      	ldr	r3, [pc, #320]	; (8004b34 <XMC_USBD_lHandleUSBReset+0x14c>)
 80049f2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	617b      	str	r3, [r7, #20]
  dctl.b.rmtwkupsig = 1U;
 80049fa:	7d3b      	ldrb	r3, [r7, #20]
 80049fc:	f043 0301 	orr.w	r3, r3, #1
 8004a00:	753b      	strb	r3, [r7, #20]
  xmc_device.device_register->dctl = dctl.d32;
 8004a02:	4b4c      	ldr	r3, [pc, #304]	; (8004b34 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004a04:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	605a      	str	r2, [r3, #4]

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	61fb      	str	r3, [r7, #28]
 8004a10:	e01a      	b.n	8004a48 <XMC_USBD_lHandleUSBReset+0x60>
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8004a12:	4a48      	ldr	r2, [pc, #288]	; (8004b34 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	3370      	adds	r3, #112	; 0x70
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	61bb      	str	r3, [r7, #24]
		epctl.b.snak = 1U;
 8004a22:	7efb      	ldrb	r3, [r7, #27]
 8004a24:	f043 0308 	orr.w	r3, r3, #8
 8004a28:	76fb      	strb	r3, [r7, #27]
		epctl.b.stall = 0U;
 8004a2a:	7ebb      	ldrb	r3, [r7, #26]
 8004a2c:	f36f 1345 	bfc	r3, #5, #1
 8004a30:	76bb      	strb	r3, [r7, #26]
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 8004a32:	4a40      	ldr	r2, [pc, #256]	; (8004b34 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	3370      	adds	r3, #112	; 0x70
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	601a      	str	r2, [r3, #0]
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	3301      	adds	r3, #1
 8004a46:	61fb      	str	r3, [r7, #28]
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	2b06      	cmp	r3, #6
 8004a4c:	d9e1      	bls.n	8004a12 <XMC_USBD_lHandleUSBReset+0x2a>
  }

  /* Configure fifos */
  /* Calculate the size of the rx fifo */
  xmc_device.global_register->grxfsiz = 64U;
 8004a4e:	4b39      	ldr	r3, [pc, #228]	; (8004b34 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004a50:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004a54:	2240      	movs	r2, #64	; 0x40
 8004a56:	625a      	str	r2, [r3, #36]	; 0x24
  /* Calculate the size of the tx fifo for ep 0 */  
  gnptxfsiz.d32 = 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	613b      	str	r3, [r7, #16]
  gnptxfsiz.b.depth = 16U;
 8004a5c:	2310      	movs	r3, #16
 8004a5e:	827b      	strh	r3, [r7, #18]
  gnptxfsiz.b.startaddr = 64U;
 8004a60:	2340      	movs	r3, #64	; 0x40
 8004a62:	823b      	strh	r3, [r7, #16]
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
 8004a64:	4b33      	ldr	r3, [pc, #204]	; (8004b34 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004a66:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	629a      	str	r2, [r3, #40]	; 0x28
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8004a6e:	2301      	movs	r3, #1
 8004a70:	61fb      	str	r3, [r7, #28]
 8004a72:	e011      	b.n	8004a98 <XMC_USBD_lHandleUSBReset+0xb0>
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	3304      	adds	r3, #4
 8004a78:	019b      	lsls	r3, r3, #6
 8004a7a:	089a      	lsrs	r2, r3, #2
 8004a7c:	4b2d      	ldr	r3, [pc, #180]	; (8004b34 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004a7e:	f8d3 11a0 	ldr.w	r1, [r3, #416]	; 0x1a0
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	3b01      	subs	r3, #1
 8004a86:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004a8a:	3340      	adds	r3, #64	; 0x40
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	440b      	add	r3, r1
 8004a90:	605a      	str	r2, [r3, #4]
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	3301      	adds	r3, #1
 8004a96:	61fb      	str	r3, [r7, #28]
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	2b06      	cmp	r3, #6
 8004a9c:	d9ea      	bls.n	8004a74 <XMC_USBD_lHandleUSBReset+0x8c>
  }

  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo(0x10U); /* 0x10 == all fifos, see doc */
 8004a9e:	2010      	movs	r0, #16
 8004aa0:	f7ff fd54 	bl	800454c <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushTXFifo(0x0U);
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	f7ff fd51 	bl	800454c <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 8004aaa:	f7ff fd8d 	bl	80045c8 <XMC_USBD_lFlushRXFifo>
  /* Flush learning queue not needed due to fifo config */
  /* enable ep0 interrupts */  
  daint.d32 = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60fb      	str	r3, [r7, #12]
  daint.b.inep0 = 1U;
 8004ab2:	7b3b      	ldrb	r3, [r7, #12]
 8004ab4:	f043 0301 	orr.w	r3, r3, #1
 8004ab8:	733b      	strb	r3, [r7, #12]
  daint.b.outep0 = 1U;
 8004aba:	7bbb      	ldrb	r3, [r7, #14]
 8004abc:	f043 0301 	orr.w	r3, r3, #1
 8004ac0:	73bb      	strb	r3, [r7, #14]
  xmc_device.device_register->daintmsk = daint.d32;
 8004ac2:	4b1c      	ldr	r3, [pc, #112]	; (8004b34 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004ac4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	61da      	str	r2, [r3, #28]

  /* enable endpoint interrupts */
  /* out ep interrupts */
  XMC_USBD_EnableEventOUTEP(((uint32_t)XMC_USBD_EVENT_OUT_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_OUT_EP_DISABLED |
 8004acc:	200f      	movs	r0, #15
 8004ace:	f000 fbfd 	bl	80052cc <XMC_USBD_EnableEventOUTEP>
		  	  	  	  	  	  (uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP | (uint32_t)XMC_USBD_EVENT_OUT_EP_AHB_ERROR));

  /*in ep interrupts */
  XMC_USBD_EnableEventINEP(((uint32_t)XMC_USBD_EVENT_IN_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_IN_EP_DISABLED |
 8004ad2:	200f      	movs	r0, #15
 8004ad4:	f000 fc12 	bl	80052fc <XMC_USBD_EnableEventINEP>
		  (uint32_t)XMC_USBD_EVENT_IN_EP_AHB_ERROR | (uint32_t)XMC_USBD_EVENT_IN_EP_TIMEOUT));


  /* Clear device Address */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 8004ad8:	4b16      	ldr	r3, [pc, #88]	; (8004b34 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004ada:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	60bb      	str	r3, [r7, #8]
  dcfg.b.devaddr = 0U;
 8004ae2:	893b      	ldrh	r3, [r7, #8]
 8004ae4:	f36f 130a 	bfc	r3, #4, #7
 8004ae8:	813b      	strh	r3, [r7, #8]
  xmc_device.device_register->dcfg = dcfg.d32;
 8004aea:	4b12      	ldr	r3, [pc, #72]	; (8004b34 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004aec:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	601a      	str	r2, [r3, #0]

  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	7b5b      	ldrb	r3, [r3, #13]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d104      	bne.n	8004b06 <XMC_USBD_lHandleUSBReset+0x11e>
  {
    /* Clear Empty interrupt */
    xmc_device.device_register->dtknqr4_fifoemptymsk = 0U;
 8004afc:	4b0d      	ldr	r3, [pc, #52]	; (8004b34 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004afe:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004b02:	2200      	movs	r2, #0
 8004b04:	635a      	str	r2, [r3, #52]	; 0x34
  }

  xmc_device.ep[0U].outInUse = 0U;
 8004b06:	4a0b      	ldr	r2, [pc, #44]	; (8004b34 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004b08:	6853      	ldr	r3, [r2, #4]
 8004b0a:	f36f 1304 	bfc	r3, #4, #1
 8004b0e:	6053      	str	r3, [r2, #4]
  xmc_device.ep[0U].inInUse = 0U;
 8004b10:	4a08      	ldr	r2, [pc, #32]	; (8004b34 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004b12:	6853      	ldr	r3, [r2, #4]
 8004b14:	f36f 03c3 	bfc	r3, #3, #1
 8004b18:	6053      	str	r3, [r2, #4]

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_RESET);
 8004b1a:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004b1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b20:	2004      	movs	r0, #4
 8004b22:	4798      	blx	r3

  /* clear reset intr */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_RESET);
 8004b24:	2004      	movs	r0, #4
 8004b26:	f000 fb25 	bl	8005174 <XMC_USBD_ClearEvent>
}
 8004b2a:	bf00      	nop
 8004b2c:	3720      	adds	r7, #32
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	20000d50 	.word	0x20000d50

08004b38 <XMC_USBD_lHandleOTGInt>:
* @brief Handle OTG Interrupt
*
* It detects especially connect and disconnect events.
*/
static void XMC_USBD_lHandleOTGInt(void) 
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
  gotgint_data_t data;
  data.d32 = xmc_device.global_register->gotgint;
 8004b3e:	4b0f      	ldr	r3, [pc, #60]	; (8004b7c <XMC_USBD_lHandleOTGInt+0x44>)
 8004b40:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	607b      	str	r3, [r7, #4]
  if (data.b.sesenddet)
 8004b48:	793b      	ldrb	r3, [r7, #4]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00b      	beq.n	8004b6c <XMC_USBD_lHandleOTGInt+0x34>
  {
		xmc_device.IsPowered = 0U;
 8004b54:	4a09      	ldr	r2, [pc, #36]	; (8004b7c <XMC_USBD_lHandleOTGInt+0x44>)
 8004b56:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8004b5a:	f36f 0382 	bfc	r3, #2, #1
 8004b5e:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
		xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_OFF);
 8004b62:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <XMC_USBD_lHandleOTGInt+0x44>)
 8004b64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b68:	2001      	movs	r0, #1
 8004b6a:	4798      	blx	r3
  }
  XMC_USBD_lClearEventOTG(data.d32);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 fb66 	bl	8005240 <XMC_USBD_lClearEventOTG>

}
 8004b74:	bf00      	nop
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	20000d50 	.word	0x20000d50

08004b80 <XMC_USBD_lHandleEnumDone>:
 * @brief Interrupt handler for device enumeration done.
 *
 * Handles the enumeration done from dwc_otg, when the host has enumerated the device.
 */
static void XMC_USBD_lHandleEnumDone(void) 
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
  /* Normaly we need to check dctl
   * We are always fullspeed, so max it up. */
  depctl_data_t epctl;
  gusbcfg_data_t gusbcfg;
	
  epctl.d32=xmc_device.endpoint_in_register[0U]->diepctl;
 8004b86:	4b1b      	ldr	r3, [pc, #108]	; (8004bf4 <XMC_USBD_lHandleEnumDone+0x74>)
 8004b88:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	607b      	str	r3, [r7, #4]
  epctl.b.mps = 0x00U; /* 64 Byte, this is also automatically set for out ep */
 8004b90:	88bb      	ldrh	r3, [r7, #4]
 8004b92:	f36f 030a 	bfc	r3, #0, #11
 8004b96:	80bb      	strh	r3, [r7, #4]
  xmc_device.endpoint_in_register[0U]->diepctl = epctl.d32;
 8004b98:	4b16      	ldr	r3, [pc, #88]	; (8004bf4 <XMC_USBD_lHandleEnumDone+0x74>)
 8004b9a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	601a      	str	r2, [r3, #0]

  /* update device connected flag */
  xmc_device.IsConnected = 1U;
 8004ba2:	4a14      	ldr	r2, [pc, #80]	; (8004bf4 <XMC_USBD_lHandleEnumDone+0x74>)
 8004ba4:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8004ba8:	f043 0301 	orr.w	r3, r3, #1
 8004bac:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
  xmc_device.IsPowered = 1U;
 8004bb0:	4a10      	ldr	r2, [pc, #64]	; (8004bf4 <XMC_USBD_lHandleEnumDone+0x74>)
 8004bb2:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8004bb6:	f043 0304 	orr.w	r3, r3, #4
 8004bba:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_CONNECT);
 8004bbe:	4b0d      	ldr	r3, [pc, #52]	; (8004bf4 <XMC_USBD_lHandleEnumDone+0x74>)
 8004bc0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004bc4:	2002      	movs	r0, #2
 8004bc6:	4798      	blx	r3

  /* Set Trim */  
  gusbcfg.d32 = xmc_device.global_register->gusbcfg;
 8004bc8:	4b0a      	ldr	r3, [pc, #40]	; (8004bf4 <XMC_USBD_lHandleEnumDone+0x74>)
 8004bca:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	603b      	str	r3, [r7, #0]
  gusbcfg.b.usbtrdtim = 9U; /* default value for LS/FS */
 8004bd2:	787b      	ldrb	r3, [r7, #1]
 8004bd4:	2209      	movs	r2, #9
 8004bd6:	f362 0385 	bfi	r3, r2, #2, #4
 8004bda:	707b      	strb	r3, [r7, #1]
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 8004bdc:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <XMC_USBD_lHandleEnumDone+0x74>)
 8004bde:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	60da      	str	r2, [r3, #12]

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_ENUMDONE);
 8004be6:	200b      	movs	r0, #11
 8004be8:	f000 fac4 	bl	8005174 <XMC_USBD_ClearEvent>
}
 8004bec:	bf00      	nop
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	20000d50 	.word	0x20000d50

08004bf8 <XMC_USBD_lHandleOEPInt>:
 *
 * The interrupt handler first checks, which endpoint has caused the interrupt and then
 * determines, which interrupt should be handled.
 */
static void XMC_USBD_lHandleOEPInt(const XMC_USBD_t *const obj) 
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08c      	sub	sp, #48	; 0x30
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint16_t temp;
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
	
  daint.d32 = xmc_device.device_register->daint;
 8004c00:	4b6b      	ldr	r3, [pc, #428]	; (8004db0 <XMC_USBD_lHandleOEPInt+0x1b8>)
 8004c02:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	61fb      	str	r3, [r7, #28]
  
  daintmsk.d32 = xmc_device.device_register->daintmsk;
 8004c0a:	4b69      	ldr	r3, [pc, #420]	; (8004db0 <XMC_USBD_lHandleOEPInt+0x1b8>)
 8004c0c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	61bb      	str	r3, [r7, #24]
  
  doepmsk.d32 = xmc_device.device_register->doepmsk;  
 8004c14:	4b66      	ldr	r3, [pc, #408]	; (8004db0 <XMC_USBD_lHandleOEPInt+0x1b8>)
 8004c16:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	617b      	str	r3, [r7, #20]
  
  mask = daint.ep.out & daintmsk.ep.out;
 8004c1e:	8bfa      	ldrh	r2, [r7, #30]
 8004c20:	8b7b      	ldrh	r3, [r7, #26]
 8004c22:	4013      	ands	r3, r2
 8004c24:	85bb      	strh	r3, [r7, #44]	; 0x2c
  ep_num = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  doeptsiz.d32 = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	60fb      	str	r3, [r7, #12]
 
  while ((uint16_t)mask >> ep_num)
 8004c30:	e0ae      	b.n	8004d90 <XMC_USBD_lHandleOEPInt+0x198>
  {
    temp1 = (mask >> (uint16_t)ep_num);
 8004c32:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004c34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c38:	fa42 f303 	asr.w	r3, r2, r3
 8004c3c:	857b      	strh	r3, [r7, #42]	; 0x2a
    temp = temp1 & 0x1U;
 8004c3e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004c40:	f003 0301 	and.w	r3, r3, #1
 8004c44:	853b      	strh	r3, [r7, #40]	; 0x28
    if (temp)
 8004c46:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 809c 	beq.w	8004d86 <XMC_USBD_lHandleOEPInt+0x18e>
    {
      /* load register data for endpoint */
      ep = &xmc_device.ep[ep_num];
 8004c4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c52:	2234      	movs	r2, #52	; 0x34
 8004c54:	fb02 f303 	mul.w	r3, r2, r3
 8004c58:	4a55      	ldr	r2, [pc, #340]	; (8004db0 <XMC_USBD_lHandleOEPInt+0x1b8>)
 8004c5a:	4413      	add	r3, r2
 8004c5c:	627b      	str	r3, [r7, #36]	; 0x24
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
 8004c5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c62:	4a53      	ldr	r2, [pc, #332]	; (8004db0 <XMC_USBD_lHandleOEPInt+0x1b8>)
 8004c64:	3370      	adds	r3, #112	; 0x70
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	4013      	ands	r3, r2
 8004c72:	613b      	str	r3, [r7, #16]
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	7b5b      	ldrb	r3, [r3, #13]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d108      	bne.n	8004c8e <XMC_USBD_lHandleOEPInt+0x96>
      {
        doeptsiz.d32 = xmc_device.endpoint_out_register[ep_num]->doeptsiz;
 8004c7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c80:	4a4b      	ldr	r2, [pc, #300]	; (8004db0 <XMC_USBD_lHandleOEPInt+0x1b8>)
 8004c82:	3370      	adds	r3, #112	; 0x70
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4413      	add	r3, r2
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	60fb      	str	r3, [r7, #12]
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
 8004c8e:	7c3b      	ldrb	r3, [r7, #16]
 8004c90:	f003 0308 	and.w	r3, r3, #8
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d033      	beq.n	8004d02 <XMC_USBD_lHandleOEPInt+0x10a>
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 8004c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c9c:	7913      	ldrb	r3, [r2, #4]
 8004c9e:	f36f 1345 	bfc	r3, #5, #1
 8004ca2:	7113      	strb	r3, [r2, #4]
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	7b5b      	ldrb	r3, [r3, #13]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10e      	bne.n	8004cca <XMC_USBD_lHandleOEPInt+0xd2>
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
 8004cac:	f107 030c 	add.w	r3, r7, #12
 8004cb0:	78db      	ldrb	r3, [r3, #3]
 8004cb2:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	461a      	mov	r2, r3
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
 8004cba:	4613      	mov	r3, r2
 8004cbc:	075b      	lsls	r3, r3, #29
 8004cbe:	1a9b      	subs	r3, r3, r2
 8004cc0:	00db      	lsls	r3, r3, #3
 8004cc2:	f103 0218 	add.w	r2, r3, #24
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	611a      	str	r2, [r3, #16]
        }
		if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	7b5b      	ldrb	r3, [r3, #13]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d106      	bne.n	8004ce0 <XMC_USBD_lHandleOEPInt+0xe8>
		{
			ep->outBytesAvailable += ep->xferCount;
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	691a      	ldr	r2, [r3, #16]
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cda:	441a      	add	r2, r3
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	611a      	str	r2, [r3, #16]
		}
		ep->outInUse = 0U;
 8004ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce2:	6853      	ldr	r3, [r2, #4]
 8004ce4:	f36f 1304 	bfc	r3, #4, #1
 8004ce8:	6053      	str	r3, [r2, #4]
		xmc_device.EndpointEvent_cb(0U,XMC_USBD_EP_EVENT_SETUP); /* signal endpoint event */
 8004cea:	4b31      	ldr	r3, [pc, #196]	; (8004db0 <XMC_USBD_lHandleOEPInt+0x1b8>)
 8004cec:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	4798      	blx	r3
				/* clear the interrupt */
		XMC_USBD_ClearEventOUTEP((uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP,ep_num);
 8004cf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	2008      	movs	r0, #8
 8004cfe:	f000 facd 	bl	800529c <XMC_USBD_ClearEventOUTEP>
      }
      if (doepint.b.xfercompl)
 8004d02:	7c3b      	ldrb	r3, [r7, #16]
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d034      	beq.n	8004d78 <XMC_USBD_lHandleOEPInt+0x180>
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	7b5b      	ldrb	r3, [r3, #13]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d115      	bne.n	8004d42 <XMC_USBD_lHandleOEPInt+0x14a>
        {
          uint32_t bytes = (ep->xferLength - ep->xferCount) - doeptsiz.b.xfersize;
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	623b      	str	r3, [r7, #32]
          ep->xferCount += bytes;
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	441a      	add	r2, r3
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	441a      	add	r2, r3
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	625a      	str	r2, [r3, #36]	; 0x24
				}
        if (ep->xferTotal == ep->xferLength)
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d111      	bne.n	8004d72 <XMC_USBD_lHandleOEPInt+0x17a>
        {
          ep->outBytesAvailable = ep->xferCount;
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	611a      	str	r2, [r3, #16]
          ep->outInUse = 0U;
 8004d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d58:	6853      	ldr	r3, [r2, #4]
 8004d5a:	f36f 1304 	bfc	r3, #4, #1
 8004d5e:	6053      	str	r3, [r2, #4]
          xmc_device.EndpointEvent_cb(ep_num,XMC_USBD_EP_EVENT_OUT);
 8004d60:	4b13      	ldr	r3, [pc, #76]	; (8004db0 <XMC_USBD_lHandleOEPInt+0x1b8>)
 8004d62:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004d66:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	4798      	blx	r3
 8004d70:	e002      	b.n	8004d78 <XMC_USBD_lHandleOEPInt+0x180>
        }
        else
        {
          XMC_USBD_lStartReadXfer(ep);
 8004d72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d74:	f7ff fcb0 	bl	80046d8 <XMC_USBD_lStartReadXfer>
        }

      }

      XMC_USBD_ClearEventOUTEP(doepint.d32,ep_num);
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004d7e:	4611      	mov	r1, r2
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 fa8b 	bl	800529c <XMC_USBD_ClearEventOUTEP>
    }
    ep_num++;
 8004d86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  while ((uint16_t)mask >> ep_num)
 8004d90:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004d92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d96:	fa42 f303 	asr.w	r3, r2, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f47f af49 	bne.w	8004c32 <XMC_USBD_lHandleOEPInt+0x3a>
  }

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_OUTEP);
 8004da0:	200d      	movs	r0, #13
 8004da2:	f000 f9e7 	bl	8005174 <XMC_USBD_ClearEvent>
}
 8004da6:	bf00      	nop
 8004da8:	3730      	adds	r7, #48	; 0x30
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	20000d50 	.word	0x20000d50

08004db4 <XMC_USBD_lHandleIEPInt>:
 *
 * The interrupt handler first checks, which endpoint has caused the interrupt and then
 * determines, which interrupt should be handled.
 */
static void XMC_USBD_lHandleIEPInt(const XMC_USBD_t *const obj) 
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b08c      	sub	sp, #48	; 0x30
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
  uint32_t inepint;
	
  daint.d32 = xmc_device.device_register->daint;
 8004dbc:	4b6b      	ldr	r3, [pc, #428]	; (8004f6c <XMC_USBD_lHandleIEPInt+0x1b8>)
 8004dbe:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	617b      	str	r3, [r7, #20]
  
  diepmsk.d32 = xmc_device.device_register->diepmsk;
 8004dc6:	4b69      	ldr	r3, [pc, #420]	; (8004f6c <XMC_USBD_lHandleIEPInt+0x1b8>)
 8004dc8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	613b      	str	r3, [r7, #16]
  
  dieptsiz.d32 = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	60bb      	str	r3, [r7, #8]
  mask = daint.ep.in;
 8004dd4:	8abb      	ldrh	r3, [r7, #20]
 8004dd6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  ep_num = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  
  while ((uint16_t)mask >> ep_num)
 8004dde:	e0b6      	b.n	8004f4e <XMC_USBD_lHandleIEPInt+0x19a>
  {
    temp1 = ((uint16_t)mask >> (uint16_t)ep_num);
 8004de0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004de2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004de6:	fa42 f303 	asr.w	r3, r2, r3
 8004dea:	857b      	strh	r3, [r7, #42]	; 0x2a
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
 8004dec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	853b      	strh	r3, [r7, #40]	; 0x28
    if ((uint16_t)temp)
 8004df4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 80a4 	beq.w	8004f44 <XMC_USBD_lHandleIEPInt+0x190>
    {
      ep = &xmc_device.ep[ep_num];
 8004dfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e00:	2234      	movs	r2, #52	; 0x34
 8004e02:	fb02 f303 	mul.w	r3, r2, r3
 8004e06:	4a59      	ldr	r2, [pc, #356]	; (8004f6c <XMC_USBD_lHandleIEPInt+0x1b8>)
 8004e08:	4413      	add	r3, r2
 8004e0a:	627b      	str	r3, [r7, #36]	; 0x24
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 8004e0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e10:	4a56      	ldr	r2, [pc, #344]	; (8004f6c <XMC_USBD_lHandleIEPInt+0x1b8>)
 8004e12:	336a      	adds	r3, #106	; 0x6a
 8004e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	623b      	str	r3, [r7, #32]
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 8004e1c:	4b53      	ldr	r3, [pc, #332]	; (8004f6c <XMC_USBD_lHandleIEPInt+0x1b8>)
 8004e1e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e26:	7812      	ldrb	r2, [r2, #0]
 8004e28:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8004e2c:	b2d2      	uxtb	r2, r2
 8004e2e:	40d3      	lsrs	r3, r2
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
 8004e30:	01db      	lsls	r3, r3, #7
 8004e32:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	431a      	orrs	r2, r3
      diepint.d32 = inepint &
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	60fb      	str	r3, [r7, #12]
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	7b5b      	ldrb	r3, [r3, #13]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d107      	bne.n	8004e58 <XMC_USBD_lHandleIEPInt+0xa4>
      {
        dieptsiz.d32 = xmc_device.endpoint_in_register[ep_num]->dieptsiz;
 8004e48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e4c:	4a47      	ldr	r2, [pc, #284]	; (8004f6c <XMC_USBD_lHandleIEPInt+0x1b8>)
 8004e4e:	336a      	adds	r3, #106	; 0x6a
 8004e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	60bb      	str	r3, [r7, #8]
      }
      if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	7b5b      	ldrb	r3, [r3, #13]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d115      	bne.n	8004e8c <XMC_USBD_lHandleIEPInt+0xd8>
      {
        if (diepint.b.emptyintr)
 8004e60:	7b3b      	ldrb	r3, [r7, #12]
 8004e62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00f      	beq.n	8004e8c <XMC_USBD_lHandleIEPInt+0xd8>
        {
          uint32_t bytes;
          bytes = XMC_USBD_lWriteFifo(ep);
 8004e6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e6e:	f7ff fb1b 	bl	80044a8 <XMC_USBD_lWriteFifo>
 8004e72:	61f8      	str	r0, [r7, #28]
          ep->xferCount += bytes;
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	441a      	add	r2, r3
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	441a      	add	r2, r3
 8004e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8a:	625a      	str	r2, [r3, #36]	; 0x24
        }
      }
      if (diepint.b.xfercompl)
 8004e8c:	7b3b      	ldrb	r3, [r7, #12]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d04e      	beq.n	8004f36 <XMC_USBD_lHandleIEPInt+0x182>
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	7b5b      	ldrb	r3, [r3, #13]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d11d      	bne.n	8004edc <XMC_USBD_lHandleIEPInt+0x128>
        {
          /* update xfer values */
          if ((dieptsiz.b.pktcnt == 0U) && (dieptsiz.b.xfersize == 0U))
 8004ea0:	897a      	ldrh	r2, [r7, #10]
 8004ea2:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d116      	bne.n	8004edc <XMC_USBD_lHandleIEPInt+0x128>
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d111      	bne.n	8004edc <XMC_USBD_lHandleIEPInt+0x128>
          {
            uint32_t Bytes = ep->xferLength - ep->xferCount;
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	61bb      	str	r3, [r7, #24]
            ep->xferCount += Bytes;
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	441a      	add	r2, r3
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	62da      	str	r2, [r3, #44]	; 0x2c
            ep->xferBuffer += Bytes;
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	441a      	add	r2, r3
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	625a      	str	r2, [r3, #36]	; 0x24
          }
        }
        if (ep->xferTotal==ep->xferLength)
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d123      	bne.n	8004f30 <XMC_USBD_lHandleIEPInt+0x17c>
        {
          ep->inInUse = 0U;
 8004ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eea:	6853      	ldr	r3, [r2, #4]
 8004eec:	f36f 03c3 	bfc	r3, #3, #1
 8004ef0:	6053      	str	r3, [r2, #4]
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	7b5b      	ldrb	r3, [r3, #13]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d10e      	bne.n	8004f18 <XMC_USBD_lHandleIEPInt+0x164>
          {
            /* mask fifo empty interrupt */
            xmc_device.device_register->dtknqr4_fifoemptymsk =
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
 8004efa:	4b1c      	ldr	r3, [pc, #112]	; (8004f6c <XMC_USBD_lHandleIEPInt+0x1b8>)
 8004efc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004f00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004f02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f06:	2201      	movs	r2, #1
 8004f08:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0c:	43da      	mvns	r2, r3
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 8004f0e:	4b17      	ldr	r3, [pc, #92]	; (8004f6c <XMC_USBD_lHandleIEPInt+0x1b8>)
 8004f10:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
 8004f14:	400a      	ands	r2, r1
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 8004f16:	635a      	str	r2, [r3, #52]	; 0x34
          }
          xmc_device.EndpointEvent_cb(0x80U | ep_num,XMC_USBD_EP_EVENT_IN);
 8004f18:	4b14      	ldr	r3, [pc, #80]	; (8004f6c <XMC_USBD_lHandleIEPInt+0x1b8>)
 8004f1a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004f1e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004f22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	2102      	movs	r1, #2
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	4798      	blx	r3
 8004f2e:	e002      	b.n	8004f36 <XMC_USBD_lHandleIEPInt+0x182>
        }
        else
        {
          /* start next step of transfer */
          XMC_USBD_lStartWriteXfer(ep);
 8004f30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f32:	f7ff fc8d 	bl	8004850 <XMC_USBD_lStartWriteXfer>
        }

      }

      XMC_USBD_ClearEventINEP((uint32_t)diepint.d32,ep_num);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004f3c:	4611      	mov	r1, r2
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 f994 	bl	800526c <XMC_USBD_ClearEventINEP>
    }
    ep_num++;
 8004f44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f48:	3301      	adds	r3, #1
 8004f4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  while ((uint16_t)mask >> ep_num)
 8004f4e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004f50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f54:	fa42 f303 	asr.w	r3, r2, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f47f af41 	bne.w	8004de0 <XMC_USBD_lHandleIEPInt+0x2c>
  }
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_INEP);
 8004f5e:	200e      	movs	r0, #14
 8004f60:	f000 f908 	bl	8005174 <XMC_USBD_ClearEvent>
}
 8004f64:	bf00      	nop
 8004f66:	3730      	adds	r7, #48	; 0x30
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	20000d50 	.word	0x20000d50

08004f70 <XMC_USBD_lHandleRxFLvl>:
 * @brief RX Fifo interrupt handler
 *
 * This function handles the interrupt, when the rx fifo is not empty anymore.
 */
static void XMC_USBD_lHandleRxFLvl(void) 
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
  device_grxsts_data_t data;	
  data.d32 = xmc_device.global_register->grxstsp;
 8004f76:	4b1e      	ldr	r3, [pc, #120]	; (8004ff0 <XMC_USBD_lHandleRxFLvl+0x80>)
 8004f78:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	607b      	str	r3, [r7, #4]

  switch (data.b.pktsts)
 8004f80:	79bb      	ldrb	r3, [r7, #6]
 8004f82:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	2b05      	cmp	r3, #5
 8004f8c:	d82a      	bhi.n	8004fe4 <XMC_USBD_lHandleRxFLvl+0x74>
 8004f8e:	a201      	add	r2, pc, #4	; (adr r2, 8004f94 <XMC_USBD_lHandleRxFLvl+0x24>)
 8004f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f94:	08004fe5 	.word	0x08004fe5
 8004f98:	08004fad 	.word	0x08004fad
 8004f9c:	08004fe5 	.word	0x08004fe5
 8004fa0:	08004fe5 	.word	0x08004fe5
 8004fa4:	08004fe5 	.word	0x08004fe5
 8004fa8:	08004fc9 	.word	0x08004fc9
    case XMC_USBD_GRXSTS_PKTSTS_GOUTNAK:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTCMPL:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTDATA:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 8004fac:	793b      	ldrb	r3, [r7, #4]
 8004fae:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	88bb      	ldrh	r3, [r7, #4]
 8004fb8:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	4610      	mov	r0, r2
 8004fc2:	f7ff f9fd 	bl	80043c0 <XMC_USBD_lReadFifo>
      break;
 8004fc6:	e00e      	b.n	8004fe6 <XMC_USBD_lHandleRxFLvl+0x76>
    case XMC_USBD_GRXSTS_PKTSTS_SETUP:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 8004fc8:	793b      	ldrb	r3, [r7, #4]
 8004fca:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	88bb      	ldrh	r3, [r7, #4]
 8004fd4:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4610      	mov	r0, r2
 8004fde:	f7ff f9ef 	bl	80043c0 <XMC_USBD_lReadFifo>
      break;
 8004fe2:	e000      	b.n	8004fe6 <XMC_USBD_lHandleRxFLvl+0x76>
    case XMC_USBD_GRXSTS_PKTSTS_SETUPCMPL:
      break;
    default:
      break;
 8004fe4:	bf00      	nop
	}
  /* no need to clear */
}
 8004fe6:	bf00      	nop
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	20000d50 	.word	0x20000d50

08004ff4 <XMC_USBD_IRQHandler>:
 *
 * The handler first checks, which global interrupt has caused the interrupt
 * and then dispatches interrupt to the corresponding sub-handler.
 */
void XMC_USBD_IRQHandler(const XMC_USBD_t *const obj) 
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  gintmsk_data_t gintmsk;
  gintsts_data_t data;
	
  gintmsk.d32 = xmc_device.global_register->gintmsk;
 8004ffc:	4b50      	ldr	r3, [pc, #320]	; (8005140 <XMC_USBD_IRQHandler+0x14c>)
 8004ffe:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	60fb      	str	r3, [r7, #12]
  data.d32 = xmc_device.global_register->gintsts & gintmsk.d32;
 8005006:	4b4e      	ldr	r3, [pc, #312]	; (8005140 <XMC_USBD_IRQHandler+0x14c>)
 8005008:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800500c:	695a      	ldr	r2, [r3, #20]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4013      	ands	r3, r2
 8005012:	60bb      	str	r3, [r7, #8]
	
  if (data.b.sofintr)
 8005014:	7a3b      	ldrb	r3, [r7, #8]
 8005016:	f003 0308 	and.w	r3, r3, #8
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	d007      	beq.n	8005030 <XMC_USBD_IRQHandler+0x3c>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SOF);
 8005020:	4b47      	ldr	r3, [pc, #284]	; (8005140 <XMC_USBD_IRQHandler+0x14c>)
 8005022:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005026:	2009      	movs	r0, #9
 8005028:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SOF);
 800502a:	2009      	movs	r0, #9
 800502c:	f000 f8a2 	bl	8005174 <XMC_USBD_ClearEvent>
  }
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	7b5b      	ldrb	r3, [r3, #13]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d119      	bne.n	800506c <XMC_USBD_IRQHandler+0x78>
  {
    if (data.b.rxstsqlvl)
 8005038:	7a3b      	ldrb	r3, [r7, #8]
 800503a:	f003 0310 	and.w	r3, r3, #16
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	d013      	beq.n	800506c <XMC_USBD_IRQHandler+0x78>
    {
      /* Masked that interrupt so its only done once */
      gintmsk.b.rxstsqlvl = 0U;
 8005044:	7b3b      	ldrb	r3, [r7, #12]
 8005046:	f36f 1304 	bfc	r3, #4, #1
 800504a:	733b      	strb	r3, [r7, #12]
      xmc_device.global_register->gintmsk = gintmsk.d32;
 800504c:	4b3c      	ldr	r3, [pc, #240]	; (8005140 <XMC_USBD_IRQHandler+0x14c>)
 800504e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	619a      	str	r2, [r3, #24]
      XMC_USBD_lHandleRxFLvl(); /* handle the interrupt */
 8005056:	f7ff ff8b 	bl	8004f70 <XMC_USBD_lHandleRxFLvl>
      gintmsk.b.rxstsqlvl = 1U;
 800505a:	7b3b      	ldrb	r3, [r7, #12]
 800505c:	f043 0310 	orr.w	r3, r3, #16
 8005060:	733b      	strb	r3, [r7, #12]
      xmc_device.global_register->gintmsk = gintmsk.d32;
 8005062:	4b37      	ldr	r3, [pc, #220]	; (8005140 <XMC_USBD_IRQHandler+0x14c>)
 8005064:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	619a      	str	r2, [r3, #24]
    }
  }
  if (data.b.erlysuspend)
 800506c:	7a7b      	ldrb	r3, [r7, #9]
 800506e:	f003 0304 	and.w	r3, r3, #4
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	d002      	beq.n	800507e <XMC_USBD_IRQHandler+0x8a>
  {
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_EARLYSUSPEND);
 8005078:	200a      	movs	r0, #10
 800507a:	f000 f87b 	bl	8005174 <XMC_USBD_ClearEvent>
  }
  if (data.b.usbsuspend)
 800507e:	7a7b      	ldrb	r3, [r7, #9]
 8005080:	f003 0308 	and.w	r3, r3, #8
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d007      	beq.n	800509a <XMC_USBD_IRQHandler+0xa6>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SUSPEND);
 800508a:	4b2d      	ldr	r3, [pc, #180]	; (8005140 <XMC_USBD_IRQHandler+0x14c>)
 800508c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005090:	2006      	movs	r0, #6
 8005092:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SUSPEND);
 8005094:	2006      	movs	r0, #6
 8005096:	f000 f86d 	bl	8005174 <XMC_USBD_ClearEvent>
  }
  if (data.b.wkupintr)
 800509a:	7afb      	ldrb	r3, [r7, #11]
 800509c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d007      	beq.n	80050b6 <XMC_USBD_IRQHandler+0xc2>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_REMOTE_WAKEUP);
 80050a6:	4b26      	ldr	r3, [pc, #152]	; (8005140 <XMC_USBD_IRQHandler+0x14c>)
 80050a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050ac:	2008      	movs	r0, #8
 80050ae:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_REMOTE_WAKEUP);
 80050b0:	2008      	movs	r0, #8
 80050b2:	f000 f85f 	bl	8005174 <XMC_USBD_ClearEvent>
  }
  if (data.b.sessreqintr)
 80050b6:	7afb      	ldrb	r3, [r7, #11]
 80050b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00e      	beq.n	80050e0 <XMC_USBD_IRQHandler+0xec>
  {
    xmc_device.IsPowered = 1U;
 80050c2:	4a1f      	ldr	r2, [pc, #124]	; (8005140 <XMC_USBD_IRQHandler+0x14c>)
 80050c4:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 80050c8:	f043 0304 	orr.w	r3, r3, #4
 80050cc:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_ON);
 80050d0:	4b1b      	ldr	r3, [pc, #108]	; (8005140 <XMC_USBD_IRQHandler+0x14c>)
 80050d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050d6:	2000      	movs	r0, #0
 80050d8:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_POWER_ON);
 80050da:	2000      	movs	r0, #0
 80050dc:	f000 f84a 	bl	8005174 <XMC_USBD_ClearEvent>
  }
  if (data.b.usbreset)
 80050e0:	7a7b      	ldrb	r3, [r7, #9]
 80050e2:	f003 0310 	and.w	r3, r3, #16
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <XMC_USBD_IRQHandler+0xfe>
  {
    XMC_USBD_lHandleUSBReset(obj);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7ff fc7b 	bl	80049e8 <XMC_USBD_lHandleUSBReset>
  }
  if (data.b.enumdone)
 80050f2:	7a7b      	ldrb	r3, [r7, #9]
 80050f4:	f003 0320 	and.w	r3, r3, #32
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <XMC_USBD_IRQHandler+0x10e>
  {
    XMC_USBD_lHandleEnumDone();
 80050fe:	f7ff fd3f 	bl	8004b80 <XMC_USBD_lHandleEnumDone>
  }
  if (data.b.inepint)
 8005102:	7abb      	ldrb	r3, [r7, #10]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <XMC_USBD_IRQHandler+0x120>
  {
    XMC_USBD_lHandleIEPInt(obj);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7ff fe50 	bl	8004db4 <XMC_USBD_lHandleIEPInt>
  }
  if (data.b.outepintr)
 8005114:	7abb      	ldrb	r3, [r7, #10]
 8005116:	f003 0308 	and.w	r3, r3, #8
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <XMC_USBD_IRQHandler+0x132>
  {
		XMC_USBD_lHandleOEPInt(obj);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7ff fd69 	bl	8004bf8 <XMC_USBD_lHandleOEPInt>
  }
	if (data.b.otgintr)
 8005126:	7a3b      	ldrb	r3, [r7, #8]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <XMC_USBD_IRQHandler+0x142>
  {
	  XMC_USBD_lHandleOTGInt();
 8005132:	f7ff fd01 	bl	8004b38 <XMC_USBD_lHandleOTGInt>
  }

}
 8005136:	bf00      	nop
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	20000d50 	.word	0x20000d50

08005144 <XMC_USBD_Enable>:
 *******************************************************************************/
/**
 * Enables the USB0 module
 **/
void XMC_USBD_Enable(void) 
{
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
#endif
  /* Reset and power up */
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 8005148:	4803      	ldr	r0, [pc, #12]	; (8005158 <XMC_USBD_Enable+0x14>)
 800514a:	f7fc f955 	bl	80013f8 <XMC_SCU_RESET_DeassertPeripheralReset>
  XMC_SCU_POWER_EnableUsb();
 800514e:	f7fc fd39 	bl	8001bc4 <XMC_SCU_POWER_EnableUsb>
}
 8005152:	bf00      	nop
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	20000080 	.word	0x20000080

0800515c <XMC_USBD_Disable>:

/**
 * Disables the USB0 module
 **/
void XMC_USBD_Disable(void) 
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
  /* Clear Reset and power up */
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 8005160:	4803      	ldr	r0, [pc, #12]	; (8005170 <XMC_USBD_Disable+0x14>)
 8005162:	f7fc f92b 	bl	80013bc <XMC_SCU_RESET_AssertPeripheralReset>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
#endif
  XMC_SCU_POWER_DisableUsb();
 8005166:	f7fc fd3b 	bl	8001be0 <XMC_SCU_POWER_DisableUsb>
}
 800516a:	bf00      	nop
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	20000080 	.word	0x20000080

08005174 <XMC_USBD_ClearEvent>:

/**
 * Clear the USB device event
 **/
void XMC_USBD_ClearEvent(const XMC_USBD_EVENT_t event) 
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	4603      	mov	r3, r0
 800517c:	71fb      	strb	r3, [r7, #7]
  gintsts_data_t clear;
  clear.d32 = 0U;
 800517e:	2300      	movs	r3, #0
 8005180:	60fb      	str	r3, [r7, #12]
  switch(event)
 8005182:	79fb      	ldrb	r3, [r7, #7]
 8005184:	2b0d      	cmp	r3, #13
 8005186:	d84c      	bhi.n	8005222 <XMC_USBD_ClearEvent+0xae>
 8005188:	a201      	add	r2, pc, #4	; (adr r2, 8005190 <XMC_USBD_ClearEvent+0x1c>)
 800518a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518e:	bf00      	nop
 8005190:	080051c9 	.word	0x080051c9
 8005194:	08005223 	.word	0x08005223
 8005198:	08005223 	.word	0x08005223
 800519c:	08005223 	.word	0x08005223
 80051a0:	080051d3 	.word	0x080051d3
 80051a4:	08005223 	.word	0x08005223
 80051a8:	080051dd 	.word	0x080051dd
 80051ac:	080051e7 	.word	0x080051e7
 80051b0:	080051f1 	.word	0x080051f1
 80051b4:	080051fb 	.word	0x080051fb
 80051b8:	08005205 	.word	0x08005205
 80051bc:	0800520f 	.word	0x0800520f
 80051c0:	08005223 	.word	0x08005223
 80051c4:	08005219 	.word	0x08005219
  {
    case (XMC_USBD_EVENT_POWER_ON):
	  clear.b.sessreqintr = 1U;
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
 80051ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051ce:	73fb      	strb	r3, [r7, #15]
	  break;
 80051d0:	e028      	b.n	8005224 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_RESET):
	  clear.b.usbreset = 1U;
 80051d2:	7b7b      	ldrb	r3, [r7, #13]
 80051d4:	f043 0310 	orr.w	r3, r3, #16
 80051d8:	737b      	strb	r3, [r7, #13]
	  break;
 80051da:	e023      	b.n	8005224 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_SUSPEND):
	  clear.b.usbsuspend = 1U;
 80051dc:	7b7b      	ldrb	r3, [r7, #13]
 80051de:	f043 0308 	orr.w	r3, r3, #8
 80051e2:	737b      	strb	r3, [r7, #13]
	  break;
 80051e4:	e01e      	b.n	8005224 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_RESUME):
	  clear.b.wkupintr = 1U;
 80051e6:	7bfb      	ldrb	r3, [r7, #15]
 80051e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ec:	73fb      	strb	r3, [r7, #15]
	  break;
 80051ee:	e019      	b.n	8005224 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_REMOTE_WAKEUP):
	  clear.b.wkupintr = 1U;
 80051f0:	7bfb      	ldrb	r3, [r7, #15]
 80051f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f6:	73fb      	strb	r3, [r7, #15]
	  break;
 80051f8:	e014      	b.n	8005224 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_SOF):
	  clear.b.sofintr = 1U;
 80051fa:	7b3b      	ldrb	r3, [r7, #12]
 80051fc:	f043 0308 	orr.w	r3, r3, #8
 8005200:	733b      	strb	r3, [r7, #12]
	  break;
 8005202:	e00f      	b.n	8005224 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_EARLYSUSPEND):
	  clear.b.erlysuspend = 1U;
 8005204:	7b7b      	ldrb	r3, [r7, #13]
 8005206:	f043 0304 	orr.w	r3, r3, #4
 800520a:	737b      	strb	r3, [r7, #13]
	  break;
 800520c:	e00a      	b.n	8005224 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_ENUMDONE):
	  clear.b.enumdone = 1U;
 800520e:	7b7b      	ldrb	r3, [r7, #13]
 8005210:	f043 0320 	orr.w	r3, r3, #32
 8005214:	737b      	strb	r3, [r7, #13]
	  break;
 8005216:	e005      	b.n	8005224 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_OUTEP):
	  clear.b.outepintr = 1U;
 8005218:	7bbb      	ldrb	r3, [r7, #14]
 800521a:	f043 0308 	orr.w	r3, r3, #8
 800521e:	73bb      	strb	r3, [r7, #14]
	  break;
 8005220:	e000      	b.n	8005224 <XMC_USBD_ClearEvent+0xb0>
		default:
		break;
 8005222:	bf00      	nop
	}
	xmc_device.global_register->gintsts = clear.d32;
 8005224:	4b05      	ldr	r3, [pc, #20]	; (800523c <XMC_USBD_ClearEvent+0xc8>)
 8005226:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	615a      	str	r2, [r3, #20]
}
 800522e:	bf00      	nop
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	20000d50 	.word	0x20000d50

08005240 <XMC_USBD_lClearEventOTG>:

/**
 * Clear the USB OTG events
 **/
static void XMC_USBD_lClearEventOTG(uint32_t event)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  gotgint_data_t clear = { .d32 = 0U};
 8005248:	2300      	movs	r3, #0
 800524a:	60fb      	str	r3, [r7, #12]
  clear.d32 = event;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	60fb      	str	r3, [r7, #12]
  xmc_device.global_register->gotgint = clear.d32;
 8005250:	4b05      	ldr	r3, [pc, #20]	; (8005268 <XMC_USBD_lClearEventOTG+0x28>)
 8005252:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	605a      	str	r2, [r3, #4]
}
 800525a:	bf00      	nop
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	20000d50 	.word	0x20000d50

0800526c <XMC_USBD_ClearEventINEP>:

/**
 * Clear the USB IN EP events
 **/
void XMC_USBD_ClearEventINEP(uint32_t event,const uint8_t ep_num)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	460b      	mov	r3, r1
 8005276:	70fb      	strb	r3, [r7, #3]
  diepint_data_t clear;
  clear.d32 = event;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	60fb      	str	r3, [r7, #12]
  xmc_device.endpoint_in_register[ep_num]->diepint = clear.d32;
 800527c:	78fb      	ldrb	r3, [r7, #3]
 800527e:	4a06      	ldr	r2, [pc, #24]	; (8005298 <XMC_USBD_ClearEventINEP+0x2c>)
 8005280:	336a      	adds	r3, #106	; 0x6a
 8005282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	609a      	str	r2, [r3, #8]
}
 800528a:	bf00      	nop
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	20000d50 	.word	0x20000d50

0800529c <XMC_USBD_ClearEventOUTEP>:

/**
 * Clear the USB OUT EP events
 **/
void XMC_USBD_ClearEventOUTEP(uint32_t event,const uint8_t ep_num)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	460b      	mov	r3, r1
 80052a6:	70fb      	strb	r3, [r7, #3]
  doepint_data_t clear;
  clear.d32 = event;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	60fb      	str	r3, [r7, #12]
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 80052ac:	78fb      	ldrb	r3, [r7, #3]
 80052ae:	4a06      	ldr	r2, [pc, #24]	; (80052c8 <XMC_USBD_ClearEventOUTEP+0x2c>)
 80052b0:	3370      	adds	r3, #112	; 0x70
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	609a      	str	r2, [r3, #8]
}
 80052bc:	bf00      	nop
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	20000d50 	.word	0x20000d50

080052cc <XMC_USBD_EnableEventOUTEP>:

/**
 * Enable the USB OUT EP events
 **/
void XMC_USBD_EnableEventOUTEP(uint32_t event)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
	doepint_data_t doepint;
	doepint.d32 = event;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	60fb      	str	r3, [r7, #12]
	xmc_device.device_register->doepmsk |= doepint.d32;
 80052d8:	4b07      	ldr	r3, [pc, #28]	; (80052f8 <XMC_USBD_EnableEventOUTEP+0x2c>)
 80052da:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80052de:	6959      	ldr	r1, [r3, #20]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	4b05      	ldr	r3, [pc, #20]	; (80052f8 <XMC_USBD_EnableEventOUTEP+0x2c>)
 80052e4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80052e8:	430a      	orrs	r2, r1
 80052ea:	615a      	str	r2, [r3, #20]
}
 80052ec:	bf00      	nop
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	20000d50 	.word	0x20000d50

080052fc <XMC_USBD_EnableEventINEP>:

/**
 * Enable the USB IN EP events
 **/
void XMC_USBD_EnableEventINEP(uint32_t event)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
	diepint_data_t diepint;
	diepint.d32 = event;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	60fb      	str	r3, [r7, #12]
	xmc_device.device_register->diepmsk |= diepint.d32;
 8005308:	4b07      	ldr	r3, [pc, #28]	; (8005328 <XMC_USBD_EnableEventINEP+0x2c>)
 800530a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800530e:	6919      	ldr	r1, [r3, #16]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4b05      	ldr	r3, [pc, #20]	; (8005328 <XMC_USBD_EnableEventINEP+0x2c>)
 8005314:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005318:	430a      	orrs	r2, r1
 800531a:	611a      	str	r2, [r3, #16]
}
 800531c:	bf00      	nop
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	20000d50 	.word	0x20000d50

0800532c <XMC_USBD_GetCapabilities>:

/**
 * Gets the USB device capabilities
 **/
XMC_USBD_CAPABILITIES_t XMC_USBD_GetCapabilities()
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
  XMC_USBD_CAPABILITIES_t cap={0U};
 8005332:	2300      	movs	r3, #0
 8005334:	607b      	str	r3, [r7, #4]
  cap.event_connect = 1U;
 8005336:	793b      	ldrb	r3, [r7, #4]
 8005338:	f043 0304 	orr.w	r3, r3, #4
 800533c:	713b      	strb	r3, [r7, #4]
  cap.event_disconnect = 1U;
 800533e:	793b      	ldrb	r3, [r7, #4]
 8005340:	f043 0308 	orr.w	r3, r3, #8
 8005344:	713b      	strb	r3, [r7, #4]
#if UC_SERIES == 45
  cap.event_power_off = 1U;
 8005346:	793b      	ldrb	r3, [r7, #4]
 8005348:	f043 0302 	orr.w	r3, r3, #2
 800534c:	713b      	strb	r3, [r7, #4]
  cap.event_power_on = 1U;
 800534e:	793b      	ldrb	r3, [r7, #4]
 8005350:	f043 0301 	orr.w	r3, r3, #1
 8005354:	713b      	strb	r3, [r7, #4]
#else
  cap.event_power_off = 0U;
  cap.event_power_on = 0U;
#endif
  cap.event_high_speed = 0U;
 8005356:	793b      	ldrb	r3, [r7, #4]
 8005358:	f36f 1345 	bfc	r3, #5, #1
 800535c:	713b      	strb	r3, [r7, #4]
  cap.event_remote_wakeup = 1U;
 800535e:	797b      	ldrb	r3, [r7, #5]
 8005360:	f043 0301 	orr.w	r3, r3, #1
 8005364:	717b      	strb	r3, [r7, #5]
  cap.event_reset = 1U;
 8005366:	793b      	ldrb	r3, [r7, #4]
 8005368:	f043 0310 	orr.w	r3, r3, #16
 800536c:	713b      	strb	r3, [r7, #4]
  cap.event_resume = 1U;
 800536e:	793b      	ldrb	r3, [r7, #4]
 8005370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005374:	713b      	strb	r3, [r7, #4]
  cap.event_suspend = 1U;
 8005376:	793b      	ldrb	r3, [r7, #4]
 8005378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800537c:	713b      	strb	r3, [r7, #4]
  cap.reserved = 0U;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f36f 235f 	bfc	r3, #9, #23
 8005384:	607b      	str	r3, [r7, #4]
  return cap;
 8005386:	687b      	ldr	r3, [r7, #4]
}
 8005388:	4618      	mov	r0, r3
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <XMC_USBD_Init>:

/**
 * Initializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Init(XMC_USBD_t *obj)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08a      	sub	sp, #40	; 0x28
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  gintmsk_data_t gintmsk;

  XMC_ASSERT("XMC_USBD_Init: obj.usbd_max_num_eps not of type XMC_USBD_MAX_NUM_EPS_t",
 		      XMC_USBD_CHECK_INPUT_MAX_NUM_EPS(obj->usbd_max_num_eps))
  
  XMC_USBD_Enable();
 800539c:	f7ff fed2 	bl	8005144 <XMC_USBD_Enable>
  
  usbd_init = obj;
 80053a0:	4a87      	ldr	r2, [pc, #540]	; (80055c0 <XMC_USBD_Init+0x22c>)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6013      	str	r3, [r2, #0]

  /* Filling out buffer size */
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 80053a6:	2300      	movs	r3, #0
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
 80053aa:	e00c      	b.n	80053c6 <XMC_USBD_Init+0x32>
  {
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
 80053ac:	4a85      	ldr	r2, [pc, #532]	; (80055c4 <XMC_USBD_Init+0x230>)
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	2140      	movs	r1, #64	; 0x40
 80053b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
 80053b6:	4a84      	ldr	r2, [pc, #528]	; (80055c8 <XMC_USBD_Init+0x234>)
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	2140      	movs	r1, #64	; 0x40
 80053bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	3301      	adds	r3, #1
 80053c4:	627b      	str	r3, [r7, #36]	; 0x24
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	2b06      	cmp	r3, #6
 80053ca:	d9ef      	bls.n	80053ac <XMC_USBD_Init+0x18>
  }

  /* clear device status */
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));
 80053cc:	f44f 7202 	mov.w	r2, #520	; 0x208
 80053d0:	2100      	movs	r1, #0
 80053d2:	487e      	ldr	r0, [pc, #504]	; (80055cc <XMC_USBD_Init+0x238>)
 80053d4:	f001 fc14 	bl	8006c00 <memset>

  /* assign callbacks */
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	4a7b      	ldr	r2, [pc, #492]	; (80055cc <XMC_USBD_Init+0x238>)
 80053de:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	4a79      	ldr	r2, [pc, #484]	; (80055cc <XMC_USBD_Init+0x238>)
 80053e8:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	623b      	str	r3, [r7, #32]
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a75      	ldr	r2, [pc, #468]	; (80055cc <XMC_USBD_Init+0x238>)
 80053f8:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
 80053fc:	6a3b      	ldr	r3, [r7, #32]
 80053fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005402:	4a72      	ldr	r2, [pc, #456]	; (80055cc <XMC_USBD_Init+0x238>)
 8005404:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8005408:	2300      	movs	r3, #0
 800540a:	627b      	str	r3, [r7, #36]	; 0x24
 800540c:	e00c      	b.n	8005428 <XMC_USBD_Init+0x94>
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	3348      	adds	r3, #72	; 0x48
 8005412:	015b      	lsls	r3, r3, #5
 8005414:	6a3a      	ldr	r2, [r7, #32]
 8005416:	441a      	add	r2, r3
 8005418:	496c      	ldr	r1, [pc, #432]	; (80055cc <XMC_USBD_Init+0x238>)
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	336a      	adds	r3, #106	; 0x6a
 800541e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005424:	3301      	adds	r3, #1
 8005426:	627b      	str	r3, [r7, #36]	; 0x24
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	2b06      	cmp	r3, #6
 800542c:	d9ef      	bls.n	800540e <XMC_USBD_Init+0x7a>
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 800542e:	2300      	movs	r3, #0
 8005430:	627b      	str	r3, [r7, #36]	; 0x24
 8005432:	e00d      	b.n	8005450 <XMC_USBD_Init+0xbc>
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
    									  DWC_DEV_OUT_EP_REG_OFFSET +
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	3358      	adds	r3, #88	; 0x58
 8005438:	015b      	lsls	r3, r3, #5
 800543a:	6a3a      	ldr	r2, [r7, #32]
 800543c:	441a      	add	r2, r3
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
 800543e:	4963      	ldr	r1, [pc, #396]	; (80055cc <XMC_USBD_Init+0x238>)
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	3370      	adds	r3, #112	; 0x70
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	440b      	add	r3, r1
 8005448:	605a      	str	r2, [r3, #4]
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	3301      	adds	r3, #1
 800544e:	627b      	str	r3, [r7, #36]	; 0x24
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	2b06      	cmp	r3, #6
 8005454:	d9ee      	bls.n	8005434 <XMC_USBD_Init+0xa0>
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8005456:	2300      	movs	r3, #0
 8005458:	627b      	str	r3, [r7, #36]	; 0x24
 800545a:	e00c      	b.n	8005476 <XMC_USBD_Init+0xe2>
  {
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
    						XMC_USBD_TX_FIFO_REG_OFFSET +
 800545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545e:	3301      	adds	r3, #1
 8005460:	031b      	lsls	r3, r3, #12
 8005462:	6a3a      	ldr	r2, [r7, #32]
 8005464:	441a      	add	r2, r3
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
 8005466:	4959      	ldr	r1, [pc, #356]	; (80055cc <XMC_USBD_Init+0x238>)
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	3378      	adds	r3, #120	; 0x78
 800546c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	3301      	adds	r3, #1
 8005474:	627b      	str	r3, [r7, #36]	; 0x24
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	2b06      	cmp	r3, #6
 800547a:	d9ef      	bls.n	800545c <XMC_USBD_Init+0xc8>
    						(i * XMC_USBD_TX_FIFO_OFFSET));
  }
  /* obj data structure for endpoint 0 */
  /* Done by driver core */
  /* configure ahb details */  
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
 800547c:	4b53      	ldr	r3, [pc, #332]	; (80055cc <XMC_USBD_Init+0x238>)
 800547e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	61fb      	str	r3, [r7, #28]
  gahbcfg.b.glblintrmsk = 1U; /* enable interrupts ( global mask ) */
 8005486:	7f3b      	ldrb	r3, [r7, #28]
 8005488:	f043 0301 	orr.w	r3, r3, #1
 800548c:	773b      	strb	r3, [r7, #28]
  gahbcfg.b.nptxfemplvl_txfemplvl = 1U;
 800548e:	7f3b      	ldrb	r3, [r7, #28]
 8005490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005494:	773b      	strb	r3, [r7, #28]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	7b5b      	ldrb	r3, [r3, #13]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d104      	bne.n	80054a8 <XMC_USBD_Init+0x114>
  {
    /* Enable dma if needed */
    gahbcfg.b.dmaenable = 1U; /* enable dma if needed */
 800549e:	7f3b      	ldrb	r3, [r7, #28]
 80054a0:	f043 0320 	orr.w	r3, r3, #32
 80054a4:	773b      	strb	r3, [r7, #28]
 80054a6:	e003      	b.n	80054b0 <XMC_USBD_Init+0x11c>
  }
  else
  {
    gahbcfg.b.dmaenable = 0U;
 80054a8:	7f3b      	ldrb	r3, [r7, #28]
 80054aa:	f36f 1345 	bfc	r3, #5, #1
 80054ae:	773b      	strb	r3, [r7, #28]
  }
  xmc_device.global_register->gahbcfg = gahbcfg.d32;
 80054b0:	4b46      	ldr	r3, [pc, #280]	; (80055cc <XMC_USBD_Init+0x238>)
 80054b2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80054b6:	69fa      	ldr	r2, [r7, #28]
 80054b8:	609a      	str	r2, [r3, #8]
  /* configure usb details */  
  gusbcfg.d32= xmc_device.global_register->gusbcfg;
 80054ba:	4b44      	ldr	r3, [pc, #272]	; (80055cc <XMC_USBD_Init+0x238>)
 80054bc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	61bb      	str	r3, [r7, #24]
  gusbcfg.b.force_dev_mode = 1U; /* force us into device mode */
 80054c4:	7efb      	ldrb	r3, [r7, #27]
 80054c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054ca:	76fb      	strb	r3, [r7, #27]
  gusbcfg.b.srpcap = 1U; /* enable session request protocoll */
 80054cc:	7e7b      	ldrb	r3, [r7, #25]
 80054ce:	f043 0301 	orr.w	r3, r3, #1
 80054d2:	767b      	strb	r3, [r7, #25]
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 80054d4:	4b3d      	ldr	r3, [pc, #244]	; (80055cc <XMC_USBD_Init+0x238>)
 80054d6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80054da:	69ba      	ldr	r2, [r7, #24]
 80054dc:	60da      	str	r2, [r3, #12]

  /* Device init */
  /* configure device speed */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 80054de:	4b3b      	ldr	r3, [pc, #236]	; (80055cc <XMC_USBD_Init+0x238>)
 80054e0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	617b      	str	r3, [r7, #20]
  dcfg.b.devspd = XMC_USBD_DCFG_DEVSPD_FS;
 80054e8:	7d3b      	ldrb	r3, [r7, #20]
 80054ea:	f043 0303 	orr.w	r3, r3, #3
 80054ee:	753b      	strb	r3, [r7, #20]
  dcfg.b.descdma = 0U;
 80054f0:	7dbb      	ldrb	r3, [r7, #22]
 80054f2:	f36f 13c7 	bfc	r3, #7, #1
 80054f6:	75bb      	strb	r3, [r7, #22]
  xmc_device.device_register->dcfg = dcfg.d32;
 80054f8:	4b34      	ldr	r3, [pc, #208]	; (80055cc <XMC_USBD_Init+0x238>)
 80054fa:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	601a      	str	r2, [r3, #0]
  /* configure device functions */  
  dctl.d32 = xmc_device.device_register->dctl;
 8005502:	4b32      	ldr	r3, [pc, #200]	; (80055cc <XMC_USBD_Init+0x238>)
 8005504:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	613b      	str	r3, [r7, #16]
  dctl.b.sftdiscon = 1U; /* disconnect the device until its connected by the user */
 800550c:	7c3b      	ldrb	r3, [r7, #16]
 800550e:	f043 0302 	orr.w	r3, r3, #2
 8005512:	743b      	strb	r3, [r7, #16]
  /* all other config is done by default register value */
  xmc_device.device_register->dctl = dctl.d32;
 8005514:	4b2d      	ldr	r3, [pc, #180]	; (80055cc <XMC_USBD_Init+0x238>)
 8005516:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	605a      	str	r2, [r3, #4]
  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo((uint8_t)0x10U); /* 0x10 == all fifos, see doc */
 800551e:	2010      	movs	r0, #16
 8005520:	f7ff f814 	bl	800454c <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 8005524:	f7ff f850 	bl	80045c8 <XMC_USBD_lFlushRXFifo>
  /* Enable Global Interrupts */
  /* clear interrupt status bits prior to unmasking */
  xmc_device.global_register->gintmsk = 0U; /* disable all interrupts */
 8005528:	4b28      	ldr	r3, [pc, #160]	; (80055cc <XMC_USBD_Init+0x238>)
 800552a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800552e:	2200      	movs	r2, #0
 8005530:	619a      	str	r2, [r3, #24]
  xmc_device.global_register->gintsts = 0xFFFFFFFFU; /* clear all interrupts */
 8005532:	4b26      	ldr	r3, [pc, #152]	; (80055cc <XMC_USBD_Init+0x238>)
 8005534:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005538:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800553c:	615a      	str	r2, [r3, #20]
 
  gintmsk.d32 = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	60fb      	str	r3, [r7, #12]
  /* enable common interrupts */
  gintmsk.b.modemismatch = 1U;
 8005542:	7b3b      	ldrb	r3, [r7, #12]
 8005544:	f043 0302 	orr.w	r3, r3, #2
 8005548:	733b      	strb	r3, [r7, #12]
  gintmsk.b.otgintr = 1U;
 800554a:	7b3b      	ldrb	r3, [r7, #12]
 800554c:	f043 0304 	orr.w	r3, r3, #4
 8005550:	733b      	strb	r3, [r7, #12]
  gintmsk.b.sessreqintr = 1U;
 8005552:	7bfb      	ldrb	r3, [r7, #15]
 8005554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005558:	73fb      	strb	r3, [r7, #15]
  /* enable device interrupts */
  gintmsk.b.usbreset = 1U;
 800555a:	7b7b      	ldrb	r3, [r7, #13]
 800555c:	f043 0310 	orr.w	r3, r3, #16
 8005560:	737b      	strb	r3, [r7, #13]
  gintmsk.b.enumdone = 1U;
 8005562:	7b7b      	ldrb	r3, [r7, #13]
 8005564:	f043 0320 	orr.w	r3, r3, #32
 8005568:	737b      	strb	r3, [r7, #13]
  gintmsk.b.erlysuspend = 1U;
 800556a:	7b7b      	ldrb	r3, [r7, #13]
 800556c:	f043 0304 	orr.w	r3, r3, #4
 8005570:	737b      	strb	r3, [r7, #13]
  gintmsk.b.usbsuspend = 1U;
 8005572:	7b7b      	ldrb	r3, [r7, #13]
 8005574:	f043 0308 	orr.w	r3, r3, #8
 8005578:	737b      	strb	r3, [r7, #13]
  gintmsk.b.wkupintr = 1U;
 800557a:	7bfb      	ldrb	r3, [r7, #15]
 800557c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005580:	73fb      	strb	r3, [r7, #15]
  gintmsk.b.sofintr = 1U;
 8005582:	7b3b      	ldrb	r3, [r7, #12]
 8005584:	f043 0308 	orr.w	r3, r3, #8
 8005588:	733b      	strb	r3, [r7, #12]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	7b5b      	ldrb	r3, [r3, #13]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d103      	bne.n	800559a <XMC_USBD_Init+0x206>
  {
    gintmsk.b.rxstsqlvl = 1U;
 8005592:	7b3b      	ldrb	r3, [r7, #12]
 8005594:	f043 0310 	orr.w	r3, r3, #16
 8005598:	733b      	strb	r3, [r7, #12]
  }
  gintmsk.b.outepintr = 1U;
 800559a:	7bbb      	ldrb	r3, [r7, #14]
 800559c:	f043 0308 	orr.w	r3, r3, #8
 80055a0:	73bb      	strb	r3, [r7, #14]
  gintmsk.b.inepintr = 1U;
 80055a2:	7bbb      	ldrb	r3, [r7, #14]
 80055a4:	f043 0304 	orr.w	r3, r3, #4
 80055a8:	73bb      	strb	r3, [r7, #14]
  xmc_device.global_register->gintmsk = gintmsk.d32;
 80055aa:	4b08      	ldr	r3, [pc, #32]	; (80055cc <XMC_USBD_Init+0x238>)
 80055ac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	619a      	str	r2, [r3, #24]
  return XMC_USBD_STATUS_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3728      	adds	r7, #40	; 0x28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	20000d4c 	.word	0x20000d4c
 80055c4:	20000504 	.word	0x20000504
 80055c8:	20000520 	.word	0x20000520
 80055cc:	20000d50 	.word	0x20000d50

080055d0 <XMC_USBD_Uninitialize>:

/**
 * Uninitializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Uninitialize() 
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
  /* Disconnect the device */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 80055d6:	4b0c      	ldr	r3, [pc, #48]	; (8005608 <XMC_USBD_Uninitialize+0x38>)
 80055d8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 1U;
 80055e0:	793b      	ldrb	r3, [r7, #4]
 80055e2:	f043 0302 	orr.w	r3, r3, #2
 80055e6:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 80055e8:	4b07      	ldr	r3, [pc, #28]	; (8005608 <XMC_USBD_Uninitialize+0x38>)
 80055ea:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	605a      	str	r2, [r3, #4]
  /* clean up */
  memset((void*)&xmc_device,0U,sizeof(xmc_device));
 80055f2:	f44f 7202 	mov.w	r2, #520	; 0x208
 80055f6:	2100      	movs	r1, #0
 80055f8:	4803      	ldr	r0, [pc, #12]	; (8005608 <XMC_USBD_Uninitialize+0x38>)
 80055fa:	f001 fb01 	bl	8006c00 <memset>
  return XMC_USBD_STATUS_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	20000d50 	.word	0x20000d50

0800560c <XMC_USBD_DeviceConnect>:

/**
 * Connects the USB device to host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceConnect() 
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
  /* Just disable softdisconnect */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8005612:	4b0a      	ldr	r3, [pc, #40]	; (800563c <XMC_USBD_DeviceConnect+0x30>)
 8005614:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 0U;
 800561c:	793b      	ldrb	r3, [r7, #4]
 800561e:	f36f 0341 	bfc	r3, #1, #1
 8005622:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 8005624:	4b05      	ldr	r3, [pc, #20]	; (800563c <XMC_USBD_DeviceConnect+0x30>)
 8005626:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	605a      	str	r2, [r3, #4]
  return XMC_USBD_STATUS_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	20000d50 	.word	0x20000d50

08005640 <XMC_USBD_DeviceDisconnect>:

/**
 * Disconnects the USB device from host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceDisconnect() 
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8005646:	4b0a      	ldr	r3, [pc, #40]	; (8005670 <XMC_USBD_DeviceDisconnect+0x30>)
 8005648:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 1U;
 8005650:	793b      	ldrb	r3, [r7, #4]
 8005652:	f043 0302 	orr.w	r3, r3, #2
 8005656:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 8005658:	4b05      	ldr	r3, [pc, #20]	; (8005670 <XMC_USBD_DeviceDisconnect+0x30>)
 800565a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	605a      	str	r2, [r3, #4]
  return XMC_USBD_STATUS_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	20000d50 	.word	0x20000d50

08005674 <XMC_USBD_DeviceGetState>:

/**
 * Gets the USB device state.
 **/
XMC_USBD_STATE_t XMC_USBD_DeviceGetState(const XMC_USBD_t *const obj) 
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  XMC_USBD_STATE_t state={0U};
 800567c:	2300      	movs	r3, #0
 800567e:	60fb      	str	r3, [r7, #12]
  state.speed = XMC_USBD_SPEED_FULL;
 8005680:	7b3b      	ldrb	r3, [r7, #12]
 8005682:	2201      	movs	r2, #1
 8005684:	f362 03c4 	bfi	r3, r2, #3, #2
 8005688:	733b      	strb	r3, [r7, #12]
  state.connected = xmc_device.IsConnected;
 800568a:	4b12      	ldr	r3, [pc, #72]	; (80056d4 <XMC_USBD_DeviceGetState+0x60>)
 800568c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005690:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005694:	b2da      	uxtb	r2, r3
 8005696:	7b3b      	ldrb	r3, [r7, #12]
 8005698:	f362 0341 	bfi	r3, r2, #1, #1
 800569c:	733b      	strb	r3, [r7, #12]
  state.active = XMC_USBD_lDeviceActive(obj);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7fe fe5a 	bl	8004358 <XMC_USBD_lDeviceActive>
 80056a4:	4603      	mov	r3, r0
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	b2da      	uxtb	r2, r3
 80056ac:	7b3b      	ldrb	r3, [r7, #12]
 80056ae:	f362 0382 	bfi	r3, r2, #2, #1
 80056b2:	733b      	strb	r3, [r7, #12]
  state.powered = xmc_device.IsPowered;
 80056b4:	4b07      	ldr	r3, [pc, #28]	; (80056d4 <XMC_USBD_DeviceGetState+0x60>)
 80056b6:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80056ba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	7b3b      	ldrb	r3, [r7, #12]
 80056c2:	f362 0300 	bfi	r3, r2, #0, #1
 80056c6:	733b      	strb	r3, [r7, #12]
  return state;
 80056c8:	68fb      	ldr	r3, [r7, #12]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	20000d50 	.word	0x20000d50

080056d8 <XMC_USBD_EndpointReadStart>:

/**
 * Prepares the endpoint to read next OUT packet
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointReadStart(const uint8_t ep_addr, uint32_t size) 
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	4603      	mov	r3, r0
 80056e0:	6039      	str	r1, [r7, #0]
 80056e2:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
 80056e4:	79fb      	ldrb	r3, [r7, #7]
 80056e6:	f003 030f 	and.w	r3, r3, #15
 80056ea:	2234      	movs	r2, #52	; 0x34
 80056ec:	fb02 f303 	mul.w	r3, r2, r3
 80056f0:	4a1a      	ldr	r2, [pc, #104]	; (800575c <XMC_USBD_EndpointReadStart+0x84>)
 80056f2:	4413      	add	r3, r2
 80056f4:	60bb      	str	r3, [r7, #8]
  XMC_USBD_STATUS_t result;
	
  if (ep->outInUse || !ep->isConfigured)
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d106      	bne.n	8005712 <XMC_USBD_EndpointReadStart+0x3a>
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	791b      	ldrb	r3, [r3, #4]
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d102      	bne.n	8005718 <XMC_USBD_EndpointReadStart+0x40>
  {
    result = XMC_USBD_STATUS_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	73fb      	strb	r3, [r7, #15]
 8005716:	e01c      	b.n	8005752 <XMC_USBD_EndpointReadStart+0x7a>
  }
  else
  {
    /* short the length to buffer size if needed */
    if (size > ep->outBufferSize)
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	429a      	cmp	r2, r3
 8005720:	d902      	bls.n	8005728 <XMC_USBD_EndpointReadStart+0x50>
    {
      size = ep->outBufferSize;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	603b      	str	r3, [r7, #0]
    }
    /* set ep values */
    ep->xferTotal = size;
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	631a      	str	r2, [r3, #48]	; 0x30
    ep->xferCount = 0U;
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	2200      	movs	r2, #0
 8005732:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->xferLength = 0U;
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2200      	movs	r2, #0
 8005738:	629a      	str	r2, [r3, #40]	; 0x28
    ep->xferBuffer = ep->outBuffer;
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	68da      	ldr	r2, [r3, #12]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	625a      	str	r2, [r3, #36]	; 0x24
    ep->outBytesAvailable = 0U;
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2200      	movs	r2, #0
 8005746:	611a      	str	r2, [r3, #16]
    XMC_USBD_lStartReadXfer(ep);
 8005748:	68b8      	ldr	r0, [r7, #8]
 800574a:	f7fe ffc5 	bl	80046d8 <XMC_USBD_lStartReadXfer>
    result= XMC_USBD_STATUS_OK;
 800574e:	2300      	movs	r3, #0
 8005750:	73fb      	strb	r3, [r7, #15]
  }
  return result;
 8005752:	7bfb      	ldrb	r3, [r7, #15]
}
 8005754:	4618      	mov	r0, r3
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	20000d50 	.word	0x20000d50

08005760 <XMC_USBD_EndpointRead>:

/**
 * Reads the number of bytes from the USB OUT endpoint
 **/
int32_t XMC_USBD_EndpointRead(const uint8_t ep_num,uint8_t * buffer,uint32_t length) 
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	4603      	mov	r3, r0
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
 800576c:	73fb      	strb	r3, [r7, #15]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_num];
 800576e:	7bfb      	ldrb	r3, [r7, #15]
 8005770:	2234      	movs	r2, #52	; 0x34
 8005772:	fb02 f303 	mul.w	r3, r2, r3
 8005776:	4a17      	ldr	r2, [pc, #92]	; (80057d4 <XMC_USBD_EndpointRead+0x74>)
 8005778:	4413      	add	r3, r2
 800577a:	617b      	str	r3, [r7, #20]
  if (length > ep->outBytesAvailable)
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	429a      	cmp	r2, r3
 8005784:	d902      	bls.n	800578c <XMC_USBD_EndpointRead+0x2c>
  {
    length = ep->outBytesAvailable;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	607b      	str	r3, [r7, #4]
  }
  memcpy(buffer,&ep->outBuffer[ep->outOffset],length);
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	68da      	ldr	r2, [r3, #12]
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	4413      	add	r3, r2
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	4619      	mov	r1, r3
 800579a:	68b8      	ldr	r0, [r7, #8]
 800579c:	f001 f996 	bl	8006acc <memcpy>
  ep->outBytesAvailable -= length;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	691a      	ldr	r2, [r3, #16]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	1ad2      	subs	r2, r2, r3
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	611a      	str	r2, [r3, #16]
  if (ep->outBytesAvailable)
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d006      	beq.n	80057c2 <XMC_USBD_EndpointRead+0x62>
  {
    ep->outOffset += length;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	699a      	ldr	r2, [r3, #24]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	441a      	add	r2, r3
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	619a      	str	r2, [r3, #24]
 80057c0:	e002      	b.n	80057c8 <XMC_USBD_EndpointRead+0x68>
  }
  else
  {
    ep->outOffset = 0U;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	2200      	movs	r2, #0
 80057c6:	619a      	str	r2, [r3, #24]
  }
  return (int32_t)length;
 80057c8:	687b      	ldr	r3, [r7, #4]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3718      	adds	r7, #24
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	20000d50 	.word	0x20000d50

080057d8 <XMC_USBD_EndpointWrite>:

/**
 * Writes number of bytes in to the USB IN endpoint.
 **/
int32_t XMC_USBD_EndpointWrite(const uint8_t ep_num,const uint8_t * buffer,uint32_t length) 
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	4603      	mov	r3, r0
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	73fb      	strb	r3, [r7, #15]
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num & (uint8_t)XMC_USBD_EP_NUM_MASK];
 80057e6:	7bfb      	ldrb	r3, [r7, #15]
 80057e8:	f003 030f 	and.w	r3, r3, #15
 80057ec:	2234      	movs	r2, #52	; 0x34
 80057ee:	fb02 f303 	mul.w	r3, r2, r3
 80057f2:	4a21      	ldr	r2, [pc, #132]	; (8005878 <XMC_USBD_EndpointWrite+0xa0>)
 80057f4:	4413      	add	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]
  int32_t result;
  if (!ep->isConfigured)
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	791b      	ldrb	r3, [r3, #4]
 80057fc:	f003 0304 	and.w	r3, r3, #4
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d102      	bne.n	800580c <XMC_USBD_EndpointWrite+0x34>
  {
    result = (int32_t)XMC_USBD_STATUS_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	617b      	str	r3, [r7, #20]
 800580a:	e030      	b.n	800586e <XMC_USBD_EndpointWrite+0x96>
  }
  else if (ep->inInUse == 1U)
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b01      	cmp	r3, #1
 8005818:	d102      	bne.n	8005820 <XMC_USBD_EndpointWrite+0x48>
  {
    result=(int32_t)0;
 800581a:	2300      	movs	r3, #0
 800581c:	617b      	str	r3, [r7, #20]
 800581e:	e026      	b.n	800586e <XMC_USBD_EndpointWrite+0x96>
  }
  else
  {
    if (length > ep->inBufferSize)
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	429a      	cmp	r2, r3
 8005828:	d902      	bls.n	8005830 <XMC_USBD_EndpointWrite+0x58>
    {
      length = ep->inBufferSize;
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	607b      	str	r3, [r7, #4]
    }
    /* copy data into input buffer for DMA and FIFO mode */
		memcpy(ep->inBuffer,(const void *)buffer,length);
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	68b9      	ldr	r1, [r7, #8]
 8005838:	4618      	mov	r0, r3
 800583a:	f001 f947 	bl	8006acc <memcpy>
		ep->xferBuffer = ep->inBuffer;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	69da      	ldr	r2, [r3, #28]
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	625a      	str	r2, [r3, #36]	; 0x24
    ep->xferTotal = length;
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	631a      	str	r2, [r3, #48]	; 0x30
    /* set transfer values */
    ep->xferLength = 0U;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	2200      	movs	r2, #0
 8005850:	629a      	str	r2, [r3, #40]	; 0x28
    ep->xferCount = 0U;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	2200      	movs	r2, #0
 8005856:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->inInUse = 1U;
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	6853      	ldr	r3, [r2, #4]
 800585c:	f043 0308 	orr.w	r3, r3, #8
 8005860:	6053      	str	r3, [r2, #4]
    /* start the transfer */
    XMC_USBD_lStartWriteXfer(ep);
 8005862:	6938      	ldr	r0, [r7, #16]
 8005864:	f7fe fff4 	bl	8004850 <XMC_USBD_lStartWriteXfer>
    result=(int32_t)ep->xferTotal;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586c:	617b      	str	r3, [r7, #20]
  }
  return result;
 800586e:	697b      	ldr	r3, [r7, #20]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	20000d50 	.word	0x20000d50

0800587c <XMC_USBD_DeviceSetAddress>:

/**
 * Sets the USB device address.
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceSetAddress(const uint8_t address,const XMC_USBD_SET_ADDRESS_STAGE_t stage) 
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	4603      	mov	r3, r0
 8005884:	460a      	mov	r2, r1
 8005886:	71fb      	strb	r3, [r7, #7]
 8005888:	4613      	mov	r3, r2
 800588a:	71bb      	strb	r3, [r7, #6]
  dcfg_data_t data;
  data.d32 = xmc_device.device_register->dcfg;
 800588c:	4b0d      	ldr	r3, [pc, #52]	; (80058c4 <XMC_USBD_DeviceSetAddress+0x48>)
 800588e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	60fb      	str	r3, [r7, #12]
  if (stage == XMC_USBD_SET_ADDRESS_STAGE_SETUP)
 8005896:	79bb      	ldrb	r3, [r7, #6]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10c      	bne.n	80058b6 <XMC_USBD_DeviceSetAddress+0x3a>
  {
    data.b.devaddr = address;
 800589c:	79fb      	ldrb	r3, [r7, #7]
 800589e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	89bb      	ldrh	r3, [r7, #12]
 80058a6:	f362 130a 	bfi	r3, r2, #4, #7
 80058aa:	81bb      	strh	r3, [r7, #12]
    xmc_device.device_register->dcfg = data.d32;
 80058ac:	4b05      	ldr	r3, [pc, #20]	; (80058c4 <XMC_USBD_DeviceSetAddress+0x48>)
 80058ae:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	601a      	str	r2, [r3, #0]
  }
	return XMC_USBD_STATUS_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3714      	adds	r7, #20
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	20000d50 	.word	0x20000d50

080058c8 <XMC_USBD_EndpointStall>:

/**
 * Set/clear stall on the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointStall(const uint8_t ep_addr, const bool stall) 
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	4603      	mov	r3, r0
 80058d0:	460a      	mov	r2, r1
 80058d2:	71fb      	strb	r3, [r7, #7]
 80058d4:	4613      	mov	r3, r2
 80058d6:	71bb      	strb	r3, [r7, #6]
  depctl_data_t data;
  XMC_USBD_EP_t *ep = &xmc_device.ep[(ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK)];
 80058d8:	79fb      	ldrb	r3, [r7, #7]
 80058da:	f003 030f 	and.w	r3, r3, #15
 80058de:	2234      	movs	r2, #52	; 0x34
 80058e0:	fb02 f303 	mul.w	r3, r2, r3
 80058e4:	4a4a      	ldr	r2, [pc, #296]	; (8005a10 <XMC_USBD_EndpointStall+0x148>)
 80058e6:	4413      	add	r3, r2
 80058e8:	60fb      	str	r3, [r7, #12]
  if (stall)
 80058ea:	79bb      	ldrb	r3, [r7, #6]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d040      	beq.n	8005972 <XMC_USBD_EndpointStall+0xaa>
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 80058f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	da1a      	bge.n	800592e <XMC_USBD_EndpointStall+0x66>
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005900:	b2db      	uxtb	r3, r3
 8005902:	4a43      	ldr	r2, [pc, #268]	; (8005a10 <XMC_USBD_EndpointStall+0x148>)
 8005904:	336a      	adds	r3, #106	; 0x6a
 8005906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	60bb      	str	r3, [r7, #8]
      data.b.stall = 1U;
 800590e:	7abb      	ldrb	r3, [r7, #10]
 8005910:	f043 0320 	orr.w	r3, r3, #32
 8005914:	72bb      	strb	r3, [r7, #10]
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800591e:	b2db      	uxtb	r3, r3
 8005920:	4a3b      	ldr	r2, [pc, #236]	; (8005a10 <XMC_USBD_EndpointStall+0x148>)
 8005922:	336a      	adds	r3, #106	; 0x6a
 8005924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	e01b      	b.n	8005966 <XMC_USBD_EndpointStall+0x9e>
    }
    else
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005936:	b2db      	uxtb	r3, r3
 8005938:	4a35      	ldr	r2, [pc, #212]	; (8005a10 <XMC_USBD_EndpointStall+0x148>)
 800593a:	3370      	adds	r3, #112	; 0x70
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	60bb      	str	r3, [r7, #8]
      data.b.stall = 1U;
 8005946:	7abb      	ldrb	r3, [r7, #10]
 8005948:	f043 0320 	orr.w	r3, r3, #32
 800594c:	72bb      	strb	r3, [r7, #10]
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005956:	b2db      	uxtb	r3, r3
 8005958:	4a2d      	ldr	r2, [pc, #180]	; (8005a10 <XMC_USBD_EndpointStall+0x148>)
 800595a:	3370      	adds	r3, #112	; 0x70
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	601a      	str	r2, [r3, #0]
    }
    ep->isStalled = 1U;
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	7913      	ldrb	r3, [r2, #4]
 800596a:	f043 0320 	orr.w	r3, r3, #32
 800596e:	7113      	strb	r3, [r2, #4]
 8005970:	e047      	b.n	8005a02 <XMC_USBD_EndpointStall+0x13a>
  }
  else
  {
    /* just clear stall bit */
		if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 8005972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005976:	2b00      	cmp	r3, #0
 8005978:	da1e      	bge.n	80059b8 <XMC_USBD_EndpointStall+0xf0>
		{
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005982:	b2db      	uxtb	r3, r3
 8005984:	4a22      	ldr	r2, [pc, #136]	; (8005a10 <XMC_USBD_EndpointStall+0x148>)
 8005986:	336a      	adds	r3, #106	; 0x6a
 8005988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	60bb      	str	r3, [r7, #8]
			data.b.stall = 0U;
 8005990:	7abb      	ldrb	r3, [r7, #10]
 8005992:	f36f 1345 	bfc	r3, #5, #1
 8005996:	72bb      	strb	r3, [r7, #10]
			data.b.setd0pid = 1U; /* reset pid to 0 */
 8005998:	7afb      	ldrb	r3, [r7, #11]
 800599a:	f043 0310 	orr.w	r3, r3, #16
 800599e:	72fb      	strb	r3, [r7, #11]
			xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	4a19      	ldr	r2, [pc, #100]	; (8005a10 <XMC_USBD_EndpointStall+0x148>)
 80059ac:	336a      	adds	r3, #106	; 0x6a
 80059ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	e01f      	b.n	80059f8 <XMC_USBD_EndpointStall+0x130>
		}
		else
		{
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	4a13      	ldr	r2, [pc, #76]	; (8005a10 <XMC_USBD_EndpointStall+0x148>)
 80059c4:	3370      	adds	r3, #112	; 0x70
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60bb      	str	r3, [r7, #8]
			data.b.stall = 0U;
 80059d0:	7abb      	ldrb	r3, [r7, #10]
 80059d2:	f36f 1345 	bfc	r3, #5, #1
 80059d6:	72bb      	strb	r3, [r7, #10]
			data.b.setd0pid = 1U; /* reset pid to 0 */
 80059d8:	7afb      	ldrb	r3, [r7, #11]
 80059da:	f043 0310 	orr.w	r3, r3, #16
 80059de:	72fb      	strb	r3, [r7, #11]
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	4a09      	ldr	r2, [pc, #36]	; (8005a10 <XMC_USBD_EndpointStall+0x148>)
 80059ec:	3370      	adds	r3, #112	; 0x70
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	601a      	str	r2, [r3, #0]
		}
		ep->isStalled = 0U;
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	7913      	ldrb	r3, [r2, #4]
 80059fc:	f36f 1345 	bfc	r3, #5, #1
 8005a00:	7113      	strb	r3, [r2, #4]
	}
	return XMC_USBD_STATUS_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3714      	adds	r7, #20
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	20000d50 	.word	0x20000d50

08005a14 <XMC_USBD_EndpointAbort>:

/**
 * Aborts the data transfer on the selected endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointAbort(const uint8_t ep_addr) {
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8005a1e:	79fb      	ldrb	r3, [r7, #7]
 8005a20:	f003 030f 	and.w	r3, r3, #15
 8005a24:	2234      	movs	r2, #52	; 0x34
 8005a26:	fb02 f303 	mul.w	r3, r2, r3
 8005a2a:	4a1b      	ldr	r2, [pc, #108]	; (8005a98 <XMC_USBD_EndpointAbort+0x84>)
 8005a2c:	4413      	add	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]
  if (ep->address_u.address_st.direction)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d004      	beq.n	8005a48 <XMC_USBD_EndpointAbort+0x34>
  {
    ep->inInUse = 0U;
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	6853      	ldr	r3, [r2, #4]
 8005a42:	f36f 03c3 	bfc	r3, #3, #1
 8005a46:	6053      	str	r3, [r2, #4]
  }
  if (!ep->address_u.address_st.direction)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d104      	bne.n	8005a60 <XMC_USBD_EndpointAbort+0x4c>
  {
    ep->outInUse = 0U;
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	6853      	ldr	r3, [r2, #4]
 8005a5a:	f36f 1304 	bfc	r3, #4, #1
 8005a5e:	6053      	str	r3, [r2, #4]
  }
  ep->isStalled = 0U;
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	7913      	ldrb	r3, [r2, #4]
 8005a64:	f36f 1345 	bfc	r3, #5, #1
 8005a68:	7113      	strb	r3, [r2, #4]
  ep->outBytesAvailable = 0U;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	611a      	str	r2, [r3, #16]
  ep->outOffset = 0U;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	619a      	str	r2, [r3, #24]
  ep->xferLength = 0U;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	629a      	str	r2, [r3, #40]	; 0x28
  ep->xferCount = 0U;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	62da      	str	r2, [r3, #44]	; 0x2c
  ep->xferTotal = 0U;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	631a      	str	r2, [r3, #48]	; 0x30

  return XMC_USBD_STATUS_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	20000d50 	.word	0x20000d50

08005a9c <XMC_USBD_EndpointConfigure>:
 * Configures the given endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointConfigure(const uint8_t ep_addr,
		                                     const XMC_USBD_ENDPOINT_TYPE_t ep_type,
		                                     const uint16_t ep_max_packet_size) 
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	71fb      	strb	r3, [r7, #7]
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	71bb      	strb	r3, [r7, #6]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	80bb      	strh	r3, [r7, #4]
  daint_data_t daintmsk;
  XMC_USBD_EP_t *ep;
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8005aae:	4bb0      	ldr	r3, [pc, #704]	; (8005d70 <XMC_USBD_EndpointConfigure+0x2d4>)
 8005ab0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	613b      	str	r3, [r7, #16]
  ep =&xmc_device.ep[ep_addr & (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8005ab8:	79fb      	ldrb	r3, [r7, #7]
 8005aba:	f003 030f 	and.w	r3, r3, #15
 8005abe:	2234      	movs	r2, #52	; 0x34
 8005ac0:	fb02 f303 	mul.w	r3, r2, r3
 8005ac4:	4aaa      	ldr	r2, [pc, #680]	; (8005d70 <XMC_USBD_EndpointConfigure+0x2d4>)
 8005ac6:	4413      	add	r3, r2
 8005ac8:	617b      	str	r3, [r7, #20]
  memset((void*)ep,0x0U,sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
 8005aca:	2234      	movs	r2, #52	; 0x34
 8005acc:	2100      	movs	r1, #0
 8005ace:	6978      	ldr	r0, [r7, #20]
 8005ad0:	f001 f896 	bl	8006c00 <memset>
  /* do ep configuration */
  ep->address_u.address = ep_addr;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	79fa      	ldrb	r2, [r7, #7]
 8005ad8:	701a      	strb	r2, [r3, #0]
  ep->isConfigured = 1U;
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	7913      	ldrb	r3, [r2, #4]
 8005ade:	f043 0304 	orr.w	r3, r3, #4
 8005ae2:	7113      	strb	r3, [r2, #4]
  ep->maxPacketSize = (uint8_t)ep_max_packet_size;
 8005ae4:	88bb      	ldrh	r3, [r7, #4]
 8005ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aea:	b2d9      	uxtb	r1, r3
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	6853      	ldr	r3, [r2, #4]
 8005af0:	f361 23d1 	bfi	r3, r1, #11, #7
 8005af4:	6053      	str	r3, [r2, #4]
  if (ep->address_u.address != 0U)
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d007      	beq.n	8005b0e <XMC_USBD_EndpointConfigure+0x72>
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE;
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	6893      	ldr	r3, [r2, #8]
 8005b02:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 8005b06:	f361 0312 	bfi	r3, r1, #0, #19
 8005b0a:	6093      	str	r3, [r2, #8]
 8005b0c:	e005      	b.n	8005b1a <XMC_USBD_EndpointConfigure+0x7e>
  }
  else
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE_EP0;
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	6893      	ldr	r3, [r2, #8]
 8005b12:	2140      	movs	r1, #64	; 0x40
 8005b14:	f361 0312 	bfi	r3, r1, #0, #19
 8005b18:	6093      	str	r3, [r2, #8]
  }
  /* transfer buffer */
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	021b      	lsls	r3, r3, #8
 8005b26:	4a93      	ldr	r2, [pc, #588]	; (8005d74 <XMC_USBD_EndpointConfigure+0x2d8>)
 8005b28:	441a      	add	r2, r3
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	61da      	str	r2, [r3, #28]
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	021b      	lsls	r3, r3, #8
 8005b3a:	4a8f      	ldr	r2, [pc, #572]	; (8005d78 <XMC_USBD_EndpointConfigure+0x2dc>)
 8005b3c:	441a      	add	r2, r3
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	60da      	str	r2, [r3, #12]
  /* buffer size*/
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	4b8b      	ldr	r3, [pc, #556]	; (8005d7c <XMC_USBD_EndpointConfigure+0x2e0>)
 8005b50:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	621a      	str	r2, [r3, #32]
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	461a      	mov	r2, r3
 8005b64:	4b86      	ldr	r3, [pc, #536]	; (8005d80 <XMC_USBD_EndpointConfigure+0x2e4>)
 8005b66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	615a      	str	r2, [r3, #20]
  /* is in */
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d102      	bne.n	8005b82 <XMC_USBD_EndpointConfigure+0xe6>
 8005b7c:	79bb      	ldrb	r3, [r7, #6]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d179      	bne.n	8005c76 <XMC_USBD_EndpointConfigure+0x1da>
  {
    depctl_data_t data;
    data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	4a78      	ldr	r2, [pc, #480]	; (8005d70 <XMC_USBD_EndpointConfigure+0x2d4>)
 8005b8e:	336a      	adds	r3, #106	; 0x6a
 8005b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	60fb      	str	r3, [r7, #12]
		/*enable endpoint */
		data.b.usbactep = 1U;
 8005b98:	7b7b      	ldrb	r3, [r7, #13]
 8005b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b9e:	737b      	strb	r3, [r7, #13]
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 8005ba0:	79bb      	ldrb	r3, [r7, #6]
 8005ba2:	f003 0303 	and.w	r3, r3, #3
 8005ba6:	b2da      	uxtb	r2, r3
 8005ba8:	7bbb      	ldrb	r3, [r7, #14]
 8005baa:	f362 0383 	bfi	r3, r2, #2, #2
 8005bae:	73bb      	strb	r3, [r7, #14]
		/* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 8005bb0:	79bb      	ldrb	r3, [r7, #6]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d123      	bne.n	8005bfe <XMC_USBD_EndpointConfigure+0x162>
    {
			switch(ep_max_packet_size)
 8005bb6:	88bb      	ldrh	r3, [r7, #4]
 8005bb8:	2b10      	cmp	r3, #16
 8005bba:	d014      	beq.n	8005be6 <XMC_USBD_EndpointConfigure+0x14a>
 8005bbc:	2b10      	cmp	r3, #16
 8005bbe:	dc02      	bgt.n	8005bc6 <XMC_USBD_EndpointConfigure+0x12a>
 8005bc0:	2b08      	cmp	r3, #8
 8005bc2:	d016      	beq.n	8005bf2 <XMC_USBD_EndpointConfigure+0x156>
				break;
				case (8U):
				data.b.mps = 0x3U;
				break;
				default:
				break;
 8005bc4:	e023      	b.n	8005c0e <XMC_USBD_EndpointConfigure+0x172>
			switch(ep_max_packet_size)
 8005bc6:	2b20      	cmp	r3, #32
 8005bc8:	d007      	beq.n	8005bda <XMC_USBD_EndpointConfigure+0x13e>
 8005bca:	2b40      	cmp	r3, #64	; 0x40
 8005bcc:	d000      	beq.n	8005bd0 <XMC_USBD_EndpointConfigure+0x134>
				break;
 8005bce:	e01e      	b.n	8005c0e <XMC_USBD_EndpointConfigure+0x172>
				data.b.mps = 0x0U;
 8005bd0:	89bb      	ldrh	r3, [r7, #12]
 8005bd2:	f36f 030a 	bfc	r3, #0, #11
 8005bd6:	81bb      	strh	r3, [r7, #12]
				break;
 8005bd8:	e019      	b.n	8005c0e <XMC_USBD_EndpointConfigure+0x172>
				data.b.mps = 0x1U;
 8005bda:	89bb      	ldrh	r3, [r7, #12]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f362 030a 	bfi	r3, r2, #0, #11
 8005be2:	81bb      	strh	r3, [r7, #12]
				break;
 8005be4:	e013      	b.n	8005c0e <XMC_USBD_EndpointConfigure+0x172>
				data.b.mps = 0x2U;
 8005be6:	89bb      	ldrh	r3, [r7, #12]
 8005be8:	2202      	movs	r2, #2
 8005bea:	f362 030a 	bfi	r3, r2, #0, #11
 8005bee:	81bb      	strh	r3, [r7, #12]
				break;
 8005bf0:	e00d      	b.n	8005c0e <XMC_USBD_EndpointConfigure+0x172>
				data.b.mps = 0x3U;
 8005bf2:	89bb      	ldrh	r3, [r7, #12]
 8005bf4:	2203      	movs	r2, #3
 8005bf6:	f362 030a 	bfi	r3, r2, #0, #11
 8005bfa:	81bb      	strh	r3, [r7, #12]
				break;
 8005bfc:	e007      	b.n	8005c0e <XMC_USBD_EndpointConfigure+0x172>
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 8005bfe:	88bb      	ldrh	r3, [r7, #4]
 8005c00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	89bb      	ldrh	r3, [r7, #12]
 8005c08:	f362 030a 	bfi	r3, r2, #0, #11
 8005c0c:	81bb      	strh	r3, [r7, #12]
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 8005c0e:	7bfb      	ldrb	r3, [r7, #15]
 8005c10:	f043 0310 	orr.w	r3, r3, #16
 8005c14:	73fb      	strb	r3, [r7, #15]
		/* clear stall */
		data.b.stall = 0U;
 8005c16:	7bbb      	ldrb	r3, [r7, #14]
 8005c18:	f36f 1345 	bfc	r3, #5, #1
 8005c1c:	73bb      	strb	r3, [r7, #14]
		/* set tx fifo */
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 8005c1e:	f7fe fd07 	bl	8004630 <XMC_USBD_lAssignTXFifo>
 8005c22:	4603      	mov	r3, r0
 8005c24:	f003 030f 	and.w	r3, r3, #15
 8005c28:	b2d9      	uxtb	r1, r3
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	8893      	ldrh	r3, [r2, #4]
 8005c2e:	f361 1389 	bfi	r3, r1, #6, #4
 8005c32:	8093      	strh	r3, [r2, #4]
		data.b.txfnum = ep->txFifoNum;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	889b      	ldrh	r3, [r3, #4]
 8005c38:	f3c3 1383 	ubfx	r3, r3, #6, #4
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	89fb      	ldrh	r3, [r7, #14]
 8005c40:	f362 1389 	bfi	r3, r2, #6, #4
 8005c44:	81fb      	strh	r3, [r7, #14]
		xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32; /* configure endpoint */
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	4a47      	ldr	r2, [pc, #284]	; (8005d70 <XMC_USBD_EndpointConfigure+0x2d4>)
 8005c52:	336a      	adds	r3, #106	; 0x6a
 8005c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	601a      	str	r2, [r3, #0]
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 8005c5c:	8a3a      	ldrh	r2, [r7, #16]
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	4619      	mov	r1, r3
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	408b      	lsls	r3, r1
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	4313      	orrs	r3, r2
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	823b      	strh	r3, [r7, #16]
  }
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d002      	beq.n	8005c8a <XMC_USBD_EndpointConfigure+0x1ee>
 8005c84:	79bb      	ldrb	r3, [r7, #6]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d167      	bne.n	8005d5a <XMC_USBD_EndpointConfigure+0x2be>
  {
    /* is out */
		depctl_data_t data;
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	4a36      	ldr	r2, [pc, #216]	; (8005d70 <XMC_USBD_EndpointConfigure+0x2d4>)
 8005c96:	3370      	adds	r3, #112	; 0x70
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	60bb      	str	r3, [r7, #8]
		/*enable endpoint */
		data.b.usbactep = 1U;
 8005ca2:	7a7b      	ldrb	r3, [r7, #9]
 8005ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca8:	727b      	strb	r3, [r7, #9]
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 8005caa:	79bb      	ldrb	r3, [r7, #6]
 8005cac:	f003 0303 	and.w	r3, r3, #3
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	7abb      	ldrb	r3, [r7, #10]
 8005cb4:	f362 0383 	bfi	r3, r2, #2, #2
 8005cb8:	72bb      	strb	r3, [r7, #10]
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 8005cba:	79bb      	ldrb	r3, [r7, #6]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d123      	bne.n	8005d08 <XMC_USBD_EndpointConfigure+0x26c>
		{
			switch(ep_max_packet_size)
 8005cc0:	88bb      	ldrh	r3, [r7, #4]
 8005cc2:	2b10      	cmp	r3, #16
 8005cc4:	d014      	beq.n	8005cf0 <XMC_USBD_EndpointConfigure+0x254>
 8005cc6:	2b10      	cmp	r3, #16
 8005cc8:	dc02      	bgt.n	8005cd0 <XMC_USBD_EndpointConfigure+0x234>
 8005cca:	2b08      	cmp	r3, #8
 8005ccc:	d016      	beq.n	8005cfc <XMC_USBD_EndpointConfigure+0x260>
					break;
				case (8U):
					data.b.mps = 0x3U;
					break;
				default:
					break;
 8005cce:	e023      	b.n	8005d18 <XMC_USBD_EndpointConfigure+0x27c>
			switch(ep_max_packet_size)
 8005cd0:	2b20      	cmp	r3, #32
 8005cd2:	d007      	beq.n	8005ce4 <XMC_USBD_EndpointConfigure+0x248>
 8005cd4:	2b40      	cmp	r3, #64	; 0x40
 8005cd6:	d000      	beq.n	8005cda <XMC_USBD_EndpointConfigure+0x23e>
					break;
 8005cd8:	e01e      	b.n	8005d18 <XMC_USBD_EndpointConfigure+0x27c>
					data.b.mps = 0x0U;
 8005cda:	893b      	ldrh	r3, [r7, #8]
 8005cdc:	f36f 030a 	bfc	r3, #0, #11
 8005ce0:	813b      	strh	r3, [r7, #8]
					break;
 8005ce2:	e019      	b.n	8005d18 <XMC_USBD_EndpointConfigure+0x27c>
					data.b.mps = 0x1U;
 8005ce4:	893b      	ldrh	r3, [r7, #8]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f362 030a 	bfi	r3, r2, #0, #11
 8005cec:	813b      	strh	r3, [r7, #8]
					break;
 8005cee:	e013      	b.n	8005d18 <XMC_USBD_EndpointConfigure+0x27c>
					data.b.mps = 0x2U;
 8005cf0:	893b      	ldrh	r3, [r7, #8]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	f362 030a 	bfi	r3, r2, #0, #11
 8005cf8:	813b      	strh	r3, [r7, #8]
					break;
 8005cfa:	e00d      	b.n	8005d18 <XMC_USBD_EndpointConfigure+0x27c>
					data.b.mps = 0x3U;
 8005cfc:	893b      	ldrh	r3, [r7, #8]
 8005cfe:	2203      	movs	r2, #3
 8005d00:	f362 030a 	bfi	r3, r2, #0, #11
 8005d04:	813b      	strh	r3, [r7, #8]
					break;
 8005d06:	e007      	b.n	8005d18 <XMC_USBD_EndpointConfigure+0x27c>
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 8005d08:	88bb      	ldrh	r3, [r7, #4]
 8005d0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	893b      	ldrh	r3, [r7, #8]
 8005d12:	f362 030a 	bfi	r3, r2, #0, #11
 8005d16:	813b      	strh	r3, [r7, #8]
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 8005d18:	7afb      	ldrb	r3, [r7, #11]
 8005d1a:	f043 0310 	orr.w	r3, r3, #16
 8005d1e:	72fb      	strb	r3, [r7, #11]
		/* clear stall */
		data.b.stall =(uint8_t) 0U;
 8005d20:	7abb      	ldrb	r3, [r7, #10]
 8005d22:	f36f 1345 	bfc	r3, #5, #1
 8005d26:	72bb      	strb	r3, [r7, #10]
		xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32; /* configure endpoint */
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	4a0f      	ldr	r2, [pc, #60]	; (8005d70 <XMC_USBD_EndpointConfigure+0x2d4>)
 8005d34:	3370      	adds	r3, #112	; 0x70
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	601a      	str	r2, [r3, #0]
		daintmsk.ep.out |=(uint16_t) ((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts */
 8005d40:	8a7a      	ldrh	r2, [r7, #18]
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	2301      	movs	r3, #1
 8005d50:	408b      	lsls	r3, r1
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	4313      	orrs	r3, r2
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	827b      	strh	r3, [r7, #18]
  }
  xmc_device.device_register->daintmsk = daintmsk.d32;
 8005d5a:	4b05      	ldr	r3, [pc, #20]	; (8005d70 <XMC_USBD_EndpointConfigure+0x2d4>)
 8005d5c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	61da      	str	r2, [r3, #28]
  return XMC_USBD_STATUS_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	20000d50 	.word	0x20000d50
 8005d74:	30000700 	.word	0x30000700
 8005d78:	30000000 	.word	0x30000000
 8005d7c:	20000520 	.word	0x20000520
 8005d80:	20000504 	.word	0x20000504

08005d84 <XMC_USBD_EndpointUnconfigure>:

/**
 * Unconfigure the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointUnconfigure(const uint8_t ep_addr) 
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b088      	sub	sp, #32
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8005d8e:	79fb      	ldrb	r3, [r7, #7]
 8005d90:	f003 030f 	and.w	r3, r3, #15
 8005d94:	2234      	movs	r2, #52	; 0x34
 8005d96:	fb02 f303 	mul.w	r3, r2, r3
 8005d9a:	4a54      	ldr	r2, [pc, #336]	; (8005eec <XMC_USBD_EndpointUnconfigure+0x168>)
 8005d9c:	4413      	add	r3, r2
 8005d9e:	61bb      	str	r3, [r7, #24]
  depctl_data_t data;
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
 8005da0:	2300      	movs	r3, #0
 8005da2:	613b      	str	r3, [r7, #16]
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8005da4:	4b51      	ldr	r3, [pc, #324]	; (8005eec <XMC_USBD_EndpointUnconfigure+0x168>)
 8005da6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	60fb      	str	r3, [r7, #12]
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	461a      	mov	r2, r3
 8005dba:	2301      	movs	r3, #1
 8005dbc:	4093      	lsls	r3, r2
 8005dbe:	617b      	str	r3, [r7, #20]
  /* if not configured return an error */
  if (!ep->isConfigured)
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	791b      	ldrb	r3, [r3, #4]
 8005dc4:	f003 0304 	and.w	r3, r3, #4
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d102      	bne.n	8005dd4 <XMC_USBD_EndpointUnconfigure+0x50>
  {
     result = XMC_USBD_STATUS_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	77fb      	strb	r3, [r7, #31]
 8005dd2:	e085      	b.n	8005ee0 <XMC_USBD_EndpointUnconfigure+0x15c>
  }
  else
  {
    /* disable the endpoint, deactivate it and only send naks */
    data.b.usbactep = 0U;
 8005dd4:	7c7b      	ldrb	r3, [r7, #17]
 8005dd6:	f36f 13c7 	bfc	r3, #7, #1
 8005dda:	747b      	strb	r3, [r7, #17]
    data.b.epdis =  1U;
 8005ddc:	7cfb      	ldrb	r3, [r7, #19]
 8005dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005de2:	74fb      	strb	r3, [r7, #19]
    data.b.snak =  1U;
 8005de4:	7cfb      	ldrb	r3, [r7, #19]
 8005de6:	f043 0308 	orr.w	r3, r3, #8
 8005dea:	74fb      	strb	r3, [r7, #19]
    data.b.stall =  0U;
 8005dec:	7cbb      	ldrb	r3, [r7, #18]
 8005dee:	f36f 1345 	bfc	r3, #5, #1
 8005df2:	74bb      	strb	r3, [r7, #18]
    ep->isConfigured =  0U;
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	7913      	ldrb	r3, [r2, #4]
 8005df8:	f36f 0382 	bfc	r3, #2, #1
 8005dfc:	7113      	strb	r3, [r2, #4]
    ep->isStalled =  0U;
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	7913      	ldrb	r3, [r2, #4]
 8005e02:	f36f 1345 	bfc	r3, #5, #1
 8005e06:	7113      	strb	r3, [r2, #4]
    ep->outInUse =  0U;
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	6853      	ldr	r3, [r2, #4]
 8005e0c:	f36f 1304 	bfc	r3, #4, #1
 8005e10:	6053      	str	r3, [r2, #4]
    ep->inInUse =  0U;
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	6853      	ldr	r3, [r2, #4]
 8005e16:	f36f 03c3 	bfc	r3, #3, #1
 8005e1a:	6053      	str	r3, [r2, #4]
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d106      	bne.n	8005e38 <XMC_USBD_EndpointUnconfigure+0xb4>
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	791b      	ldrb	r3, [r3, #4]
 8005e2e:	f003 0303 	and.w	r3, r3, #3
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d112      	bne.n	8005e5e <XMC_USBD_EndpointUnconfigure+0xda>
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	4a2a      	ldr	r2, [pc, #168]	; (8005eec <XMC_USBD_EndpointUnconfigure+0x168>)
 8005e44:	336a      	adds	r3, #106	; 0x6a
 8005e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	601a      	str	r2, [r3, #0]
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 8005e4e:	89ba      	ldrh	r2, [r7, #12]
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	43db      	mvns	r3, r3
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	4013      	ands	r3, r2
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	81bb      	strh	r3, [r7, #12]
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d006      	beq.n	8005e7a <XMC_USBD_EndpointUnconfigure+0xf6>
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	791b      	ldrb	r3, [r3, #4]
 8005e70:	f003 0303 	and.w	r3, r3, #3
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d123      	bne.n	8005ec2 <XMC_USBD_EndpointUnconfigure+0x13e>
    {
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	4a19      	ldr	r2, [pc, #100]	; (8005eec <XMC_USBD_EndpointUnconfigure+0x168>)
 8005e86:	3370      	adds	r3, #112	; 0x70
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	601a      	str	r2, [r3, #0]
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
 8005e92:	89fa      	ldrh	r2, [r7, #14]
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	43db      	mvns	r3, r3
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	81fb      	strh	r3, [r7, #14]
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8005ea2:	4b13      	ldr	r3, [pc, #76]	; (8005ef0 <XMC_USBD_EndpointUnconfigure+0x16c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	7b5b      	ldrb	r3, [r3, #13]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d10a      	bne.n	8005ec2 <XMC_USBD_EndpointUnconfigure+0x13e>
      {
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
 8005eac:	4b0f      	ldr	r3, [pc, #60]	; (8005eec <XMC_USBD_EndpointUnconfigure+0x168>)
 8005eae:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005eb2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	43da      	mvns	r2, r3
 8005eb8:	4b0c      	ldr	r3, [pc, #48]	; (8005eec <XMC_USBD_EndpointUnconfigure+0x168>)
 8005eba:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005ebe:	400a      	ands	r2, r1
 8005ec0:	635a      	str	r2, [r3, #52]	; 0x34
      }
    }
    xmc_device.device_register->daintmsk = daintmsk.d32;
 8005ec2:	4b0a      	ldr	r3, [pc, #40]	; (8005eec <XMC_USBD_EndpointUnconfigure+0x168>)
 8005ec4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	61da      	str	r2, [r3, #28]
    XMC_USBD_lUnassignFifo(ep->txFifoNum); /* free fifo */
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	889b      	ldrh	r3, [r3, #4]
 8005ed0:	f3c3 1383 	ubfx	r3, r3, #6, #4
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7fe fbe2 	bl	80046a0 <XMC_USBD_lUnassignFifo>
    result = XMC_USBD_STATUS_OK;
 8005edc:	2300      	movs	r3, #0
 8005ede:	77fb      	strb	r3, [r7, #31]
  }
  return result;
 8005ee0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3720      	adds	r7, #32
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	20000d50 	.word	0x20000d50
 8005ef0:	20000d4c 	.word	0x20000d4c

08005ef4 <XMC_USBD_GetFrameNumber>:

/**
 * Gets the current USB frame number
 **/
uint16_t XMC_USBD_GetFrameNumber(void) 
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
  uint16_t result;
  dsts_data_t dsts;
  dsts.d32 = xmc_device.device_register->dsts;
 8005efa:	4b08      	ldr	r3, [pc, #32]	; (8005f1c <XMC_USBD_GetFrameNumber+0x28>)
 8005efc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	603b      	str	r3, [r7, #0]
  result = (uint16_t)dsts.b.soffn;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	80fb      	strh	r3, [r7, #6]
  return result;
 8005f0e:	88fb      	ldrh	r3, [r7, #6]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	20000d50 	.word	0x20000d50

08005f20 <XMC_USBD_IsEnumDone>:
 * Gets the USB speed enumeration completion status.
 * This should not be used for the actual USB enumeration completion status. For the actual USB enumeration status,
 * the application layer should check for the completion of USB standard request Set configuration.
 **/
uint32_t XMC_USBD_IsEnumDone(void)
{
 8005f20:	b480      	push	{r7}
 8005f22:	af00      	add	r7, sp, #0
  return (uint32_t)((uint8_t)xmc_device.IsConnected && (uint8_t)xmc_device.IsPowered);
 8005f24:	4b0b      	ldr	r3, [pc, #44]	; (8005f54 <XMC_USBD_IsEnumDone+0x34>)
 8005f26:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d009      	beq.n	8005f48 <XMC_USBD_IsEnumDone+0x28>
 8005f34:	4b07      	ldr	r3, [pc, #28]	; (8005f54 <XMC_USBD_IsEnumDone+0x34>)
 8005f36:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005f3a:	f003 0304 	and.w	r3, r3, #4
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <XMC_USBD_IsEnumDone+0x28>
 8005f44:	2301      	movs	r3, #1
 8005f46:	e000      	b.n	8005f4a <XMC_USBD_IsEnumDone+0x2a>
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	20000d50 	.word	0x20000d50

08005f58 <USB_GetNextDescriptor>:
			 */
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	81fb      	strh	r3, [r7, #14]

				if (*BytesRem < CurrDescriptorSize)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	881b      	ldrh	r3, [r3, #0]
 8005f6e:	89fa      	ldrh	r2, [r7, #14]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d902      	bls.n	8005f7a <USB_GetNextDescriptor+0x22>
				  CurrDescriptorSize = *BytesRem;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	81fb      	strh	r3, [r7, #14]

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	89fb      	ldrh	r3, [r7, #14]
 8005f82:	4413      	add	r3, r2
 8005f84:	461a      	mov	r2, r3
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	601a      	str	r2, [r3, #0]
				*BytesRem      -= CurrDescriptorSize;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	881a      	ldrh	r2, [r3, #0]
 8005f8e:	89fb      	ldrh	r3, [r7, #14]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	801a      	strh	r2, [r3, #0]
			}
 8005f98:	bf00      	nop
 8005f9a:	3714      	adds	r7, #20
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <USB_GetNextDescriptorOfType>:
#endif

void USB_GetNextDescriptorOfType(uint16_t* const BytesRem,
                                 void** const CurrConfigLoc,
                                 const uint8_t Type)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	71fb      	strb	r3, [r7, #7]
    while (*BytesRem)
 8005fb2:	e009      	b.n	8005fc8 <USB_GetNextDescriptorOfType+0x24>
    {
        USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
 8005fb4:	68b9      	ldr	r1, [r7, #8]
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f7ff ffce 	bl	8005f58 <USB_GetNextDescriptor>

        if (DESCRIPTOR_TYPE(*CurrConfigLoc) == Type)
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	785b      	ldrb	r3, [r3, #1]
 8005fc2:	79fa      	ldrb	r2, [r7, #7]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d004      	beq.n	8005fd2 <USB_GetNextDescriptorOfType+0x2e>
    while (*BytesRem)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1f1      	bne.n	8005fb4 <USB_GetNextDescriptorOfType+0x10>
 8005fd0:	e000      	b.n	8005fd4 <USB_GetNextDescriptorOfType+0x30>
          return;
 8005fd2:	bf00      	nop
    }
}
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <USB_GetNextDescriptorOfTypeBefore>:

void USB_GetNextDescriptorOfTypeBefore(uint16_t* const BytesRem,
                                       void** const CurrConfigLoc,
                                       const uint8_t Type,
                                       const uint8_t BeforeType)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b084      	sub	sp, #16
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	60f8      	str	r0, [r7, #12]
 8005fe2:	60b9      	str	r1, [r7, #8]
 8005fe4:	4611      	mov	r1, r2
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	460b      	mov	r3, r1
 8005fea:	71fb      	strb	r3, [r7, #7]
 8005fec:	4613      	mov	r3, r2
 8005fee:	71bb      	strb	r3, [r7, #6]
    while (*BytesRem)
 8005ff0:	e013      	b.n	800601a <USB_GetNextDescriptorOfTypeBefore+0x40>
    {
        USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
 8005ff2:	68b9      	ldr	r1, [r7, #8]
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f7ff ffaf 	bl	8005f58 <USB_GetNextDescriptor>

        if (DESCRIPTOR_TYPE(*CurrConfigLoc) == Type)
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	785b      	ldrb	r3, [r3, #1]
 8006000:	79fa      	ldrb	r2, [r7, #7]
 8006002:	429a      	cmp	r2, r3
 8006004:	d00e      	beq.n	8006024 <USB_GetNextDescriptorOfTypeBefore+0x4a>
        {
            return;
        }
        else if (DESCRIPTOR_TYPE(*CurrConfigLoc) == BeforeType)
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	785b      	ldrb	r3, [r3, #1]
 800600c:	79ba      	ldrb	r2, [r7, #6]
 800600e:	429a      	cmp	r2, r3
 8006010:	d103      	bne.n	800601a <USB_GetNextDescriptorOfTypeBefore+0x40>
        {
            *BytesRem = 0;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	801a      	strh	r2, [r3, #0]
            return;
 8006018:	e005      	b.n	8006026 <USB_GetNextDescriptorOfTypeBefore+0x4c>
    while (*BytesRem)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1e7      	bne.n	8005ff2 <USB_GetNextDescriptorOfTypeBefore+0x18>
 8006022:	e000      	b.n	8006026 <USB_GetNextDescriptorOfTypeBefore+0x4c>
            return;
 8006024:	bf00      	nop
        }
    }
}
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <USB_GetNextDescriptorOfTypeAfter>:

void USB_GetNextDescriptorOfTypeAfter(uint16_t* const BytesRem,
                                      void** const CurrConfigLoc,
                                      const uint8_t Type,
                                      const uint8_t AfterType)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	4611      	mov	r1, r2
 8006038:	461a      	mov	r2, r3
 800603a:	460b      	mov	r3, r1
 800603c:	71fb      	strb	r3, [r7, #7]
 800603e:	4613      	mov	r3, r2
 8006040:	71bb      	strb	r3, [r7, #6]
    USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);
 8006042:	79bb      	ldrb	r3, [r7, #6]
 8006044:	461a      	mov	r2, r3
 8006046:	68b9      	ldr	r1, [r7, #8]
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f7ff ffab 	bl	8005fa4 <USB_GetNextDescriptorOfType>

    if (*BytesRem)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d005      	beq.n	8006062 <USB_GetNextDescriptorOfTypeAfter+0x36>
      USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
 8006056:	79fb      	ldrb	r3, [r7, #7]
 8006058:	461a      	mov	r2, r3
 800605a:	68b9      	ldr	r1, [r7, #8]
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f7ff ffa1 	bl	8005fa4 <USB_GetNextDescriptorOfType>
}
 8006062:	bf00      	nop
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b086      	sub	sp, #24
 800606e:	af00      	add	r7, sp, #0
 8006070:	60f8      	str	r0, [r7, #12]
 8006072:	60b9      	str	r1, [r7, #8]
 8006074:	607a      	str	r2, [r7, #4]
    uint8_t ErrorCode;

    while (*BytesRem)
 8006076:	e01e      	b.n	80060b6 <USB_GetNextDescriptorComp+0x4c>
    {
        uint8_t* PrevDescLoc  = *CurrConfigLoc;
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	617b      	str	r3, [r7, #20]
        uint16_t PrevBytesRem = *BytesRem;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	827b      	strh	r3, [r7, #18]

        USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
 8006084:	68b9      	ldr	r1, [r7, #8]
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f7ff ff66 	bl	8005f58 <USB_GetNextDescriptor>

        if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4610      	mov	r0, r2
 8006094:	4798      	blx	r3
 8006096:	4603      	mov	r3, r0
 8006098:	747b      	strb	r3, [r7, #17]
 800609a:	7c7b      	ldrb	r3, [r7, #17]
 800609c:	2b02      	cmp	r3, #2
 800609e:	d00a      	beq.n	80060b6 <USB_GetNextDescriptorComp+0x4c>
        {
            if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
 80060a0:	7c7b      	ldrb	r3, [r7, #17]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d105      	bne.n	80060b2 <USB_GetNextDescriptorComp+0x48>
            {
                *CurrConfigLoc = PrevDescLoc;
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	601a      	str	r2, [r3, #0]
                *BytesRem      = PrevBytesRem;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	8a7a      	ldrh	r2, [r7, #18]
 80060b0:	801a      	strh	r2, [r3, #0]
            }

            return ErrorCode;
 80060b2:	7c7b      	ldrb	r3, [r7, #17]
 80060b4:	e004      	b.n	80060c0 <USB_GetNextDescriptorComp+0x56>
    while (*BytesRem)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1dc      	bne.n	8006078 <USB_GetNextDescriptorComp+0xe>
        }
    }

    return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
 80060be:	2302      	movs	r3, #2
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3718      	adds	r7, #24
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	af00      	add	r7, sp, #0
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
 80060cc:	f000 f802 	bl	80060d4 <USB_DeviceTask>
	#endif
}
 80060d0:	bf00      	nop
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <USB_DeviceTask>:

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 80060da:	4b1d      	ldr	r3, [pc, #116]	; (8006150 <USB_DeviceTask+0x7c>)
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d030      	beq.n	8006146 <USB_DeviceTask+0x72>
		return device.CurrentDirection | device.CurrentEndpoint;
 80060e4:	4b1b      	ldr	r3, [pc, #108]	; (8006154 <USB_DeviceTask+0x80>)
 80060e6:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
 80060ea:	4b1a      	ldr	r3, [pc, #104]	; (8006154 <USB_DeviceTask+0x80>)
 80060ec:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80060f0:	4313      	orrs	r3, r2
 80060f2:	b2db      	uxtb	r3, r3
	  return;

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
 80060f4:	71fb      	strb	r3, [r7, #7]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80060f6:	2200      	movs	r2, #0
 80060f8:	4b16      	ldr	r3, [pc, #88]	; (8006154 <USB_DeviceTask+0x80>)
 80060fa:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 80060fe:	2200      	movs	r2, #0
 8006100:	4b14      	ldr	r3, [pc, #80]	; (8006154 <USB_DeviceTask+0x80>)
 8006102:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
		return device.IsSetupRecieved;
 8006106:	4b13      	ldr	r3, [pc, #76]	; (8006154 <USB_DeviceTask+0x80>)
 8006108:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 800610c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	bf14      	ite	ne
 8006116:	2301      	movne	r3, #1
 8006118:	2300      	moveq	r3, #0
 800611a:	b2db      	uxtb	r3, r3

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <USB_DeviceTask+0x50>
	  USB_Device_ProcessControlRequest();
 8006120:	f7fd fbcc 	bl	80038bc <USB_Device_ProcessControlRequest>
 8006124:	79fb      	ldrb	r3, [r7, #7]
 8006126:	71bb      	strb	r3, [r7, #6]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8006128:	79bb      	ldrb	r3, [r7, #6]
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	b2da      	uxtb	r2, r3
 8006130:	4b08      	ldr	r3, [pc, #32]	; (8006154 <USB_DeviceTask+0x80>)
 8006132:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8006136:	79bb      	ldrb	r3, [r7, #6]
 8006138:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800613c:	b2da      	uxtb	r2, r3
 800613e:	4b05      	ldr	r3, [pc, #20]	; (8006154 <USB_DeviceTask+0x80>)
 8006140:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
 8006144:	e000      	b.n	8006148 <USB_DeviceTask+0x74>
	  return;
 8006146:	bf00      	nop

	Endpoint_SelectEndpoint(PrevEndpoint);
}
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	20000f59 	.word	0x20000f59
 8006154:	20000c0c 	.word	0x20000c0c

08006158 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 8006158:	b480      	push	{r7}
 800615a:	af00      	add	r7, sp, #0

}
 800615c:	bf00      	nop
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 8006166:	b480      	push	{r7}
 8006168:	b085      	sub	sp, #20
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 800616e:	2300      	movs	r3, #0
 8006170:	60fb      	str	r3, [r7, #12]
 8006172:	e003      	b.n	800617c <delay+0x16>
  {
    __NOP();
 8006174:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	3301      	adds	r3, #1
 800617a:	60fb      	str	r3, [r7, #12]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	429a      	cmp	r2, r3
 8006182:	d8f7      	bhi.n	8006174 <delay+0xe>
  }
}
 8006184:	bf00      	nop
 8006186:	3714      	adds	r7, #20
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8006190:	b598      	push	{r3, r4, r7, lr}
 8006192:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8006194:	4a06      	ldr	r2, [pc, #24]	; (80061b0 <SystemInit+0x20>)
 8006196:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800619a:	4614      	mov	r4, r2
 800619c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800619e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80061a2:	f000 f807 	bl	80061b4 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80061a6:	f7fa fabd 	bl	8000724 <SystemCoreClockSetup>
}
 80061aa:	bf00      	nop
 80061ac:	bd98      	pop	{r3, r4, r7, pc}
 80061ae:	bf00      	nop
 80061b0:	2000ffc4 	.word	0x2000ffc4

080061b4 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80061ba:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 80061bc:	4b16      	ldr	r3, [pc, #88]	; (8006218 <SystemCoreSetup+0x64>)
 80061be:	4a17      	ldr	r2, [pc, #92]	; (800621c <SystemCoreSetup+0x68>)
 80061c0:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80061c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 80061c6:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80061c8:	4b13      	ldr	r3, [pc, #76]	; (8006218 <SystemCoreSetup+0x64>)
 80061ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ce:	4a12      	ldr	r2, [pc, #72]	; (8006218 <SystemCoreSetup+0x64>)
 80061d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 80061d8:	4b0f      	ldr	r3, [pc, #60]	; (8006218 <SystemCoreSetup+0x64>)
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	4a0e      	ldr	r2, [pc, #56]	; (8006218 <SystemCoreSetup+0x64>)
 80061de:	f023 0308 	bic.w	r3, r3, #8
 80061e2:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 80061e4:	4b0e      	ldr	r3, [pc, #56]	; (8006220 <SystemCoreSetup+0x6c>)
 80061e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061ea:	3314      	adds	r3, #20
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f023 030f 	bic.w	r3, r3, #15
 80061f6:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f043 0303 	orr.w	r3, r3, #3
 80061fe:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8006200:	4b07      	ldr	r3, [pc, #28]	; (8006220 <SystemCoreSetup+0x6c>)
 8006202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006206:	3314      	adds	r3, #20
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	601a      	str	r2, [r3, #0]
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	e000ed00 	.word	0xe000ed00
 800621c:	08000000 	.word	0x08000000
 8006220:	58001000 	.word	0x58001000

__WEAK void SystemCoreClockSetup(void)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8006228:	4b75      	ldr	r3, [pc, #468]	; (8006400 <SystemCoreSetup+0x24c>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10c      	bne.n	800624e <SystemCoreSetup+0x9a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8006234:	4b72      	ldr	r3, [pc, #456]	; (8006400 <SystemCoreSetup+0x24c>)
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	4a71      	ldr	r2, [pc, #452]	; (8006400 <SystemCoreSetup+0x24c>)
 800623a:	f043 0301 	orr.w	r3, r3, #1
 800623e:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8006240:	bf00      	nop
 8006242:	4b6f      	ldr	r3, [pc, #444]	; (8006400 <SystemCoreSetup+0x24c>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0f9      	beq.n	8006242 <SystemCoreSetup+0x8e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 800624e:	4b6d      	ldr	r3, [pc, #436]	; (8006404 <SystemCoreSetup+0x250>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006256:	2b00      	cmp	r3, #0
 8006258:	d009      	beq.n	800626e <SystemCoreSetup+0xba>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 800625a:	4b6a      	ldr	r3, [pc, #424]	; (8006404 <SystemCoreSetup+0x250>)
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	4a69      	ldr	r2, [pc, #420]	; (8006404 <SystemCoreSetup+0x250>)
 8006260:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006264:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8006266:	f641 504c 	movw	r0, #7500	; 0x1d4c
 800626a:	f7ff ff7c 	bl	8006166 <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 800626e:	4b66      	ldr	r3, [pc, #408]	; (8006408 <SystemCoreSetup+0x254>)
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	4a65      	ldr	r2, [pc, #404]	; (8006408 <SystemCoreSetup+0x254>)
 8006274:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006278:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 800627a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800627e:	f7ff ff72 	bl	8006166 <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8006282:	4b61      	ldr	r3, [pc, #388]	; (8006408 <SystemCoreSetup+0x254>)
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	4a60      	ldr	r2, [pc, #384]	; (8006408 <SystemCoreSetup+0x254>)
 8006288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800628c:	f023 0302 	bic.w	r3, r3, #2
 8006290:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 8006292:	4b5e      	ldr	r3, [pc, #376]	; (800640c <SystemCoreSetup+0x258>)
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800629a:	2b00      	cmp	r3, #0
 800629c:	d029      	beq.n	80062f2 <SystemCoreSetup+0x13e>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 800629e:	4b5b      	ldr	r3, [pc, #364]	; (800640c <SystemCoreSetup+0x258>)
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	4a5a      	ldr	r2, [pc, #360]	; (800640c <SystemCoreSetup+0x258>)
 80062a4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80062a8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80062ac:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 80062ae:	f000 f927 	bl	8006500 <OSCHP_GetFrequency>
 80062b2:	4602      	mov	r2, r0
 80062b4:	4b56      	ldr	r3, [pc, #344]	; (8006410 <SystemCoreSetup+0x25c>)
 80062b6:	fba3 2302 	umull	r2, r3, r3, r2
 80062ba:	0d1b      	lsrs	r3, r3, #20
 80062bc:	3b01      	subs	r3, #1
 80062be:	041a      	lsls	r2, r3, #16
 80062c0:	4b52      	ldr	r3, [pc, #328]	; (800640c <SystemCoreSetup+0x258>)
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	4951      	ldr	r1, [pc, #324]	; (800640c <SystemCoreSetup+0x258>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 80062ca:	4b4f      	ldr	r3, [pc, #316]	; (8006408 <SystemCoreSetup+0x254>)
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	4a4e      	ldr	r2, [pc, #312]	; (8006408 <SystemCoreSetup+0x254>)
 80062d0:	f023 0301 	bic.w	r3, r3, #1
 80062d4:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 80062d6:	4b4c      	ldr	r3, [pc, #304]	; (8006408 <SystemCoreSetup+0x254>)
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	4a4b      	ldr	r2, [pc, #300]	; (8006408 <SystemCoreSetup+0x254>)
 80062dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80062e0:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 80062e2:	bf00      	nop
 80062e4:	4b48      	ldr	r3, [pc, #288]	; (8006408 <SystemCoreSetup+0x254>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 7360 	and.w	r3, r3, #896	; 0x380
 80062ec:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80062f0:	d1f8      	bne.n	80062e4 <SystemCoreSetup+0x130>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 80062f2:	4b45      	ldr	r3, [pc, #276]	; (8006408 <SystemCoreSetup+0x254>)
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	4a44      	ldr	r2, [pc, #272]	; (8006408 <SystemCoreSetup+0x254>)
 80062f8:	f043 0301 	orr.w	r3, r3, #1
 80062fc:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 80062fe:	4b42      	ldr	r3, [pc, #264]	; (8006408 <SystemCoreSetup+0x254>)
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	4a41      	ldr	r2, [pc, #260]	; (8006408 <SystemCoreSetup+0x254>)
 8006304:	f043 0310 	orr.w	r3, r3, #16
 8006308:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800630a:	4b3f      	ldr	r3, [pc, #252]	; (8006408 <SystemCoreSetup+0x254>)
 800630c:	4a41      	ldr	r2, [pc, #260]	; (8006414 <SystemCoreSetup+0x260>)
 800630e:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8006310:	4b3d      	ldr	r3, [pc, #244]	; (8006408 <SystemCoreSetup+0x254>)
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	4a3c      	ldr	r2, [pc, #240]	; (8006408 <SystemCoreSetup+0x254>)
 8006316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800631a:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 800631c:	4b3a      	ldr	r3, [pc, #232]	; (8006408 <SystemCoreSetup+0x254>)
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	4a39      	ldr	r2, [pc, #228]	; (8006408 <SystemCoreSetup+0x254>)
 8006322:	f023 0310 	bic.w	r3, r3, #16
 8006326:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8006328:	4b37      	ldr	r3, [pc, #220]	; (8006408 <SystemCoreSetup+0x254>)
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	4a36      	ldr	r2, [pc, #216]	; (8006408 <SystemCoreSetup+0x254>)
 800632e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006332:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8006334:	bf00      	nop
 8006336:	4b34      	ldr	r3, [pc, #208]	; (8006408 <SystemCoreSetup+0x254>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0304 	and.w	r3, r3, #4
 800633e:	2b00      	cmp	r3, #0
 8006340:	d0f9      	beq.n	8006336 <SystemCoreSetup+0x182>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8006342:	4b31      	ldr	r3, [pc, #196]	; (8006408 <SystemCoreSetup+0x254>)
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	4a30      	ldr	r2, [pc, #192]	; (8006408 <SystemCoreSetup+0x254>)
 8006348:	f023 0301 	bic.w	r3, r3, #1
 800634c:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 800634e:	bf00      	nop
 8006350:	4b2d      	ldr	r3, [pc, #180]	; (8006408 <SystemCoreSetup+0x254>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1f9      	bne.n	8006350 <SystemCoreSetup+0x19c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 800635c:	4b2e      	ldr	r3, [pc, #184]	; (8006418 <SystemCoreSetup+0x264>)
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	4a2d      	ldr	r2, [pc, #180]	; (8006418 <SystemCoreSetup+0x264>)
 8006362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006366:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 8006368:	4b2b      	ldr	r3, [pc, #172]	; (8006418 <SystemCoreSetup+0x264>)
 800636a:	2200      	movs	r2, #0
 800636c:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 800636e:	4b2a      	ldr	r3, [pc, #168]	; (8006418 <SystemCoreSetup+0x264>)
 8006370:	2200      	movs	r2, #0
 8006372:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 8006374:	4b28      	ldr	r3, [pc, #160]	; (8006418 <SystemCoreSetup+0x264>)
 8006376:	2200      	movs	r2, #0
 8006378:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 800637a:	4b27      	ldr	r3, [pc, #156]	; (8006418 <SystemCoreSetup+0x264>)
 800637c:	2200      	movs	r2, #0
 800637e:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 8006380:	4b25      	ldr	r3, [pc, #148]	; (8006418 <SystemCoreSetup+0x264>)
 8006382:	2200      	movs	r2, #0
 8006384:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 8006386:	4b24      	ldr	r3, [pc, #144]	; (8006418 <SystemCoreSetup+0x264>)
 8006388:	2203      	movs	r2, #3
 800638a:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 800638c:	4b1e      	ldr	r3, [pc, #120]	; (8006408 <SystemCoreSetup+0x254>)
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	4a1d      	ldr	r2, [pc, #116]	; (8006408 <SystemCoreSetup+0x254>)
 8006392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006396:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8006398:	4b1b      	ldr	r3, [pc, #108]	; (8006408 <SystemCoreSetup+0x254>)
 800639a:	4a20      	ldr	r2, [pc, #128]	; (800641c <SystemCoreSetup+0x268>)
 800639c:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 800639e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80063a2:	f7ff fee0 	bl	8006166 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80063a6:	bf00      	nop
 80063a8:	4b17      	ldr	r3, [pc, #92]	; (8006408 <SystemCoreSetup+0x254>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0304 	and.w	r3, r3, #4
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d0f9      	beq.n	80063a8 <SystemCoreSetup+0x1f4>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80063b4:	4b14      	ldr	r3, [pc, #80]	; (8006408 <SystemCoreSetup+0x254>)
 80063b6:	4a1a      	ldr	r2, [pc, #104]	; (8006420 <SystemCoreSetup+0x26c>)
 80063b8:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 80063ba:	f241 1094 	movw	r0, #4500	; 0x1194
 80063be:	f7ff fed2 	bl	8006166 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80063c2:	bf00      	nop
 80063c4:	4b10      	ldr	r3, [pc, #64]	; (8006408 <SystemCoreSetup+0x254>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0304 	and.w	r3, r3, #4
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d0f9      	beq.n	80063c4 <SystemCoreSetup+0x210>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80063d0:	4b0d      	ldr	r3, [pc, #52]	; (8006408 <SystemCoreSetup+0x254>)
 80063d2:	4a14      	ldr	r2, [pc, #80]	; (8006424 <SystemCoreSetup+0x270>)
 80063d4:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 80063d6:	f241 7070 	movw	r0, #6000	; 0x1770
 80063da:	f7ff fec4 	bl	8006166 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80063de:	bf00      	nop
 80063e0:	4b09      	ldr	r3, [pc, #36]	; (8006408 <SystemCoreSetup+0x254>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0304 	and.w	r3, r3, #4
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d0f9      	beq.n	80063e0 <SystemCoreSetup+0x22c>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 80063ec:	4b0e      	ldr	r3, [pc, #56]	; (8006428 <SystemCoreSetup+0x274>)
 80063ee:	2205      	movs	r2, #5
 80063f0:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 80063f2:	4b09      	ldr	r3, [pc, #36]	; (8006418 <SystemCoreSetup+0x264>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 80063f8:	f000 f818 	bl	800642c <SystemCoreClockUpdate>
}
 80063fc:	bf00      	nop
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	50004200 	.word	0x50004200
 8006404:	50004400 	.word	0x50004400
 8006408:	50004710 	.word	0x50004710
 800640c:	50004700 	.word	0x50004700
 8006410:	6b5fca6b 	.word	0x6b5fca6b
 8006414:	01134f00 	.word	0x01134f00
 8006418:	50004600 	.word	0x50004600
 800641c:	01074f00 	.word	0x01074f00
 8006420:	01044f00 	.word	0x01044f00
 8006424:	01034f00 	.word	0x01034f00
 8006428:	50004160 	.word	0x50004160

0800642c <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8006432:	4b2f      	ldr	r3, [pc, #188]	; (80064f0 <SystemCoreClockUpdate+0xc4>)
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d03e      	beq.n	80064bc <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 800643e:	4b2d      	ldr	r3, [pc, #180]	; (80064f4 <SystemCoreClockUpdate+0xc8>)
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 800644a:	4b2b      	ldr	r3, [pc, #172]	; (80064f8 <SystemCoreClockUpdate+0xcc>)
 800644c:	60fb      	str	r3, [r7, #12]
 800644e:	e002      	b.n	8006456 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8006450:	f000 f856 	bl	8006500 <OSCHP_GetFrequency>
 8006454:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8006456:	4b27      	ldr	r3, [pc, #156]	; (80064f4 <SystemCoreClockUpdate+0xc8>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0304 	and.w	r3, r3, #4
 800645e:	2b00      	cmp	r3, #0
 8006460:	d020      	beq.n	80064a4 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8006462:	4b24      	ldr	r3, [pc, #144]	; (80064f4 <SystemCoreClockUpdate+0xc8>)
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	0e1b      	lsrs	r3, r3, #24
 8006468:	f003 030f 	and.w	r3, r3, #15
 800646c:	3301      	adds	r3, #1
 800646e:	607b      	str	r3, [r7, #4]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8006470:	4b20      	ldr	r3, [pc, #128]	; (80064f4 <SystemCoreClockUpdate+0xc8>)
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	0a1b      	lsrs	r3, r3, #8
 8006476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800647a:	3301      	adds	r3, #1
 800647c:	603b      	str	r3, [r7, #0]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800647e:	4b1d      	ldr	r3, [pc, #116]	; (80064f4 <SystemCoreClockUpdate+0xc8>)
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	0c1b      	lsrs	r3, r3, #16
 8006484:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006488:	3301      	adds	r3, #1
 800648a:	60bb      	str	r3, [r7, #8]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	fb02 f303 	mul.w	r3, r2, r3
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	fbb2 f2f3 	udiv	r2, r2, r3
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	fb02 f303 	mul.w	r3, r2, r3
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	e00d      	b.n	80064c0 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80064a4:	4b13      	ldr	r3, [pc, #76]	; (80064f4 <SystemCoreClockUpdate+0xc8>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064ac:	3301      	adds	r3, #1
 80064ae:	60bb      	str	r3, [r7, #8]
      
      temp = (temp / kdiv);
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b8:	60fb      	str	r3, [r7, #12]
 80064ba:	e001      	b.n	80064c0 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 80064bc:	4b0e      	ldr	r3, [pc, #56]	; (80064f8 <SystemCoreClockUpdate+0xcc>)
 80064be:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80064c0:	4b0b      	ldr	r3, [pc, #44]	; (80064f0 <SystemCoreClockUpdate+0xc4>)
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	3301      	adds	r3, #1
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ce:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80064d0:	4b07      	ldr	r3, [pc, #28]	; (80064f0 <SystemCoreClockUpdate+0xc4>)
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	3301      	adds	r3, #1
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e0:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 80064e2:	4a06      	ldr	r2, [pc, #24]	; (80064fc <SystemCoreClockUpdate+0xd0>)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6013      	str	r3, [r2, #0]
}
 80064e8:	bf00      	nop
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	50004600 	.word	0x50004600
 80064f4:	50004710 	.word	0x50004710
 80064f8:	016e3600 	.word	0x016e3600
 80064fc:	2000ffc0 	.word	0x2000ffc0

08006500 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8006500:	b480      	push	{r7}
 8006502:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 8006504:	4b02      	ldr	r3, [pc, #8]	; (8006510 <OSCHP_GetFrequency+0x10>)
}
 8006506:	4618      	mov	r0, r3
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	00b71b00 	.word	0x00b71b00

08006514 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 800651c:	4b14      	ldr	r3, [pc, #80]	; (8006570 <_sbrk+0x5c>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d102      	bne.n	800652a <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8006524:	4b12      	ldr	r3, [pc, #72]	; (8006570 <_sbrk+0x5c>)
 8006526:	4a13      	ldr	r2, [pc, #76]	; (8006574 <_sbrk+0x60>)
 8006528:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 800652a:	4b11      	ldr	r3, [pc, #68]	; (8006570 <_sbrk+0x5c>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	3303      	adds	r3, #3
 8006534:	f023 0303 	bic.w	r3, r3, #3
 8006538:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 800653a:	4b0d      	ldr	r3, [pc, #52]	; (8006570 <_sbrk+0x5c>)
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4413      	add	r3, r2
 8006542:	4a0d      	ldr	r2, [pc, #52]	; (8006578 <_sbrk+0x64>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d207      	bcs.n	8006558 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8006548:	4b09      	ldr	r3, [pc, #36]	; (8006570 <_sbrk+0x5c>)
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4413      	add	r3, r2
 8006550:	4a07      	ldr	r2, [pc, #28]	; (8006570 <_sbrk+0x5c>)
 8006552:	6013      	str	r3, [r2, #0]
    return (base);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	e006      	b.n	8006566 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8006558:	f000 fa5c 	bl	8006a14 <__errno>
 800655c:	4602      	mov	r2, r0
 800655e:	230c      	movs	r3, #12
 8006560:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8006562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8006566:	4618      	mov	r0, r3
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	20000540 	.word	0x20000540
 8006574:	20000f68 	.word	0x20000f68
 8006578:	2000ffc0 	.word	0x2000ffc0

0800657c <_init>:

/* Init */
void _init(void)
{}
 800657c:	b480      	push	{r7}
 800657e:	af00      	add	r7, sp, #0
 8006580:	bf00      	nop
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
	...

0800658c <__aeabi_drsub>:
 800658c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006590:	e002      	b.n	8006598 <__adddf3>
 8006592:	bf00      	nop

08006594 <__aeabi_dsub>:
 8006594:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006598 <__adddf3>:
 8006598:	b530      	push	{r4, r5, lr}
 800659a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800659e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80065a2:	ea94 0f05 	teq	r4, r5
 80065a6:	bf08      	it	eq
 80065a8:	ea90 0f02 	teqeq	r0, r2
 80065ac:	bf1f      	itttt	ne
 80065ae:	ea54 0c00 	orrsne.w	ip, r4, r0
 80065b2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80065b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80065ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80065be:	f000 80e2 	beq.w	8006786 <__adddf3+0x1ee>
 80065c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80065c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80065ca:	bfb8      	it	lt
 80065cc:	426d      	neglt	r5, r5
 80065ce:	dd0c      	ble.n	80065ea <__adddf3+0x52>
 80065d0:	442c      	add	r4, r5
 80065d2:	ea80 0202 	eor.w	r2, r0, r2
 80065d6:	ea81 0303 	eor.w	r3, r1, r3
 80065da:	ea82 0000 	eor.w	r0, r2, r0
 80065de:	ea83 0101 	eor.w	r1, r3, r1
 80065e2:	ea80 0202 	eor.w	r2, r0, r2
 80065e6:	ea81 0303 	eor.w	r3, r1, r3
 80065ea:	2d36      	cmp	r5, #54	; 0x36
 80065ec:	bf88      	it	hi
 80065ee:	bd30      	pophi	{r4, r5, pc}
 80065f0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80065f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80065f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80065fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8006600:	d002      	beq.n	8006608 <__adddf3+0x70>
 8006602:	4240      	negs	r0, r0
 8006604:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006608:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800660c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006610:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8006614:	d002      	beq.n	800661c <__adddf3+0x84>
 8006616:	4252      	negs	r2, r2
 8006618:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800661c:	ea94 0f05 	teq	r4, r5
 8006620:	f000 80a7 	beq.w	8006772 <__adddf3+0x1da>
 8006624:	f1a4 0401 	sub.w	r4, r4, #1
 8006628:	f1d5 0e20 	rsbs	lr, r5, #32
 800662c:	db0d      	blt.n	800664a <__adddf3+0xb2>
 800662e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8006632:	fa22 f205 	lsr.w	r2, r2, r5
 8006636:	1880      	adds	r0, r0, r2
 8006638:	f141 0100 	adc.w	r1, r1, #0
 800663c:	fa03 f20e 	lsl.w	r2, r3, lr
 8006640:	1880      	adds	r0, r0, r2
 8006642:	fa43 f305 	asr.w	r3, r3, r5
 8006646:	4159      	adcs	r1, r3
 8006648:	e00e      	b.n	8006668 <__adddf3+0xd0>
 800664a:	f1a5 0520 	sub.w	r5, r5, #32
 800664e:	f10e 0e20 	add.w	lr, lr, #32
 8006652:	2a01      	cmp	r2, #1
 8006654:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006658:	bf28      	it	cs
 800665a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800665e:	fa43 f305 	asr.w	r3, r3, r5
 8006662:	18c0      	adds	r0, r0, r3
 8006664:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006668:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800666c:	d507      	bpl.n	800667e <__adddf3+0xe6>
 800666e:	f04f 0e00 	mov.w	lr, #0
 8006672:	f1dc 0c00 	rsbs	ip, ip, #0
 8006676:	eb7e 0000 	sbcs.w	r0, lr, r0
 800667a:	eb6e 0101 	sbc.w	r1, lr, r1
 800667e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006682:	d31b      	bcc.n	80066bc <__adddf3+0x124>
 8006684:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006688:	d30c      	bcc.n	80066a4 <__adddf3+0x10c>
 800668a:	0849      	lsrs	r1, r1, #1
 800668c:	ea5f 0030 	movs.w	r0, r0, rrx
 8006690:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006694:	f104 0401 	add.w	r4, r4, #1
 8006698:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800669c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80066a0:	f080 809a 	bcs.w	80067d8 <__adddf3+0x240>
 80066a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80066a8:	bf08      	it	eq
 80066aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80066ae:	f150 0000 	adcs.w	r0, r0, #0
 80066b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80066b6:	ea41 0105 	orr.w	r1, r1, r5
 80066ba:	bd30      	pop	{r4, r5, pc}
 80066bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80066c0:	4140      	adcs	r0, r0
 80066c2:	eb41 0101 	adc.w	r1, r1, r1
 80066c6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80066ca:	f1a4 0401 	sub.w	r4, r4, #1
 80066ce:	d1e9      	bne.n	80066a4 <__adddf3+0x10c>
 80066d0:	f091 0f00 	teq	r1, #0
 80066d4:	bf04      	itt	eq
 80066d6:	4601      	moveq	r1, r0
 80066d8:	2000      	moveq	r0, #0
 80066da:	fab1 f381 	clz	r3, r1
 80066de:	bf08      	it	eq
 80066e0:	3320      	addeq	r3, #32
 80066e2:	f1a3 030b 	sub.w	r3, r3, #11
 80066e6:	f1b3 0220 	subs.w	r2, r3, #32
 80066ea:	da0c      	bge.n	8006706 <__adddf3+0x16e>
 80066ec:	320c      	adds	r2, #12
 80066ee:	dd08      	ble.n	8006702 <__adddf3+0x16a>
 80066f0:	f102 0c14 	add.w	ip, r2, #20
 80066f4:	f1c2 020c 	rsb	r2, r2, #12
 80066f8:	fa01 f00c 	lsl.w	r0, r1, ip
 80066fc:	fa21 f102 	lsr.w	r1, r1, r2
 8006700:	e00c      	b.n	800671c <__adddf3+0x184>
 8006702:	f102 0214 	add.w	r2, r2, #20
 8006706:	bfd8      	it	le
 8006708:	f1c2 0c20 	rsble	ip, r2, #32
 800670c:	fa01 f102 	lsl.w	r1, r1, r2
 8006710:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006714:	bfdc      	itt	le
 8006716:	ea41 010c 	orrle.w	r1, r1, ip
 800671a:	4090      	lslle	r0, r2
 800671c:	1ae4      	subs	r4, r4, r3
 800671e:	bfa2      	ittt	ge
 8006720:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006724:	4329      	orrge	r1, r5
 8006726:	bd30      	popge	{r4, r5, pc}
 8006728:	ea6f 0404 	mvn.w	r4, r4
 800672c:	3c1f      	subs	r4, #31
 800672e:	da1c      	bge.n	800676a <__adddf3+0x1d2>
 8006730:	340c      	adds	r4, #12
 8006732:	dc0e      	bgt.n	8006752 <__adddf3+0x1ba>
 8006734:	f104 0414 	add.w	r4, r4, #20
 8006738:	f1c4 0220 	rsb	r2, r4, #32
 800673c:	fa20 f004 	lsr.w	r0, r0, r4
 8006740:	fa01 f302 	lsl.w	r3, r1, r2
 8006744:	ea40 0003 	orr.w	r0, r0, r3
 8006748:	fa21 f304 	lsr.w	r3, r1, r4
 800674c:	ea45 0103 	orr.w	r1, r5, r3
 8006750:	bd30      	pop	{r4, r5, pc}
 8006752:	f1c4 040c 	rsb	r4, r4, #12
 8006756:	f1c4 0220 	rsb	r2, r4, #32
 800675a:	fa20 f002 	lsr.w	r0, r0, r2
 800675e:	fa01 f304 	lsl.w	r3, r1, r4
 8006762:	ea40 0003 	orr.w	r0, r0, r3
 8006766:	4629      	mov	r1, r5
 8006768:	bd30      	pop	{r4, r5, pc}
 800676a:	fa21 f004 	lsr.w	r0, r1, r4
 800676e:	4629      	mov	r1, r5
 8006770:	bd30      	pop	{r4, r5, pc}
 8006772:	f094 0f00 	teq	r4, #0
 8006776:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800677a:	bf06      	itte	eq
 800677c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006780:	3401      	addeq	r4, #1
 8006782:	3d01      	subne	r5, #1
 8006784:	e74e      	b.n	8006624 <__adddf3+0x8c>
 8006786:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800678a:	bf18      	it	ne
 800678c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006790:	d029      	beq.n	80067e6 <__adddf3+0x24e>
 8006792:	ea94 0f05 	teq	r4, r5
 8006796:	bf08      	it	eq
 8006798:	ea90 0f02 	teqeq	r0, r2
 800679c:	d005      	beq.n	80067aa <__adddf3+0x212>
 800679e:	ea54 0c00 	orrs.w	ip, r4, r0
 80067a2:	bf04      	itt	eq
 80067a4:	4619      	moveq	r1, r3
 80067a6:	4610      	moveq	r0, r2
 80067a8:	bd30      	pop	{r4, r5, pc}
 80067aa:	ea91 0f03 	teq	r1, r3
 80067ae:	bf1e      	ittt	ne
 80067b0:	2100      	movne	r1, #0
 80067b2:	2000      	movne	r0, #0
 80067b4:	bd30      	popne	{r4, r5, pc}
 80067b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80067ba:	d105      	bne.n	80067c8 <__adddf3+0x230>
 80067bc:	0040      	lsls	r0, r0, #1
 80067be:	4149      	adcs	r1, r1
 80067c0:	bf28      	it	cs
 80067c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80067c6:	bd30      	pop	{r4, r5, pc}
 80067c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80067cc:	bf3c      	itt	cc
 80067ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80067d2:	bd30      	popcc	{r4, r5, pc}
 80067d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80067d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80067dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80067e0:	f04f 0000 	mov.w	r0, #0
 80067e4:	bd30      	pop	{r4, r5, pc}
 80067e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80067ea:	bf1a      	itte	ne
 80067ec:	4619      	movne	r1, r3
 80067ee:	4610      	movne	r0, r2
 80067f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80067f4:	bf1c      	itt	ne
 80067f6:	460b      	movne	r3, r1
 80067f8:	4602      	movne	r2, r0
 80067fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80067fe:	bf06      	itte	eq
 8006800:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006804:	ea91 0f03 	teqeq	r1, r3
 8006808:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800680c:	bd30      	pop	{r4, r5, pc}
 800680e:	bf00      	nop

08006810 <__aeabi_ui2d>:
 8006810:	f090 0f00 	teq	r0, #0
 8006814:	bf04      	itt	eq
 8006816:	2100      	moveq	r1, #0
 8006818:	4770      	bxeq	lr
 800681a:	b530      	push	{r4, r5, lr}
 800681c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006820:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006824:	f04f 0500 	mov.w	r5, #0
 8006828:	f04f 0100 	mov.w	r1, #0
 800682c:	e750      	b.n	80066d0 <__adddf3+0x138>
 800682e:	bf00      	nop

08006830 <__aeabi_i2d>:
 8006830:	f090 0f00 	teq	r0, #0
 8006834:	bf04      	itt	eq
 8006836:	2100      	moveq	r1, #0
 8006838:	4770      	bxeq	lr
 800683a:	b530      	push	{r4, r5, lr}
 800683c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006840:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006844:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8006848:	bf48      	it	mi
 800684a:	4240      	negmi	r0, r0
 800684c:	f04f 0100 	mov.w	r1, #0
 8006850:	e73e      	b.n	80066d0 <__adddf3+0x138>
 8006852:	bf00      	nop

08006854 <__aeabi_f2d>:
 8006854:	0042      	lsls	r2, r0, #1
 8006856:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800685a:	ea4f 0131 	mov.w	r1, r1, rrx
 800685e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8006862:	bf1f      	itttt	ne
 8006864:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8006868:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800686c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006870:	4770      	bxne	lr
 8006872:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8006876:	bf08      	it	eq
 8006878:	4770      	bxeq	lr
 800687a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800687e:	bf04      	itt	eq
 8006880:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8006884:	4770      	bxeq	lr
 8006886:	b530      	push	{r4, r5, lr}
 8006888:	f44f 7460 	mov.w	r4, #896	; 0x380
 800688c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006890:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006894:	e71c      	b.n	80066d0 <__adddf3+0x138>
 8006896:	bf00      	nop

08006898 <__aeabi_ul2d>:
 8006898:	ea50 0201 	orrs.w	r2, r0, r1
 800689c:	bf08      	it	eq
 800689e:	4770      	bxeq	lr
 80068a0:	b530      	push	{r4, r5, lr}
 80068a2:	f04f 0500 	mov.w	r5, #0
 80068a6:	e00a      	b.n	80068be <__aeabi_l2d+0x16>

080068a8 <__aeabi_l2d>:
 80068a8:	ea50 0201 	orrs.w	r2, r0, r1
 80068ac:	bf08      	it	eq
 80068ae:	4770      	bxeq	lr
 80068b0:	b530      	push	{r4, r5, lr}
 80068b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80068b6:	d502      	bpl.n	80068be <__aeabi_l2d+0x16>
 80068b8:	4240      	negs	r0, r0
 80068ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80068be:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80068c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80068c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80068ca:	f43f aed8 	beq.w	800667e <__adddf3+0xe6>
 80068ce:	f04f 0203 	mov.w	r2, #3
 80068d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80068d6:	bf18      	it	ne
 80068d8:	3203      	addne	r2, #3
 80068da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80068de:	bf18      	it	ne
 80068e0:	3203      	addne	r2, #3
 80068e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80068e6:	f1c2 0320 	rsb	r3, r2, #32
 80068ea:	fa00 fc03 	lsl.w	ip, r0, r3
 80068ee:	fa20 f002 	lsr.w	r0, r0, r2
 80068f2:	fa01 fe03 	lsl.w	lr, r1, r3
 80068f6:	ea40 000e 	orr.w	r0, r0, lr
 80068fa:	fa21 f102 	lsr.w	r1, r1, r2
 80068fe:	4414      	add	r4, r2
 8006900:	e6bd      	b.n	800667e <__adddf3+0xe6>
 8006902:	bf00      	nop

08006904 <__gedf2>:
 8006904:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8006908:	e006      	b.n	8006918 <__cmpdf2+0x4>
 800690a:	bf00      	nop

0800690c <__ledf2>:
 800690c:	f04f 0c01 	mov.w	ip, #1
 8006910:	e002      	b.n	8006918 <__cmpdf2+0x4>
 8006912:	bf00      	nop

08006914 <__cmpdf2>:
 8006914:	f04f 0c01 	mov.w	ip, #1
 8006918:	f84d cd04 	str.w	ip, [sp, #-4]!
 800691c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006920:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006924:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006928:	bf18      	it	ne
 800692a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800692e:	d01b      	beq.n	8006968 <__cmpdf2+0x54>
 8006930:	b001      	add	sp, #4
 8006932:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8006936:	bf0c      	ite	eq
 8006938:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800693c:	ea91 0f03 	teqne	r1, r3
 8006940:	bf02      	ittt	eq
 8006942:	ea90 0f02 	teqeq	r0, r2
 8006946:	2000      	moveq	r0, #0
 8006948:	4770      	bxeq	lr
 800694a:	f110 0f00 	cmn.w	r0, #0
 800694e:	ea91 0f03 	teq	r1, r3
 8006952:	bf58      	it	pl
 8006954:	4299      	cmppl	r1, r3
 8006956:	bf08      	it	eq
 8006958:	4290      	cmpeq	r0, r2
 800695a:	bf2c      	ite	cs
 800695c:	17d8      	asrcs	r0, r3, #31
 800695e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8006962:	f040 0001 	orr.w	r0, r0, #1
 8006966:	4770      	bx	lr
 8006968:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800696c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006970:	d102      	bne.n	8006978 <__cmpdf2+0x64>
 8006972:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006976:	d107      	bne.n	8006988 <__cmpdf2+0x74>
 8006978:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800697c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006980:	d1d6      	bne.n	8006930 <__cmpdf2+0x1c>
 8006982:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006986:	d0d3      	beq.n	8006930 <__cmpdf2+0x1c>
 8006988:	f85d 0b04 	ldr.w	r0, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop

08006990 <__aeabi_cdrcmple>:
 8006990:	4684      	mov	ip, r0
 8006992:	4610      	mov	r0, r2
 8006994:	4662      	mov	r2, ip
 8006996:	468c      	mov	ip, r1
 8006998:	4619      	mov	r1, r3
 800699a:	4663      	mov	r3, ip
 800699c:	e000      	b.n	80069a0 <__aeabi_cdcmpeq>
 800699e:	bf00      	nop

080069a0 <__aeabi_cdcmpeq>:
 80069a0:	b501      	push	{r0, lr}
 80069a2:	f7ff ffb7 	bl	8006914 <__cmpdf2>
 80069a6:	2800      	cmp	r0, #0
 80069a8:	bf48      	it	mi
 80069aa:	f110 0f00 	cmnmi.w	r0, #0
 80069ae:	bd01      	pop	{r0, pc}

080069b0 <__aeabi_dcmpeq>:
 80069b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80069b4:	f7ff fff4 	bl	80069a0 <__aeabi_cdcmpeq>
 80069b8:	bf0c      	ite	eq
 80069ba:	2001      	moveq	r0, #1
 80069bc:	2000      	movne	r0, #0
 80069be:	f85d fb08 	ldr.w	pc, [sp], #8
 80069c2:	bf00      	nop

080069c4 <__aeabi_dcmplt>:
 80069c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80069c8:	f7ff ffea 	bl	80069a0 <__aeabi_cdcmpeq>
 80069cc:	bf34      	ite	cc
 80069ce:	2001      	movcc	r0, #1
 80069d0:	2000      	movcs	r0, #0
 80069d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80069d6:	bf00      	nop

080069d8 <__aeabi_dcmple>:
 80069d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80069dc:	f7ff ffe0 	bl	80069a0 <__aeabi_cdcmpeq>
 80069e0:	bf94      	ite	ls
 80069e2:	2001      	movls	r0, #1
 80069e4:	2000      	movhi	r0, #0
 80069e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80069ea:	bf00      	nop

080069ec <__aeabi_dcmpge>:
 80069ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80069f0:	f7ff ffce 	bl	8006990 <__aeabi_cdrcmple>
 80069f4:	bf94      	ite	ls
 80069f6:	2001      	movls	r0, #1
 80069f8:	2000      	movhi	r0, #0
 80069fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80069fe:	bf00      	nop

08006a00 <__aeabi_dcmpgt>:
 8006a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006a04:	f7ff ffc4 	bl	8006990 <__aeabi_cdrcmple>
 8006a08:	bf34      	ite	cc
 8006a0a:	2001      	movcc	r0, #1
 8006a0c:	2000      	movcs	r0, #0
 8006a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006a12:	bf00      	nop

08006a14 <__errno>:
 8006a14:	4b01      	ldr	r3, [pc, #4]	; (8006a1c <__errno+0x8>)
 8006a16:	6818      	ldr	r0, [r3, #0]
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	20000088 	.word	0x20000088

08006a20 <__libc_init_array>:
 8006a20:	b570      	push	{r4, r5, r6, lr}
 8006a22:	4e0d      	ldr	r6, [pc, #52]	; (8006a58 <__libc_init_array+0x38>)
 8006a24:	4d0d      	ldr	r5, [pc, #52]	; (8006a5c <__libc_init_array+0x3c>)
 8006a26:	1b76      	subs	r6, r6, r5
 8006a28:	10b6      	asrs	r6, r6, #2
 8006a2a:	d006      	beq.n	8006a3a <__libc_init_array+0x1a>
 8006a2c:	2400      	movs	r4, #0
 8006a2e:	3401      	adds	r4, #1
 8006a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a34:	4798      	blx	r3
 8006a36:	42a6      	cmp	r6, r4
 8006a38:	d1f9      	bne.n	8006a2e <__libc_init_array+0xe>
 8006a3a:	4e09      	ldr	r6, [pc, #36]	; (8006a60 <__libc_init_array+0x40>)
 8006a3c:	4d09      	ldr	r5, [pc, #36]	; (8006a64 <__libc_init_array+0x44>)
 8006a3e:	1b76      	subs	r6, r6, r5
 8006a40:	f7ff fd9c 	bl	800657c <_init>
 8006a44:	10b6      	asrs	r6, r6, #2
 8006a46:	d006      	beq.n	8006a56 <__libc_init_array+0x36>
 8006a48:	2400      	movs	r4, #0
 8006a4a:	3401      	adds	r4, #1
 8006a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a50:	4798      	blx	r3
 8006a52:	42a6      	cmp	r6, r4
 8006a54:	d1f9      	bne.n	8006a4a <__libc_init_array+0x2a>
 8006a56:	bd70      	pop	{r4, r5, r6, pc}
 8006a58:	200004b8 	.word	0x200004b8
 8006a5c:	200004b8 	.word	0x200004b8
 8006a60:	200004b8 	.word	0x200004b8
 8006a64:	200004b8 	.word	0x200004b8

08006a68 <memcmp>:
 8006a68:	2a03      	cmp	r2, #3
 8006a6a:	b470      	push	{r4, r5, r6}
 8006a6c:	d914      	bls.n	8006a98 <memcmp+0x30>
 8006a6e:	ea40 0501 	orr.w	r5, r0, r1
 8006a72:	07ad      	lsls	r5, r5, #30
 8006a74:	4604      	mov	r4, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	d122      	bne.n	8006ac0 <memcmp+0x58>
 8006a7a:	681d      	ldr	r5, [r3, #0]
 8006a7c:	6826      	ldr	r6, [r4, #0]
 8006a7e:	42ae      	cmp	r6, r5
 8006a80:	4619      	mov	r1, r3
 8006a82:	4620      	mov	r0, r4
 8006a84:	f103 0304 	add.w	r3, r3, #4
 8006a88:	f104 0404 	add.w	r4, r4, #4
 8006a8c:	d118      	bne.n	8006ac0 <memcmp+0x58>
 8006a8e:	3a04      	subs	r2, #4
 8006a90:	2a03      	cmp	r2, #3
 8006a92:	4620      	mov	r0, r4
 8006a94:	4619      	mov	r1, r3
 8006a96:	d8f0      	bhi.n	8006a7a <memcmp+0x12>
 8006a98:	1e54      	subs	r4, r2, #1
 8006a9a:	b172      	cbz	r2, 8006aba <memcmp+0x52>
 8006a9c:	7802      	ldrb	r2, [r0, #0]
 8006a9e:	780b      	ldrb	r3, [r1, #0]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	bf08      	it	eq
 8006aa4:	1864      	addeq	r4, r4, r1
 8006aa6:	d006      	beq.n	8006ab6 <memcmp+0x4e>
 8006aa8:	e00c      	b.n	8006ac4 <memcmp+0x5c>
 8006aaa:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8006aae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d106      	bne.n	8006ac4 <memcmp+0x5c>
 8006ab6:	42a1      	cmp	r1, r4
 8006ab8:	d1f7      	bne.n	8006aaa <memcmp+0x42>
 8006aba:	2000      	movs	r0, #0
 8006abc:	bc70      	pop	{r4, r5, r6}
 8006abe:	4770      	bx	lr
 8006ac0:	1e54      	subs	r4, r2, #1
 8006ac2:	e7eb      	b.n	8006a9c <memcmp+0x34>
 8006ac4:	1ad0      	subs	r0, r2, r3
 8006ac6:	bc70      	pop	{r4, r5, r6}
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop

08006acc <memcpy>:
 8006acc:	4684      	mov	ip, r0
 8006ace:	ea41 0300 	orr.w	r3, r1, r0
 8006ad2:	f013 0303 	ands.w	r3, r3, #3
 8006ad6:	d16d      	bne.n	8006bb4 <memcpy+0xe8>
 8006ad8:	3a40      	subs	r2, #64	; 0x40
 8006ada:	d341      	bcc.n	8006b60 <memcpy+0x94>
 8006adc:	f851 3b04 	ldr.w	r3, [r1], #4
 8006ae0:	f840 3b04 	str.w	r3, [r0], #4
 8006ae4:	f851 3b04 	ldr.w	r3, [r1], #4
 8006ae8:	f840 3b04 	str.w	r3, [r0], #4
 8006aec:	f851 3b04 	ldr.w	r3, [r1], #4
 8006af0:	f840 3b04 	str.w	r3, [r0], #4
 8006af4:	f851 3b04 	ldr.w	r3, [r1], #4
 8006af8:	f840 3b04 	str.w	r3, [r0], #4
 8006afc:	f851 3b04 	ldr.w	r3, [r1], #4
 8006b00:	f840 3b04 	str.w	r3, [r0], #4
 8006b04:	f851 3b04 	ldr.w	r3, [r1], #4
 8006b08:	f840 3b04 	str.w	r3, [r0], #4
 8006b0c:	f851 3b04 	ldr.w	r3, [r1], #4
 8006b10:	f840 3b04 	str.w	r3, [r0], #4
 8006b14:	f851 3b04 	ldr.w	r3, [r1], #4
 8006b18:	f840 3b04 	str.w	r3, [r0], #4
 8006b1c:	f851 3b04 	ldr.w	r3, [r1], #4
 8006b20:	f840 3b04 	str.w	r3, [r0], #4
 8006b24:	f851 3b04 	ldr.w	r3, [r1], #4
 8006b28:	f840 3b04 	str.w	r3, [r0], #4
 8006b2c:	f851 3b04 	ldr.w	r3, [r1], #4
 8006b30:	f840 3b04 	str.w	r3, [r0], #4
 8006b34:	f851 3b04 	ldr.w	r3, [r1], #4
 8006b38:	f840 3b04 	str.w	r3, [r0], #4
 8006b3c:	f851 3b04 	ldr.w	r3, [r1], #4
 8006b40:	f840 3b04 	str.w	r3, [r0], #4
 8006b44:	f851 3b04 	ldr.w	r3, [r1], #4
 8006b48:	f840 3b04 	str.w	r3, [r0], #4
 8006b4c:	f851 3b04 	ldr.w	r3, [r1], #4
 8006b50:	f840 3b04 	str.w	r3, [r0], #4
 8006b54:	f851 3b04 	ldr.w	r3, [r1], #4
 8006b58:	f840 3b04 	str.w	r3, [r0], #4
 8006b5c:	3a40      	subs	r2, #64	; 0x40
 8006b5e:	d2bd      	bcs.n	8006adc <memcpy+0x10>
 8006b60:	3230      	adds	r2, #48	; 0x30
 8006b62:	d311      	bcc.n	8006b88 <memcpy+0xbc>
 8006b64:	f851 3b04 	ldr.w	r3, [r1], #4
 8006b68:	f840 3b04 	str.w	r3, [r0], #4
 8006b6c:	f851 3b04 	ldr.w	r3, [r1], #4
 8006b70:	f840 3b04 	str.w	r3, [r0], #4
 8006b74:	f851 3b04 	ldr.w	r3, [r1], #4
 8006b78:	f840 3b04 	str.w	r3, [r0], #4
 8006b7c:	f851 3b04 	ldr.w	r3, [r1], #4
 8006b80:	f840 3b04 	str.w	r3, [r0], #4
 8006b84:	3a10      	subs	r2, #16
 8006b86:	d2ed      	bcs.n	8006b64 <memcpy+0x98>
 8006b88:	320c      	adds	r2, #12
 8006b8a:	d305      	bcc.n	8006b98 <memcpy+0xcc>
 8006b8c:	f851 3b04 	ldr.w	r3, [r1], #4
 8006b90:	f840 3b04 	str.w	r3, [r0], #4
 8006b94:	3a04      	subs	r2, #4
 8006b96:	d2f9      	bcs.n	8006b8c <memcpy+0xc0>
 8006b98:	3204      	adds	r2, #4
 8006b9a:	d008      	beq.n	8006bae <memcpy+0xe2>
 8006b9c:	07d2      	lsls	r2, r2, #31
 8006b9e:	bf1c      	itt	ne
 8006ba0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8006ba4:	f800 3b01 	strbne.w	r3, [r0], #1
 8006ba8:	d301      	bcc.n	8006bae <memcpy+0xe2>
 8006baa:	880b      	ldrh	r3, [r1, #0]
 8006bac:	8003      	strh	r3, [r0, #0]
 8006bae:	4660      	mov	r0, ip
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	2a08      	cmp	r2, #8
 8006bb6:	d313      	bcc.n	8006be0 <memcpy+0x114>
 8006bb8:	078b      	lsls	r3, r1, #30
 8006bba:	d08d      	beq.n	8006ad8 <memcpy+0xc>
 8006bbc:	f010 0303 	ands.w	r3, r0, #3
 8006bc0:	d08a      	beq.n	8006ad8 <memcpy+0xc>
 8006bc2:	f1c3 0304 	rsb	r3, r3, #4
 8006bc6:	1ad2      	subs	r2, r2, r3
 8006bc8:	07db      	lsls	r3, r3, #31
 8006bca:	bf1c      	itt	ne
 8006bcc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8006bd0:	f800 3b01 	strbne.w	r3, [r0], #1
 8006bd4:	d380      	bcc.n	8006ad8 <memcpy+0xc>
 8006bd6:	f831 3b02 	ldrh.w	r3, [r1], #2
 8006bda:	f820 3b02 	strh.w	r3, [r0], #2
 8006bde:	e77b      	b.n	8006ad8 <memcpy+0xc>
 8006be0:	3a04      	subs	r2, #4
 8006be2:	d3d9      	bcc.n	8006b98 <memcpy+0xcc>
 8006be4:	3a01      	subs	r2, #1
 8006be6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bea:	f800 3b01 	strb.w	r3, [r0], #1
 8006bee:	d2f9      	bcs.n	8006be4 <memcpy+0x118>
 8006bf0:	780b      	ldrb	r3, [r1, #0]
 8006bf2:	7003      	strb	r3, [r0, #0]
 8006bf4:	784b      	ldrb	r3, [r1, #1]
 8006bf6:	7043      	strb	r3, [r0, #1]
 8006bf8:	788b      	ldrb	r3, [r1, #2]
 8006bfa:	7083      	strb	r3, [r0, #2]
 8006bfc:	4660      	mov	r0, ip
 8006bfe:	4770      	bx	lr

08006c00 <memset>:
 8006c00:	b4f0      	push	{r4, r5, r6, r7}
 8006c02:	0786      	lsls	r6, r0, #30
 8006c04:	d043      	beq.n	8006c8e <memset+0x8e>
 8006c06:	1e54      	subs	r4, r2, #1
 8006c08:	2a00      	cmp	r2, #0
 8006c0a:	d03e      	beq.n	8006c8a <memset+0x8a>
 8006c0c:	b2ca      	uxtb	r2, r1
 8006c0e:	4603      	mov	r3, r0
 8006c10:	e002      	b.n	8006c18 <memset+0x18>
 8006c12:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8006c16:	d338      	bcc.n	8006c8a <memset+0x8a>
 8006c18:	f803 2b01 	strb.w	r2, [r3], #1
 8006c1c:	079d      	lsls	r5, r3, #30
 8006c1e:	d1f8      	bne.n	8006c12 <memset+0x12>
 8006c20:	2c03      	cmp	r4, #3
 8006c22:	d92b      	bls.n	8006c7c <memset+0x7c>
 8006c24:	b2cd      	uxtb	r5, r1
 8006c26:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8006c2a:	2c0f      	cmp	r4, #15
 8006c2c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8006c30:	d916      	bls.n	8006c60 <memset+0x60>
 8006c32:	f1a4 0710 	sub.w	r7, r4, #16
 8006c36:	093f      	lsrs	r7, r7, #4
 8006c38:	f103 0620 	add.w	r6, r3, #32
 8006c3c:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8006c40:	f103 0210 	add.w	r2, r3, #16
 8006c44:	e942 5504 	strd	r5, r5, [r2, #-16]
 8006c48:	e942 5502 	strd	r5, r5, [r2, #-8]
 8006c4c:	3210      	adds	r2, #16
 8006c4e:	42b2      	cmp	r2, r6
 8006c50:	d1f8      	bne.n	8006c44 <memset+0x44>
 8006c52:	f004 040f 	and.w	r4, r4, #15
 8006c56:	3701      	adds	r7, #1
 8006c58:	2c03      	cmp	r4, #3
 8006c5a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8006c5e:	d90d      	bls.n	8006c7c <memset+0x7c>
 8006c60:	461e      	mov	r6, r3
 8006c62:	4622      	mov	r2, r4
 8006c64:	3a04      	subs	r2, #4
 8006c66:	2a03      	cmp	r2, #3
 8006c68:	f846 5b04 	str.w	r5, [r6], #4
 8006c6c:	d8fa      	bhi.n	8006c64 <memset+0x64>
 8006c6e:	1f22      	subs	r2, r4, #4
 8006c70:	f022 0203 	bic.w	r2, r2, #3
 8006c74:	3204      	adds	r2, #4
 8006c76:	4413      	add	r3, r2
 8006c78:	f004 0403 	and.w	r4, r4, #3
 8006c7c:	b12c      	cbz	r4, 8006c8a <memset+0x8a>
 8006c7e:	b2c9      	uxtb	r1, r1
 8006c80:	441c      	add	r4, r3
 8006c82:	f803 1b01 	strb.w	r1, [r3], #1
 8006c86:	429c      	cmp	r4, r3
 8006c88:	d1fb      	bne.n	8006c82 <memset+0x82>
 8006c8a:	bcf0      	pop	{r4, r5, r6, r7}
 8006c8c:	4770      	bx	lr
 8006c8e:	4614      	mov	r4, r2
 8006c90:	4603      	mov	r3, r0
 8006c92:	e7c5      	b.n	8006c20 <memset+0x20>

08006c94 <clock_config>:
 8006c94:	0250 0104 0000 0001 0000 0000 0000 0001     P...............
 8006ca4:	0101 0101                                   ....

08006ca8 <KeyboardReport>:
 8006ca8:	0105 0609 01a1 0705 e019 e729 0015 0125     ..........)...%.
 8006cb8:	0175 0895 0281 0195 0875 0181 0805 0119     u.......u.......
 8006cc8:	0529 0595 0175 0291 0195 0375 0191 0015     )...u.....u.....
 8006cd8:	ff25 0705 0019 ff29 0695 0875 0081 00c0     %.....)...u.....

08006ce8 <DeviceDescriptor>:
 8006ce8:	0112 0110 0000 4000 03eb 2042 0001 0201     .......@..B ....
 8006cf8:	0100 0000                                   ....

08006cfc <ConfigurationDescriptor>:
 8006cfc:	0209 0022 0101 c000 0932 0004 0100 0103     ..".....2.......
 8006d0c:	0001 2109 0111 0100 3f22 0700 8105 0803     ...!...."?......
 8006d1c:	0100 0000                                   ....

08006d20 <LanguageString>:
 8006d20:	0304 0409 0000 0000                         ........

08006d28 <ManufacturerString>:
 8006d28:	0350 004d 0000 0061 0000 006e 0000 0075     P.M...a...n...u.
 8006d38:	0000 0066 0000 0061 0000 0063 0000 0074     ..f...a...c...t.
 8006d48:	0000 0075 0000 0072 0000 0065 0000 0072     ..u...r...e...r.
 8006d58:	0000 0020 0000 0053 0000 0074 0000 0072     .. ...S...t...r.
 8006d68:	0000 0069 0000 006e 0000 0067 0000 0000     ..i...n...g.....
 8006d78:	0000 0000                                   ....

08006d7c <ProductString>:
 8006d7c:	0348 0044 0000 0065 0000 0073 0000 0063     H.D...e...s...c.
 8006d8c:	0000 0072 0000 0069 0000 0070 0000 0074     ..r...i...p...t.
 8006d9c:	0000 006f 0000 0072 0000 0020 0000 0053     ..o...r... ...S.
 8006dac:	0000 0074 0000 0072 0000 0069 0000 006e     ..t...r...i...n.
 8006dbc:	0000 0067 0000 0000 0000 0000               ..g.........

08006dc8 <Driver_USBD0>:
 8006dc8:	532d 0800 5395 0800 55d1 0800 560d 0800     -S...S...U...V..
 8006dd8:	5641 0800 5675 0800 587d 0800 5a9d 0800     AV..uV..}X...Z..
 8006de8:	5d85 0800 58c9 0800 56d9 0800 5761 0800     .]...X...V..aW..
 8006df8:	57d9 0800 5a15 0800 5ef5 0800 5f21 0800     .W...Z...^..!_..

08006e08 <_global_impure_ptr>:
 8006e08:	0090 2000                                   ... 
